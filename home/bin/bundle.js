// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var a0 = Object.defineProperty;
var s0 = (t, e, r)=>e in t ? a0(t, e, {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: r
    }) : t[e] = r;
var Re = (t, e, r)=>(s0(t, typeof e != "symbol" ? e + "" : e, r), r), Be = (t, e, r)=>{
    if (!e.has(t)) throw TypeError("Cannot " + r);
};
var xe = (t, e, r)=>(Be(t, e, "read from private field"), r ? r.call(t) : e.get(t)), se = (t, e, r)=>{
    if (e.has(t)) throw TypeError("Cannot add the same private member more than once");
    e instanceof WeakSet ? e.add(t) : e.set(t, r);
}, We = (t, e, r, n)=>(Be(t, e, "write to private field"), n ? n.call(t, r) : e.set(t, r), r);
var ie = (t, e, r)=>(Be(t, e, "access private method"), r);
function M(t, e) {
    let r = t.length;
    Array.isArray(t[0]) || (t = [
        t
    ]), Array.isArray(e[0]) || (e = e.map((i1)=>[
            i1
        ]));
    let n = e[0].length, a = e[0].map((i1, o)=>e.map((l)=>l[o])), s = t.map((i1)=>a.map((o)=>{
            let l = 0;
            if (!Array.isArray(i1)) {
                for (let u of o)l += i1 * u;
                return l;
            }
            for(let u1 = 0; u1 < i1.length; u1++)l += i1[u1] * (o[u1] || 0);
            return l;
        }));
    return r === 1 && (s = s[0]), n === 1 ? s.map((i1)=>i1[0]) : s;
}
function V(t) {
    return I(t) === "string";
}
function I(t) {
    return (Object.prototype.toString.call(t).match(/^\[object\s+(.*?)\]$/)[1] || "").toLowerCase();
}
function ge(t, e) {
    t = +t, e = +e;
    let r = (Math.floor(t) + "").length;
    if (e > r) return +t.toFixed(e - r);
    {
        let n = 10 ** (r - e);
        return Math.round(t / n) * n;
    }
}
function St(t) {
    if (!t) return;
    t = t.trim();
    let e = /^([a-z]+)\((.+?)\)$/i, r = /^-?[\d.]+$/, n = t.match(e);
    if (n) {
        let a = [];
        return n[2].replace(/\/?\s*([-\w.]+(?:%|deg)?)/g, (s, i1)=>{
            /%$/.test(i1) ? (i1 = new Number(i1.slice(0, -1) / 100), i1.type = "<percentage>") : /deg$/.test(i1) ? (i1 = new Number(+i1.slice(0, -3)), i1.type = "<angle>", i1.unit = "deg") : r.test(i1) && (i1 = new Number(i1), i1.type = "<number>"), s.startsWith("/") && (i1 = i1 instanceof Number ? i1 : new Number(i1), i1.alpha = !0), a.push(i1);
        }), {
            name: n[1].toLowerCase(),
            rawName: n[1],
            rawArgs: n[2],
            args: a
        };
    }
}
function zt(t) {
    return t[t.length - 1];
}
function pe(t, e, r) {
    return isNaN(t) ? e : isNaN(e) ? t : t + (e - t) * r;
}
function Rt(t, e, r) {
    return (r - t) / (e - t);
}
function Te(t, e, r) {
    return pe(e[0], e[1], Rt(t[0], t[1], r));
}
function Bt(t) {
    return t.map((e)=>e.split("|").map((r)=>{
            r = r.trim();
            let n = r.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);
            if (n) {
                let a = new String(n[1]);
                return a.range = [
                    +n[2],
                    +n[3]
                ], a;
            }
            return r;
        }));
}
var i0 = Object.freeze({
    __proto__: null,
    isString: V,
    type: I,
    toPrecision: ge,
    parseFunction: St,
    last: zt,
    interpolate: pe,
    interpolateInv: Rt,
    mapRange: Te,
    parseCoordGrammar: Bt,
    multiplyMatrices: M
}), Ae = class {
    add(e, r, n) {
        if (typeof arguments[0] != "string") {
            for(var e in arguments[0])this.add(e, arguments[0][e], arguments[1]);
            return;
        }
        (Array.isArray(e) ? e : [
            e
        ]).forEach(function(a) {
            this[a] = this[a] || [], r && this[a][n ? "unshift" : "push"](r);
        }, this);
    }
    run(e, r) {
        this[e] = this[e] || [], this[e].forEach(function(n) {
            n.call(r && r.context ? r.context : r, r);
        });
    }
}, X = new Ae, E = {
    gamut_mapping: "lch.c",
    precision: 5,
    deltaE: "76"
}, B = {
    D50: [
        .3457 / .3585,
        1,
        (1 - .3457 - .3585) / .3585
    ],
    D65: [
        .3127 / .329,
        1,
        (1 - .3127 - .329) / .329
    ]
};
function Ye(t) {
    return Array.isArray(t) ? t : B[t];
}
function be(t, e, r, n = {}) {
    if (t = Ye(t), e = Ye(e), !t || !e) throw new TypeError(`Missing white point to convert ${t ? "" : "from"}${!t && !e ? "/" : ""}${e ? "" : "to"}`);
    if (t === e) return r;
    let a = {
        W1: t,
        W2: e,
        XYZ: r,
        options: n
    };
    if (X.run("chromatic-adaptation-start", a), a.M || (a.W1 === B.D65 && a.W2 === B.D50 ? a.M = [
        [
            1.0479298208405488,
            .022946793341019088,
            -.05019222954313557
        ],
        [
            .029627815688159344,
            .990434484573249,
            -.01707382502938514
        ],
        [
            -.009243058152591178,
            .015055144896577895,
            .7518742899580008
        ]
    ] : a.W1 === B.D50 && a.W2 === B.D65 && (a.M = [
        [
            .9554734527042182,
            -.023098536874261423,
            .0632593086610217
        ],
        [
            -.028369706963208136,
            1.0099954580058226,
            .021041398966943008
        ],
        [
            .012314001688319899,
            -.020507696433477912,
            1.3303659366080753
        ]
    ])), X.run("chromatic-adaptation-end", a), a.M) return M(a.M, a.XYZ);
    throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.");
}
var o0 = 75e-6, U, Ne, j, Ce, xt, S1 = class {
    constructor(e){
        se(this, U);
        se(this, Ce);
        se(this, j, void 0);
        this.id = e.id, this.name = e.name, this.base = e.base ? S1.get(e.base) : null, this.aliases = e.aliases, this.base && (this.fromBase = e.fromBase, this.toBase = e.toBase);
        let r = e.coords ?? this.base.coords;
        this.coords = r;
        let n = e.white ?? this.base.white ?? "D65";
        this.white = Ye(n), this.formats = e.formats ?? {};
        for(let a in this.formats){
            let s = this.formats[a];
            s.type ||= "function", s.name ||= a;
        }
        e.cssId && !this.formats.functions?.color ? (this.formats.color = {
            id: e.cssId
        }, Object.defineProperty(this, "cssId", {
            value: e.cssId
        })) : this.formats?.color && !this.formats?.color.id && (this.formats.color.id = this.id), this.referred = e.referred, We(this, j, ie(this, Ce, xt).call(this).reverse()), X.run("colorspace-init-end", this);
    }
    inGamut(e, { epsilon: r = o0  } = {}) {
        if (this.isPolar) return e = this.toBase(e), this.base.inGamut(e, {
            epsilon: r
        });
        let n = Object.values(this.coords);
        return e.every((a, s)=>{
            let i1 = n[s];
            if (i1.type !== "angle" && i1.range) {
                if (Number.isNaN(a)) return !0;
                let [o, l] = i1.range;
                return (o === void 0 || a >= o - r) && (l === void 0 || a <= l + r);
            }
            return !0;
        });
    }
    get cssId() {
        return this.formats.functions?.color?.id || this.id;
    }
    get isPolar() {
        for(let e in this.coords)if (this.coords[e].type === "angle") return !0;
        return !1;
    }
    getFormat(e) {
        if (typeof e == "object") return e = ie(this, U, Ne).call(this, e), e;
        let r;
        return e === "default" ? r = Object.values(this.formats)[0] : r = this.formats[e], r ? (r = ie(this, U, Ne).call(this, r), r) : null;
    }
    to(e, r) {
        if (arguments.length === 1 && ([e, r] = [
            e.space,
            e.coords
        ]), e = S1.get(e), this === e) return r;
        r = r.map((o)=>Number.isNaN(o) ? 0 : o);
        let n = xe(this, j), a = xe(e, j), s, i1;
        for(let o = 0; o < n.length && n[o] === a[o]; o++)s = n[o], i1 = o;
        if (!s) throw new Error(`Cannot convert between color spaces ${this} and ${e}: no connection space was found`);
        for(let o1 = n.length - 1; o1 > i1; o1--)r = n[o1].toBase(r);
        for(let o2 = i1 + 1; o2 < a.length; o2++)r = a[o2].fromBase(r);
        return r;
    }
    from(e, r) {
        return arguments.length === 1 && ([e, r] = [
            e.space,
            e.coords
        ]), e = S1.get(e), e.to(this, r);
    }
    toString() {
        return `${this.name} (${this.id})`;
    }
    getMinCoords() {
        let e = [];
        for(let r in this.coords){
            let n = this.coords[r], a = n.range || n.refRange;
            e.push(a?.min ?? 0);
        }
        return e;
    }
    static get all() {
        return [
            ...new Set(Object.values(S1.registry))
        ];
    }
    static register(e, r) {
        if (arguments.length === 1 && (r = arguments[0], e = r.id), r = this.get(r), this.registry[e] && this.registry[e] !== r) throw new Error(`Duplicate color space registration: '${e}'`);
        if (this.registry[e] = r, arguments.length === 1 && r.aliases) for (let n of r.aliases)this.register(n, r);
        return r;
    }
    static get(e, ...r) {
        if (!e || e instanceof S1) return e;
        if (I(e) === "string") {
            let a = S1.registry[e.toLowerCase()];
            if (!a) throw new TypeError(`No color space found with id = "${e}"`);
            return a;
        }
        if (r.length) return S1.get(...r);
        throw new TypeError(`${e} is not a valid color space`);
    }
    static resolveCoord(e, r) {
        let n = I(e), a, s;
        if (n === "string" ? e.includes(".") ? [a, s] = e.split(".") : [a, s] = [
            ,
            e
        ] : Array.isArray(e) ? [a, s] = e : (a = e.space, s = e.coordId), a = S1.get(a), a || (a = r), !a) throw new TypeError(`Cannot resolve coordinate reference ${e}: No color space specified and relative references are not allowed here`);
        if (n = I(s), n === "number" || n === "string" && s >= 0) {
            let l = Object.entries(a.coords)[s];
            if (l) return {
                space: a,
                id: l[0],
                index: s,
                ...l[1]
            };
        }
        a = S1.get(a);
        let i1 = s.toLowerCase(), o = 0;
        for(let l1 in a.coords){
            let u = a.coords[l1];
            if (l1.toLowerCase() === i1 || u.name?.toLowerCase() === i1) return {
                space: a,
                id: l1,
                index: o,
                ...u
            };
            o++;
        }
        throw new TypeError(`No "${s}" coordinate found in ${a.name}. Its coordinates are: ${Object.keys(a.coords).join(", ")}`);
    }
}, c = S1;
U = new WeakSet, Ne = function(e) {
    if (e.coords && !e.coordGrammar) {
        e.type ||= "function", e.name ||= "color", e.coordGrammar = Bt(e.coords);
        let r = Object.entries(this.coords).map(([n, a], s)=>{
            let i1 = e.coordGrammar[s][0], o = a.range || a.refRange, l = i1.range, u = "";
            return i1 == "<percentage>" ? (l = [
                0,
                100
            ], u = "%") : i1 == "<angle>" && (u = "deg"), {
                fromRange: o,
                toRange: l,
                suffix: u
            };
        });
        e.serializeCoords = (n, a)=>n.map((s, i1)=>{
                let { fromRange: o , toRange: l , suffix: u  } = r[i1];
                return o && l && (s = Te(o, l, s)), s = ge(s, a), u && (s += u), s;
            });
    }
    return e;
}, j = new WeakMap, Ce = new WeakSet, xt = function() {
    let e = [
        this
    ];
    for(let r = this; r = r.base;)e.push(r);
    return e;
}, Re(c, "registry", {}), Re(c, "DEFAULT_FORMAT", {
    type: "functions",
    name: "color"
});
var z = new c({
    id: "xyz-d65",
    name: "XYZ D65",
    coords: {
        x: {
            name: "X"
        },
        y: {
            name: "Y"
        },
        z: {
            name: "Z"
        }
    },
    white: "D65",
    formats: {
        color: {
            ids: [
                "xyz-d65",
                "xyz"
            ]
        }
    },
    aliases: [
        "xyz"
    ]
}), w = class extends c {
    constructor(e){
        e.coords || (e.coords = {
            r: {
                range: [
                    0,
                    1
                ],
                name: "Red"
            },
            g: {
                range: [
                    0,
                    1
                ],
                name: "Green"
            },
            b: {
                range: [
                    0,
                    1
                ],
                name: "Blue"
            }
        }), e.base || (e.base = z), e.toXYZ_M && e.fromXYZ_M && (e.toBase ??= (r)=>{
            let n = M(e.toXYZ_M, r);
            return this.white !== this.base.white && (n = be(this.white, this.base.white, n)), n;
        }, e.fromBase ??= (r)=>(r = be(this.base.white, this.white, r), M(e.fromXYZ_M, r))), e.referred ??= "display", super(e);
    }
};
function Et(t) {
    let e = {
        str: String(t)?.trim()
    };
    if (X.run("parse-start", e), e.color) return e.color;
    if (e.parsed = St(e.str), e.parsed) {
        let r = e.parsed.name;
        if (r === "color") {
            let n = e.parsed.args.shift(), a = e.parsed.rawArgs.indexOf("/") > 0 ? e.parsed.args.pop() : 1;
            for (let i1 of c.all){
                let o = i1.getFormat("color");
                if (o && (n === o.id || o.ids?.includes(n))) {
                    let l = Object.keys(i1.coords).length, u = Array(l).fill(0);
                    return u.forEach((h, f)=>u[f] = e.parsed.args[f] || 0), {
                        spaceId: i1.id,
                        coords: u,
                        alpha: a
                    };
                }
            }
            let s = "";
            if (n in c.registry) {
                let i11 = c.registry[n].formats?.functions?.color?.id;
                i11 && (s = `Did you mean color(${i11})?`);
            }
            throw new TypeError(`Cannot parse color(${n}). ` + (s || "Missing a plugin?"));
        } else for (let n1 of c.all){
            let a1 = n1.getFormat(r);
            if (a1 && a1.type === "function") {
                let s1 = 1;
                (a1.lastAlpha || zt(e.parsed.args).alpha) && (s1 = e.parsed.args.pop());
                let i2 = e.parsed.args;
                return a1.coordGrammar && Object.entries(n1.coords).forEach(([o, l], u)=>{
                    let h = a1.coordGrammar[u], f = i2[u]?.type;
                    if (h = h.find((p1)=>p1 == f), !h) {
                        let p1 = l.name || o;
                        throw new TypeError(`${f} not allowed for ${p1} in ${r}()`);
                    }
                    let d1 = h.range;
                    f === "<percentage>" && (d1 ||= [
                        0,
                        1
                    ]);
                    let b = l.range || l.refRange;
                    d1 && b && (i2[u] = Te(d1, b, i2[u]));
                }), {
                    spaceId: n1.id,
                    coords: i2,
                    alpha: s1
                };
            }
        }
    } else for (let r1 of c.all)for(let n2 in r1.formats){
        let a2 = r1.formats[n2];
        if (a2.type !== "custom" || a2.test && !a2.test(e.str)) continue;
        let s2 = a2.parse(e.str);
        if (s2) return s2.alpha ??= 1, s2;
    }
    throw new TypeError(`Could not parse ${t} as a color. Missing a plugin?`);
}
function g(t) {
    if (!t) throw new TypeError("Empty color reference");
    V(t) && (t = Et(t));
    let e = t.space || t.spaceId;
    return e instanceof c || (t.space = c.get(e)), t.alpha === void 0 && (t.alpha = 1), t;
}
function ee(t, e) {
    return e = c.get(e), e.from(t);
}
function x1(t, e) {
    let { space: r , index: n  } = c.resolveCoord(e, t.space);
    return ee(t, r)[n];
}
function $t(t, e, r) {
    return e = c.get(e), t.coords = e.to(t.space, r), t;
}
function Z(t, e, r) {
    if (t = g(t), arguments.length === 2 && I(arguments[1]) === "object") {
        let n = arguments[1];
        for(let a in n)Z(t, a, n[a]);
    } else {
        typeof r == "function" && (r = r(x1(t, e)));
        let { space: n1 , index: a1  } = c.resolveCoord(e, t.space), s = ee(t, n1);
        s[a1] = r, $t(t, n1, s);
    }
    return t;
}
var Ze = new c({
    id: "xyz-d50",
    name: "XYZ D50",
    white: "D50",
    base: z,
    fromBase: (t)=>be(z.white, "D50", t),
    toBase: (t)=>be("D50", z.white, t),
    formats: {
        color: {}
    }
}), l0 = 216 / 24389, Ke = 24 / 116, oe = 24389 / 27, Ee = B.D50, C = new c({
    id: "lab",
    name: "Lab",
    coords: {
        l: {
            refRange: [
                0,
                100
            ],
            name: "L"
        },
        a: {
            refRange: [
                -125,
                125
            ]
        },
        b: {
            refRange: [
                -125,
                125
            ]
        }
    },
    white: Ee,
    base: Ze,
    fromBase (t) {
        let r = t.map((n, a)=>n / Ee[a]).map((n)=>n > l0 ? Math.cbrt(n) : (oe * n + 16) / 116);
        return [
            116 * r[1] - 16,
            500 * (r[0] - r[1]),
            200 * (r[1] - r[2])
        ];
    },
    toBase (t) {
        let e = [];
        return e[1] = (t[0] + 16) / 116, e[0] = t[1] / 500 + e[1], e[2] = e[1] - t[2] / 200, [
            e[0] > Ke ? Math.pow(e[0], 3) : (116 * e[0] - 16) / oe,
            t[0] > 8 ? Math.pow((t[0] + 16) / 116, 3) : t[0] / oe,
            e[2] > Ke ? Math.pow(e[2], 3) : (116 * e[2] - 16) / oe
        ].map((n, a)=>n * Ee[a]);
    },
    formats: {
        lab: {
            coords: [
                "<percentage> | <number>",
                "<number>",
                "<number>"
            ]
        }
    }
});
function _e(t) {
    return (t % 360 + 360) % 360;
}
function u0(t, e) {
    if (t === "raw") return e;
    let [r, n] = e.map(_e), a = n - r;
    return t === "increasing" ? a < 0 && (n += 360) : t === "decreasing" ? a > 0 && (r += 360) : t === "longer" ? -180 < a && a < 180 && (a > 0 ? n += 360 : r += 360) : t === "shorter" && (a > 180 ? r += 360 : a < -180 && (n += 360)), [
        r,
        n
    ];
}
var W = new c({
    id: "lch",
    name: "LCH",
    coords: {
        l: {
            refRange: [
                0,
                100
            ],
            name: "Lightness"
        },
        c: {
            refRange: [
                0,
                150
            ],
            name: "Chroma"
        },
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        }
    },
    base: C,
    fromBase (t) {
        let [e, r, n] = t, a, s = .02;
        return Math.abs(r) < s && Math.abs(n) < s ? a = NaN : a = Math.atan2(n, r) * 180 / Math.PI, [
            e,
            Math.sqrt(r ** 2 + n ** 2),
            _e(a)
        ];
    },
    toBase (t) {
        let [e, r, n] = t;
        return r < 0 && (r = 0), isNaN(n) && (n = 0), [
            e,
            r * Math.cos(n * Math.PI / 180),
            r * Math.sin(n * Math.PI / 180)
        ];
    },
    formats: {
        lch: {
            coords: [
                "<percentage> | <number>",
                "<number>",
                "<number> | <angle>"
            ]
        }
    }
}), Qe = 25 ** 7, Me = Math.PI, Ue = 180 / Me, O = Me / 180;
function ke(t, e, { kL: r = 1 , kC: n = 1 , kH: a = 1  } = {}) {
    let [s, i1, o] = C.from(t), l = W.from(C, [
        s,
        i1,
        o
    ])[1], [u, h, f] = C.from(e), d1 = W.from(C, [
        u,
        h,
        f
    ])[1];
    l < 0 && (l = 0), d1 < 0 && (d1 = 0);
    let p1 = ((l + d1) / 2) ** 7, y = .5 * (1 - Math.sqrt(p1 / (p1 + Qe))), L = (1 + y) * i1, A1 = (1 + y) * h, Y = Math.sqrt(L ** 2 + o ** 2), N = Math.sqrt(A1 ** 2 + f ** 2), $ = L === 0 && o === 0 ? 0 : Math.atan2(o, L), k = A1 === 0 && f === 0 ? 0 : Math.atan2(f, A1);
    $ < 0 && ($ += 2 * Me), k < 0 && (k += 2 * Me), $ *= Ue, k *= Ue;
    let re = u - s, ne = N - Y, R = k - $, G = $ + k, je = Math.abs(R), q;
    Y * N === 0 ? q = 0 : je <= 180 ? q = R : R > 180 ? q = R - 360 : R < -180 ? q = R + 360 : console.log("the unthinkable has happened");
    let Ge = 2 * Math.sqrt(N * Y) * Math.sin(q * O / 2), Vt = (s + u) / 2, ze = (Y + N) / 2, qe = Math.pow(ze, 7), P;
    Y * N === 0 ? P = G : je <= 180 ? P = G / 2 : G < 360 ? P = (G + 360) / 2 : P = (G - 360) / 2;
    let He = (Vt - 50) ** 2, e0 = 1 + .015 * He / Math.sqrt(20 + He), Fe = 1 + .045 * ze, H = 1;
    H -= .17 * Math.cos((P - 30) * O), H += .24 * Math.cos(2 * P * O), H += .32 * Math.cos((3 * P + 6) * O), H -= .2 * Math.cos((4 * P - 63) * O);
    let Je = 1 + .015 * ze * H, t0 = 30 * Math.exp(-1 * ((P - 275) / 25) ** 2), r0 = 2 * Math.sqrt(qe / (qe + Qe)), n0 = -1 * Math.sin(2 * t0 * O) * r0, ae = (re / (r * e0)) ** 2;
    return ae += (ne / (n * Fe)) ** 2, ae += (Ge / (a * Je)) ** 2, ae += n0 * (ne / (n * Fe)) * (Ge / (a * Je)), Math.sqrt(ae);
}
var f0 = 75e-6;
function J(t, e = t.space, { epsilon: r = f0  } = {}) {
    t = g(t), e = c.get(e);
    let n = t.coords;
    return e !== t.space && (n = e.from(t)), e.inGamut(n, {
        epsilon: r
    });
}
function K(t) {
    return {
        space: t.space,
        coords: t.coords.slice(),
        alpha: t.alpha
    };
}
function v(t, { method: e = E.gamut_mapping , space: r = t.space  } = {}) {
    if (V(arguments[1]) && (r = arguments[1]), r = c.get(r), J(t, r, {
        epsilon: 0
    })) return t;
    let n = _(t, r);
    if (e !== "clip" && !J(t, r)) {
        let a = v(K(n), {
            method: "clip",
            space: r
        });
        if (ke(t, a) > 2) {
            let s = c.resolveCoord(e), i1 = s.space, o = s.id, l = _(n, i1), h = (s.range || s.refRange)[0], f = .01, d1 = h, b = x1(l, o);
            for(; b - d1 > f;){
                let p1 = K(l);
                p1 = v(p1, {
                    space: r,
                    method: "clip"
                }), ke(l, p1) - 2 < f ? d1 = x1(l, o) : b = x1(l, o), Z(l, o, (d1 + b) / 2);
            }
            n = _(l, r);
        } else n = a;
    }
    if (e === "clip" || !J(n, r, {
        epsilon: 0
    })) {
        let a1 = Object.values(r.coords).map((s)=>s.range || []);
        n.coords = n.coords.map((s, i1)=>{
            let [o, l] = a1[i1];
            return o !== void 0 && (s = Math.max(o, s)), l !== void 0 && (s = Math.min(s, l)), s;
        });
    }
    return r !== t.space && (n = _(n, t.space)), t.coords = n.coords, t;
}
v.returns = "color";
function _(t, e, { inGamut: r  } = {}) {
    t = g(t), e = c.get(e);
    let n = e.from(t), a = {
        space: e,
        coords: n,
        alpha: t.alpha
    };
    return r && (a = v(a)), a;
}
_.returns = "color";
function we(t, { precision: e = E.precision , format: r = "default" , inGamut: n = !0 , ...a } = {}) {
    let s;
    t = g(t);
    let i1 = r;
    r = t.space.getFormat(r) ?? t.space.getFormat("default") ?? c.DEFAULT_FORMAT, n ||= r.toGamut;
    let o = t.coords;
    if (o = o.map((l)=>l || 0), n && !J(t) && (o = v(K(t), n === !0 ? void 0 : n).coords), r.type === "custom") if (a.precision = e, r.serialize) s = r.serialize(o, t.alpha, a);
    else throw new TypeError(`format ${i1} can only be used to parse colors, not for serialization`);
    else {
        let l = r.name || "color";
        r.serializeCoords ? o = r.serializeCoords(o, e) : e !== null && (o = o.map((d1)=>ge(d1, e)));
        let u = [
            ...o
        ];
        if (l === "color") {
            let d1 = r.id || r.ids?.[0] || t.space.id;
            u.unshift(d1);
        }
        let h = t.alpha;
        e !== null && (h = ge(h, e));
        let f = t.alpha < 1 ? ` ${r.commas ? "," : "/"} ${h}` : "";
        s = `${l}(${u.join(r.commas ? ", " : " ")}${f})`;
    }
    return s;
}
var c0 = [
    [
        .6369580483012914,
        .14461690358620832,
        .1688809751641721
    ],
    [
        .2627002120112671,
        .6779980715188708,
        .05930171646986196
    ],
    [
        0,
        .028072693049087428,
        1.060985057710791
    ]
], h0 = [
    [
        1.716651187971268,
        -.355670783776392,
        -.25336628137366
    ],
    [
        -.666684351832489,
        1.616481236634939,
        .0157685458139111
    ],
    [
        .017639857445311,
        -.042770613257809,
        .942103121235474
    ]
], Le = new w({
    id: "rec2020-linear",
    name: "Linear REC.2020",
    white: "D65",
    toXYZ_M: c0,
    fromXYZ_M: h0
}), le = 1.09929682680944, Ve = .018053968510807, Pt = new w({
    id: "rec2020",
    name: "REC.2020",
    base: Le,
    toBase (t) {
        return t.map(function(e) {
            return e < Ve * 4.5 ? e / 4.5 : Math.pow((e + le - 1) / le, 1 / .45);
        });
    },
    fromBase (t) {
        return t.map(function(e) {
            return e >= Ve ? le * Math.pow(e, .45) - (le - 1) : 4.5 * e;
        });
    },
    formats: {
        color: {}
    }
}), d0 = [
    [
        .4865709486482162,
        .26566769316909306,
        .1982172852343625
    ],
    [
        .2289745640697488,
        .6917385218365064,
        .079286914093745
    ],
    [
        0,
        .04511338185890264,
        1.043944368900976
    ]
], m0 = [
    [
        2.493496911941425,
        -.9313836179191239,
        -.40271078445071684
    ],
    [
        -.8294889695615747,
        1.7626640603183463,
        .023624685841943577
    ],
    [
        .03584583024378447,
        -.07617238926804182,
        .9568845240076872
    ]
], At = new w({
    id: "p3-linear",
    name: "Linear P3",
    white: "D65",
    toXYZ_M: d0,
    fromXYZ_M: m0
}), g0 = [
    [
        .41239079926595934,
        .357584339383878,
        .1804807884018343
    ],
    [
        .21263900587151027,
        .715168678767756,
        .07219231536073371
    ],
    [
        .01933081871559182,
        .11919477979462598,
        .9505321522496607
    ]
], p0 = [
    [
        3.2409699419045226,
        -1.537383177570094,
        -.4986107602930034
    ],
    [
        -.9692436362808796,
        1.8759675015077202,
        .04155505740717559
    ],
    [
        .05563007969699366,
        -.20397695888897652,
        1.0569715142428786
    ]
], Yt = new w({
    id: "srgb-linear",
    name: "Linear sRGB",
    white: "D65",
    toXYZ_M: g0,
    fromXYZ_M: p0,
    formats: {
        color: {}
    }
}), et = {
    aliceblue: [
        240 / 255,
        248 / 255,
        1
    ],
    antiquewhite: [
        250 / 255,
        235 / 255,
        215 / 255
    ],
    aqua: [
        0,
        1,
        1
    ],
    aquamarine: [
        127 / 255,
        1,
        212 / 255
    ],
    azure: [
        240 / 255,
        1,
        1
    ],
    beige: [
        245 / 255,
        245 / 255,
        220 / 255
    ],
    bisque: [
        1,
        228 / 255,
        196 / 255
    ],
    black: [
        0,
        0,
        0
    ],
    blanchedalmond: [
        1,
        235 / 255,
        205 / 255
    ],
    blue: [
        0,
        0,
        1
    ],
    blueviolet: [
        138 / 255,
        43 / 255,
        226 / 255
    ],
    brown: [
        165 / 255,
        42 / 255,
        42 / 255
    ],
    burlywood: [
        222 / 255,
        184 / 255,
        135 / 255
    ],
    cadetblue: [
        95 / 255,
        158 / 255,
        160 / 255
    ],
    chartreuse: [
        127 / 255,
        1,
        0
    ],
    chocolate: [
        210 / 255,
        105 / 255,
        30 / 255
    ],
    coral: [
        1,
        127 / 255,
        80 / 255
    ],
    cornflowerblue: [
        100 / 255,
        149 / 255,
        237 / 255
    ],
    cornsilk: [
        1,
        248 / 255,
        220 / 255
    ],
    crimson: [
        220 / 255,
        20 / 255,
        60 / 255
    ],
    cyan: [
        0,
        1,
        1
    ],
    darkblue: [
        0,
        0,
        139 / 255
    ],
    darkcyan: [
        0,
        139 / 255,
        139 / 255
    ],
    darkgoldenrod: [
        184 / 255,
        134 / 255,
        11 / 255
    ],
    darkgray: [
        169 / 255,
        169 / 255,
        169 / 255
    ],
    darkgreen: [
        0,
        100 / 255,
        0
    ],
    darkgrey: [
        169 / 255,
        169 / 255,
        169 / 255
    ],
    darkkhaki: [
        189 / 255,
        183 / 255,
        107 / 255
    ],
    darkmagenta: [
        139 / 255,
        0,
        139 / 255
    ],
    darkolivegreen: [
        85 / 255,
        107 / 255,
        47 / 255
    ],
    darkorange: [
        1,
        140 / 255,
        0
    ],
    darkorchid: [
        153 / 255,
        50 / 255,
        204 / 255
    ],
    darkred: [
        139 / 255,
        0,
        0
    ],
    darksalmon: [
        233 / 255,
        150 / 255,
        122 / 255
    ],
    darkseagreen: [
        143 / 255,
        188 / 255,
        143 / 255
    ],
    darkslateblue: [
        72 / 255,
        61 / 255,
        139 / 255
    ],
    darkslategray: [
        47 / 255,
        79 / 255,
        79 / 255
    ],
    darkslategrey: [
        47 / 255,
        79 / 255,
        79 / 255
    ],
    darkturquoise: [
        0,
        206 / 255,
        209 / 255
    ],
    darkviolet: [
        148 / 255,
        0,
        211 / 255
    ],
    deeppink: [
        1,
        20 / 255,
        147 / 255
    ],
    deepskyblue: [
        0,
        191 / 255,
        1
    ],
    dimgray: [
        105 / 255,
        105 / 255,
        105 / 255
    ],
    dimgrey: [
        105 / 255,
        105 / 255,
        105 / 255
    ],
    dodgerblue: [
        30 / 255,
        144 / 255,
        1
    ],
    firebrick: [
        178 / 255,
        34 / 255,
        34 / 255
    ],
    floralwhite: [
        1,
        250 / 255,
        240 / 255
    ],
    forestgreen: [
        34 / 255,
        139 / 255,
        34 / 255
    ],
    fuchsia: [
        1,
        0,
        1
    ],
    gainsboro: [
        220 / 255,
        220 / 255,
        220 / 255
    ],
    ghostwhite: [
        248 / 255,
        248 / 255,
        1
    ],
    gold: [
        1,
        215 / 255,
        0
    ],
    goldenrod: [
        218 / 255,
        165 / 255,
        32 / 255
    ],
    gray: [
        128 / 255,
        128 / 255,
        128 / 255
    ],
    green: [
        0,
        128 / 255,
        0
    ],
    greenyellow: [
        173 / 255,
        1,
        47 / 255
    ],
    grey: [
        128 / 255,
        128 / 255,
        128 / 255
    ],
    honeydew: [
        240 / 255,
        1,
        240 / 255
    ],
    hotpink: [
        1,
        105 / 255,
        180 / 255
    ],
    indianred: [
        205 / 255,
        92 / 255,
        92 / 255
    ],
    indigo: [
        75 / 255,
        0,
        130 / 255
    ],
    ivory: [
        1,
        1,
        240 / 255
    ],
    khaki: [
        240 / 255,
        230 / 255,
        140 / 255
    ],
    lavender: [
        230 / 255,
        230 / 255,
        250 / 255
    ],
    lavenderblush: [
        1,
        240 / 255,
        245 / 255
    ],
    lawngreen: [
        124 / 255,
        252 / 255,
        0
    ],
    lemonchiffon: [
        1,
        250 / 255,
        205 / 255
    ],
    lightblue: [
        173 / 255,
        216 / 255,
        230 / 255
    ],
    lightcoral: [
        240 / 255,
        128 / 255,
        128 / 255
    ],
    lightcyan: [
        224 / 255,
        1,
        1
    ],
    lightgoldenrodyellow: [
        250 / 255,
        250 / 255,
        210 / 255
    ],
    lightgray: [
        211 / 255,
        211 / 255,
        211 / 255
    ],
    lightgreen: [
        144 / 255,
        238 / 255,
        144 / 255
    ],
    lightgrey: [
        211 / 255,
        211 / 255,
        211 / 255
    ],
    lightpink: [
        1,
        182 / 255,
        193 / 255
    ],
    lightsalmon: [
        1,
        160 / 255,
        122 / 255
    ],
    lightseagreen: [
        32 / 255,
        178 / 255,
        170 / 255
    ],
    lightskyblue: [
        135 / 255,
        206 / 255,
        250 / 255
    ],
    lightslategray: [
        119 / 255,
        136 / 255,
        153 / 255
    ],
    lightslategrey: [
        119 / 255,
        136 / 255,
        153 / 255
    ],
    lightsteelblue: [
        176 / 255,
        196 / 255,
        222 / 255
    ],
    lightyellow: [
        1,
        1,
        224 / 255
    ],
    lime: [
        0,
        1,
        0
    ],
    limegreen: [
        50 / 255,
        205 / 255,
        50 / 255
    ],
    linen: [
        250 / 255,
        240 / 255,
        230 / 255
    ],
    magenta: [
        1,
        0,
        1
    ],
    maroon: [
        128 / 255,
        0,
        0
    ],
    mediumaquamarine: [
        102 / 255,
        205 / 255,
        170 / 255
    ],
    mediumblue: [
        0,
        0,
        205 / 255
    ],
    mediumorchid: [
        186 / 255,
        85 / 255,
        211 / 255
    ],
    mediumpurple: [
        147 / 255,
        112 / 255,
        219 / 255
    ],
    mediumseagreen: [
        60 / 255,
        179 / 255,
        113 / 255
    ],
    mediumslateblue: [
        123 / 255,
        104 / 255,
        238 / 255
    ],
    mediumspringgreen: [
        0,
        250 / 255,
        154 / 255
    ],
    mediumturquoise: [
        72 / 255,
        209 / 255,
        204 / 255
    ],
    mediumvioletred: [
        199 / 255,
        21 / 255,
        133 / 255
    ],
    midnightblue: [
        25 / 255,
        25 / 255,
        112 / 255
    ],
    mintcream: [
        245 / 255,
        1,
        250 / 255
    ],
    mistyrose: [
        1,
        228 / 255,
        225 / 255
    ],
    moccasin: [
        1,
        228 / 255,
        181 / 255
    ],
    navajowhite: [
        1,
        222 / 255,
        173 / 255
    ],
    navy: [
        0,
        0,
        128 / 255
    ],
    oldlace: [
        253 / 255,
        245 / 255,
        230 / 255
    ],
    olive: [
        128 / 255,
        128 / 255,
        0
    ],
    olivedrab: [
        107 / 255,
        142 / 255,
        35 / 255
    ],
    orange: [
        1,
        165 / 255,
        0
    ],
    orangered: [
        1,
        69 / 255,
        0
    ],
    orchid: [
        218 / 255,
        112 / 255,
        214 / 255
    ],
    palegoldenrod: [
        238 / 255,
        232 / 255,
        170 / 255
    ],
    palegreen: [
        152 / 255,
        251 / 255,
        152 / 255
    ],
    paleturquoise: [
        175 / 255,
        238 / 255,
        238 / 255
    ],
    palevioletred: [
        219 / 255,
        112 / 255,
        147 / 255
    ],
    papayawhip: [
        1,
        239 / 255,
        213 / 255
    ],
    peachpuff: [
        1,
        218 / 255,
        185 / 255
    ],
    peru: [
        205 / 255,
        133 / 255,
        63 / 255
    ],
    pink: [
        1,
        192 / 255,
        203 / 255
    ],
    plum: [
        221 / 255,
        160 / 255,
        221 / 255
    ],
    powderblue: [
        176 / 255,
        224 / 255,
        230 / 255
    ],
    purple: [
        128 / 255,
        0,
        128 / 255
    ],
    rebeccapurple: [
        102 / 255,
        51 / 255,
        153 / 255
    ],
    red: [
        1,
        0,
        0
    ],
    rosybrown: [
        188 / 255,
        143 / 255,
        143 / 255
    ],
    royalblue: [
        65 / 255,
        105 / 255,
        225 / 255
    ],
    saddlebrown: [
        139 / 255,
        69 / 255,
        19 / 255
    ],
    salmon: [
        250 / 255,
        128 / 255,
        114 / 255
    ],
    sandybrown: [
        244 / 255,
        164 / 255,
        96 / 255
    ],
    seagreen: [
        46 / 255,
        139 / 255,
        87 / 255
    ],
    seashell: [
        1,
        245 / 255,
        238 / 255
    ],
    sienna: [
        160 / 255,
        82 / 255,
        45 / 255
    ],
    silver: [
        192 / 255,
        192 / 255,
        192 / 255
    ],
    skyblue: [
        135 / 255,
        206 / 255,
        235 / 255
    ],
    slateblue: [
        106 / 255,
        90 / 255,
        205 / 255
    ],
    slategray: [
        112 / 255,
        128 / 255,
        144 / 255
    ],
    slategrey: [
        112 / 255,
        128 / 255,
        144 / 255
    ],
    snow: [
        1,
        250 / 255,
        250 / 255
    ],
    springgreen: [
        0,
        1,
        127 / 255
    ],
    steelblue: [
        70 / 255,
        130 / 255,
        180 / 255
    ],
    tan: [
        210 / 255,
        180 / 255,
        140 / 255
    ],
    teal: [
        0,
        128 / 255,
        128 / 255
    ],
    thistle: [
        216 / 255,
        191 / 255,
        216 / 255
    ],
    tomato: [
        1,
        99 / 255,
        71 / 255
    ],
    turquoise: [
        64 / 255,
        224 / 255,
        208 / 255
    ],
    violet: [
        238 / 255,
        130 / 255,
        238 / 255
    ],
    wheat: [
        245 / 255,
        222 / 255,
        179 / 255
    ],
    white: [
        1,
        1,
        1
    ],
    whitesmoke: [
        245 / 255,
        245 / 255,
        245 / 255
    ],
    yellow: [
        1,
        1,
        0
    ],
    yellowgreen: [
        154 / 255,
        205 / 255,
        50 / 255
    ]
}, tt = Array(3).fill("<percentage> | <number>[0, 255]"), Q = new w({
    id: "srgb",
    name: "sRGB",
    base: Yt,
    fromBase: (t)=>t.map((e)=>{
            let r = e < 0 ? -1 : 1, n = e * r;
            return n > .0031308 ? r * (1.055 * n ** (1 / 2.4) - .055) : 12.92 * e;
        }),
    toBase: (t)=>t.map((e)=>{
            let r = e < 0 ? -1 : 1, n = e * r;
            return n < .04045 ? e / 12.92 : r * ((n + .055) / 1.055) ** 2.4;
        }),
    formats: {
        rgb: {
            coords: tt
        },
        color: {},
        rgba: {
            coords: tt,
            commas: !0,
            lastAlpha: !0
        },
        hex: {
            type: "custom",
            toGamut: !0,
            test: (t)=>/^#([a-f0-9]{3,4}){1,2}$/i.test(t),
            parse (t) {
                t.length <= 5 && (t = t.replace(/[a-f0-9]/gi, "$&$&"));
                let e = [];
                return t.replace(/[a-f0-9]{2}/gi, (r)=>{
                    e.push(parseInt(r, 16) / 255);
                }), {
                    spaceId: "srgb",
                    coords: e.slice(0, 3),
                    alpha: e.slice(3)[0]
                };
            },
            serialize: (t, e, { collapse: r = !0  } = {})=>{
                e < 1 && t.push(e), t = t.map((s)=>Math.round(s * 255));
                let n = r && t.every((s)=>s % 17 === 0);
                return "#" + t.map((s)=>n ? (s / 17).toString(16) : s.toString(16).padStart(2, "0")).join("");
            }
        },
        keyword: {
            type: "custom",
            test: (t)=>/^[a-z]+$/i.test(t),
            parse (t) {
                t = t.toLowerCase();
                let e = {
                    spaceId: "srgb",
                    coords: null,
                    alpha: 1
                };
                if (t === "transparent" ? (e.coords = et.black, e.alpha = 0) : e.coords = et[t], e.coords) return e;
            }
        }
    }
}), Nt = new w({
    id: "p3",
    name: "P3",
    base: At,
    fromBase: Q.fromBase,
    toBase: Q.toBase,
    formats: {
        color: {
            id: "display-p3"
        }
    }
});
E.display_space = Q;
if (typeof CSS < "u" && CSS.supports) for (let t of [
    C,
    Pt,
    Nt
]){
    let e = t.getMinCoords(), n = we({
        space: t,
        coords: e,
        alpha: 1
    });
    if (CSS.supports("color", n)) {
        E.display_space = t;
        break;
    }
}
function b0(t, { space: e = E.display_space , ...r } = {}) {
    let n = we(t, r);
    if (typeof CSS > "u" || CSS.supports("color", n) || !E.display_space) n = new String(n), n.color = t;
    else {
        let a = _(t, e);
        n = new String(we(a, r)), n.color = a;
    }
    return n;
}
function kt(t, e, r = "lab") {
    r = c.get(r);
    let n = r.from(t), a = r.from(e);
    return Math.sqrt(n.reduce((s, i1, o)=>{
        let l = a[o];
        return isNaN(i1) || isNaN(l) ? s : s + (l - i1) ** 2;
    }, 0));
}
function M0(t, e) {
    return t = g(t), e = g(e), t.space === e.space && t.alpha === e.alpha && t.coords.every((r, n)=>r === e.coords[n]);
}
function T1(t) {
    return x1(t, [
        z,
        "y"
    ]);
}
function It(t) {
    set(t, [
        z,
        "y"
    ], value);
}
function w0(t) {
    Object.defineProperty(t.prototype, "luminance", {
        get () {
            return T1(this);
        },
        set (e) {
            It(this);
        }
    });
}
var y0 = Object.freeze({
    __proto__: null,
    getLuminance: T1,
    setLuminance: It,
    register: w0
});
function C0(t, e) {
    t = g(t), e = g(e);
    let r = Math.max(T1(t), 0), n = Math.max(T1(e), 0);
    return n > r && ([r, n] = [
        n,
        r
    ]), (r + .05) / (n + .05);
}
var _0 = .56, L0 = .57, S0 = .62, z0 = .65, rt = .022, R0 = 1.414, B0 = .1, x0 = 5e-4, E0 = 1.14, nt = .027, $0 = 1.14;
function at(t) {
    return t >= rt ? t : t + (rt - t) ** R0;
}
function D1(t) {
    let e = t < 0 ? -1 : 1, r = Math.abs(t);
    return e * Math.pow(r, 2.4);
}
function P0(t, e) {
    e = g(e), t = g(t);
    let r, n, a, s, i1, o;
    e = _(e, "srgb"), [s, i1, o] = e.coords;
    let l = D1(s) * .2126729 + D1(i1) * .7151522 + D1(o) * .072175;
    t = _(t, "srgb"), [s, i1, o] = t.coords;
    let u = D1(s) * .2126729 + D1(i1) * .7151522 + D1(o) * .072175, h = at(l), f = at(u), d1 = f > h;
    return Math.abs(f - h) < x0 ? n = 0 : d1 ? (r = f ** _0 - h ** L0, n = r * E0) : (r = f ** z0 - h ** S0, n = r * $0), Math.abs(n) < B0 ? a = 0 : n > 0 ? a = n - nt : a = n + nt, a * 100;
}
function A0(t, e) {
    t = g(t), e = g(e);
    let r = Math.max(T1(t), 0), n = Math.max(T1(e), 0);
    n > r && ([r, n] = [
        n,
        r
    ]);
    let a = r + n;
    return a === 0 ? 0 : (r - n) / a;
}
function Y0(t, e) {
    t = g(t), e = g(e);
    let r = Math.max(T1(t), 0), n = Math.max(T1(e), 0);
    return n > r && ([r, n] = [
        n,
        r
    ]), n === 0 ? 0 : (r - n) / n;
}
function N0(t, e) {
    t = g(t), e = g(e);
    let r = x1(t, [
        C,
        "l"
    ]), n = x1(e, [
        C,
        "l"
    ]);
    return Math.abs(r - n);
}
var me = Object.freeze({
    __proto__: null,
    contrastWCAG21: C0,
    contrastAPCA: P0,
    contrastMichelson: A0,
    contrastWeber: Y0,
    contrastLstar: N0
});
function k0(t, e, r = {}) {
    V(r) && (r = {
        algorithm: r
    });
    let { algorithm: n , ...a } = r;
    if (!n) {
        let s = Object.keys(me).map((i1)=>i1.replace(/^contrast/, "")).join(", ");
        throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${s}`);
    }
    t = g(t), e = g(e);
    for(let s1 in me)if ("contrast" + n.toLowerCase() === s1.toLowerCase()) return me[s1](t, e, a);
    throw new TypeError(`Unknown contrast algorithm: ${n}`);
}
function Xt(t) {
    let [e, r, n] = ee(t, z), a = e + 15 * r + 3 * n;
    return [
        4 * e / a,
        9 * r / a
    ];
}
function vt(t) {
    let [e, r, n] = ee(t, z), a = e + r + n;
    return [
        e / a,
        r / a
    ];
}
function I0(t) {
    Object.defineProperty(t.prototype, "uv", {
        get () {
            return Xt(this);
        }
    }), Object.defineProperty(t.prototype, "xy", {
        get () {
            return vt(this);
        }
    });
}
var X0 = Object.freeze({
    __proto__: null,
    uv: Xt,
    xy: vt,
    register: I0
});
function v0(t, e) {
    return kt(t, e, "lab");
}
var T0 = Math.PI, st = T0 / 180;
function Z0(t, e, { l: r = 2 , c: n = 1  } = {}) {
    let [a, s, i1] = C.from(t), [, o, l] = W.from(C, [
        a,
        s,
        i1
    ]), [u, h, f] = C.from(e), d1 = W.from(C, [
        u,
        h,
        f
    ])[1];
    o < 0 && (o = 0), d1 < 0 && (d1 = 0);
    let b = a - u, p1 = o - d1, y = s - h, L = i1 - f, A1 = y ** 2 + L ** 2 - p1 ** 2, Y = .511;
    a >= 16 && (Y = .040975 * a / (1 + .01765 * a));
    let N = .0638 * o / (1 + .0131 * o) + .638, $;
    Number.isNaN(l) && (l = 0), l >= 164 && l <= 345 ? $ = .56 + Math.abs(.2 * Math.cos((l + 168) * st)) : $ = .36 + Math.abs(.4 * Math.cos((l + 35) * st));
    let k = Math.pow(o, 4), re = Math.sqrt(k / (k + 1900)), ne = N * (re * $ + 1 - re), R = (b / (r * Y)) ** 2;
    return R += (p1 / (n * N)) ** 2, R += A1 / ne ** 2, Math.sqrt(R);
}
var it = 203, Oe = new c({
    id: "xyz-abs-d65",
    name: "Absolute XYZ D65",
    coords: {
        x: {
            refRange: [
                0,
                9504.7
            ],
            name: "Xa"
        },
        y: {
            refRange: [
                0,
                1e4
            ],
            name: "Ya"
        },
        z: {
            refRange: [
                0,
                10888.3
            ],
            name: "Za"
        }
    },
    base: z,
    fromBase (t) {
        return t.map((e)=>Math.max(e * it, 0));
    },
    toBase (t) {
        return t.map((e)=>Math.max(e / it, 0));
    }
}), ue = 1.15, fe = .66, ot = 2610 / 2 ** 14, O0 = 2 ** 14 / 2610, lt = 3424 / 2 ** 12, ut = 2413 / 2 ** 7, ft = 2392 / 2 ** 7, D0 = 1.7 * 2523 / 2 ** 5, ct = 2 ** 5 / (1.7 * 2523), ce = -.56, $e = 16295499532821565e-27, j0 = [
    [
        .41478972,
        .579999,
        .014648
    ],
    [
        -.20151,
        1.120649,
        .0531008
    ],
    [
        -.0166008,
        .2648,
        .6684799
    ]
], G0 = [
    [
        1.9242264357876067,
        -1.0047923125953657,
        .037651404030618
    ],
    [
        .35031676209499907,
        .7264811939316552,
        -.06538442294808501
    ],
    [
        -.09098281098284752,
        -.3127282905230739,
        1.5227665613052603
    ]
], q0 = [
    [
        .5,
        .5,
        0
    ],
    [
        3.524,
        -4.066708,
        .542708
    ],
    [
        .199076,
        1.096799,
        -1.295875
    ]
], H0 = [
    [
        1,
        .1386050432715393,
        .05804731615611886
    ],
    [
        .9999999999999999,
        -.1386050432715393,
        -.05804731615611886
    ],
    [
        .9999999999999998,
        -.09601924202631895,
        -.8118918960560388
    ]
], Tt = new c({
    id: "jzazbz",
    name: "Jzazbz",
    coords: {
        jz: {
            refRange: [
                0,
                1
            ],
            name: "Jz"
        },
        az: {
            refRange: [
                -.5,
                .5
            ]
        },
        bz: {
            refRange: [
                -.5,
                .5
            ]
        }
    },
    base: Oe,
    fromBase (t) {
        let [e, r, n] = t, a = ue * e - (ue - 1) * n, s = fe * r - (fe - 1) * e, o = M(j0, [
            a,
            s,
            n
        ]).map(function(d1) {
            let b = lt + ut * (d1 / 1e4) ** ot, p1 = 1 + ft * (d1 / 1e4) ** ot;
            return (b / p1) ** D0;
        }), [l, u, h] = M(q0, o);
        return [
            (1 + ce) * l / (1 + ce * l) - $e,
            u,
            h
        ];
    },
    toBase (t) {
        let [e, r, n] = t, a = (e + $e) / (1 + ce - ce * (e + $e)), i1 = M(H0, [
            a,
            r,
            n
        ]).map(function(d1) {
            let b = lt - d1 ** ct, p1 = ft * d1 ** ct - ut;
            return 1e4 * (b / p1) ** O0;
        }), [o, l, u] = M(G0, i1), h = (o + (ue - 1) * u) / ue, f = (l + (fe - 1) * h) / fe;
        return [
            h,
            f,
            u
        ];
    },
    formats: {
        color: {}
    }
}), Ie = new c({
    id: "jzczhz",
    name: "JzCzHz",
    coords: {
        jz: {
            refRange: [
                0,
                1
            ],
            name: "Jz"
        },
        cz: {
            refRange: [
                0,
                1
            ],
            name: "Chroma"
        },
        hz: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        }
    },
    base: Tt,
    fromBase (t) {
        let [e, r, n] = t, a, s = 2e-4;
        return Math.abs(r) < s && Math.abs(n) < s ? a = NaN : a = Math.atan2(n, r) * 180 / Math.PI, [
            e,
            Math.sqrt(r ** 2 + n ** 2),
            _e(a)
        ];
    },
    toBase (t) {
        return [
            t[0],
            t[1] * Math.cos(t[2] * Math.PI / 180),
            t[1] * Math.sin(t[2] * Math.PI / 180)
        ];
    },
    formats: {
        color: {}
    }
});
function F0(t, e) {
    let [r, n, a] = Ie.from(t), [s, i1, o] = Ie.from(e), l = r - s, u = n - i1;
    Number.isNaN(a) && Number.isNaN(o) ? (a = 0, o = 0) : Number.isNaN(a) ? a = o : Number.isNaN(o) && (o = a);
    let h = a - o, f = 2 * Math.sqrt(n * i1) * Math.sin(h / 2 * (Math.PI / 180));
    return Math.sqrt(l ** 2 + u ** 2 + f ** 2);
}
var Zt = 3424 / 4096, Ot = 2413 / 128, Dt = 2392 / 128, ht = 2610 / 16384, J0 = 2523 / 32, W0 = 16384 / 2610, dt = 32 / 2523, K0 = [
    [
        .3592,
        .6976,
        -.0358
    ],
    [
        -.1922,
        1.1004,
        .0755
    ],
    [
        .007,
        .0749,
        .8434
    ]
], Q0 = [
    [
        2048 / 4096,
        2048 / 4096,
        0
    ],
    [
        6610 / 4096,
        -13613 / 4096,
        7003 / 4096
    ],
    [
        17933 / 4096,
        -17390 / 4096,
        -543 / 4096
    ]
], U0 = [
    [
        .9999888965628402,
        .008605050147287059,
        .11103437159861648
    ],
    [
        1.00001110343716,
        -.008605050147287059,
        -.11103437159861648
    ],
    [
        1.0000320633910054,
        .56004913547279,
        -.3206339100541203
    ]
], V0 = [
    [
        2.0701800566956137,
        -1.326456876103021,
        .20661600684785517
    ],
    [
        .3649882500326575,
        .6804673628522352,
        -.04542175307585323
    ],
    [
        -.04959554223893211,
        -.04942116118675749,
        1.1879959417328034
    ]
], Xe = new c({
    id: "ictcp",
    name: "ICTCP",
    coords: {
        i: {
            refRange: [
                0,
                1
            ],
            name: "I"
        },
        ct: {
            refRange: [
                -.5,
                .5
            ],
            name: "CT"
        },
        cp: {
            refRange: [
                -.5,
                .5
            ],
            name: "CP"
        }
    },
    base: Oe,
    fromBase (t) {
        let e = M(K0, t);
        return er(e);
    },
    toBase (t) {
        let e = tr(t);
        return M(V0, e);
    },
    formats: {
        color: {}
    }
});
function er(t) {
    let e = t.map(function(r) {
        let n = Zt + Ot * (r / 1e4) ** ht, a = 1 + Dt * (r / 1e4) ** ht;
        return (n / a) ** J0;
    });
    return M(Q0, e);
}
function tr(t) {
    return M(U0, t).map(function(n) {
        let a = Math.max(n ** dt - Zt, 0), s = Ot - Dt * n ** dt;
        return 1e4 * (a / s) ** W0;
    });
}
function rr(t, e) {
    let [r, n, a] = Xe.from(t), [s, i1, o] = Xe.from(e);
    return 720 * Math.sqrt((r - s) ** 2 + .25 * (n - i1) ** 2 + (a - o) ** 2);
}
var nr = [
    [
        .8190224432164319,
        .3619062562801221,
        -.12887378261216414
    ],
    [
        .0329836671980271,
        .9292868468965546,
        .03614466816999844
    ],
    [
        .048177199566046255,
        .26423952494422764,
        .6335478258136937
    ]
], ar = [
    [
        1.2268798733741557,
        -.5578149965554813,
        .28139105017721583
    ],
    [
        -.04057576262431372,
        1.1122868293970594,
        -.07171106666151701
    ],
    [
        -.07637294974672142,
        -.4214933239627914,
        1.5869240244272418
    ]
], sr = [
    [
        .2104542553,
        .793617785,
        -.0040720468
    ],
    [
        1.9779984951,
        -2.428592205,
        .4505937099
    ],
    [
        .0259040371,
        .7827717662,
        -.808675766
    ]
], ir = [
    [
        .9999999984505198,
        .39633779217376786,
        .2158037580607588
    ],
    [
        1.0000000088817609,
        -.10556134232365635,
        -.06385417477170591
    ],
    [
        1.0000000546724108,
        -.08948418209496575,
        -1.2914855378640917
    ]
], ye = new c({
    id: "oklab",
    name: "OKLab",
    coords: {
        l: {
            refRange: [
                0,
                1
            ],
            name: "L"
        },
        a: {
            refRange: [
                -.4,
                .4
            ]
        },
        b: {
            refRange: [
                -.4,
                .4
            ]
        }
    },
    white: "D65",
    base: z,
    fromBase (t) {
        let r = M(nr, t).map((n)=>Math.cbrt(n));
        return M(sr, r);
    },
    toBase (t) {
        let r = M(ir, t).map((n)=>n ** 3);
        return M(ar, r);
    },
    formats: {
        oklab: {
            coords: [
                "<percentage>",
                "<number>",
                "<number>"
            ]
        }
    }
});
function or(t, e) {
    let [r, n, a] = ye.from(t), [s, i1, o] = ye.from(e), l = r - s, u = n - i1, h = a - o;
    return Math.sqrt(l ** 2 + u ** 2 + h ** 2);
}
var ve = Object.freeze({
    __proto__: null,
    deltaE76: v0,
    deltaECMC: Z0,
    deltaE2000: ke,
    deltaEJz: F0,
    deltaEITP: rr,
    deltaEOK: or
});
function F(t, e, r = {}) {
    V(r) && (r = {
        method: r
    });
    let { method: n = E.deltaE , ...a } = r;
    t = g(t), e = g(e);
    for(let s in ve)if ("deltae" + n.toLowerCase() === s.toLowerCase()) return ve[s](t, e, a);
    throw new TypeError(`Unknown deltaE method: ${n}`);
}
var lr = Object.freeze({
    __proto__: null,
    default: F
});
function ur(t, e = .25) {
    let n = [
        c.get("oklch", "lch"),
        "l"
    ];
    return Z(t, n, (a)=>a * (1 + e));
}
function fr(t, e = .25) {
    let n = [
        c.get("oklch", "lch"),
        "l"
    ];
    return Z(t, n, (a)=>a * (1 - e));
}
var cr = Object.freeze({
    __proto__: null,
    lighten: ur,
    darken: fr
});
function jt(t, e, r = .5, n = {}) {
    [t, e] = [
        g(t),
        g(e)
    ], I(r) === "object" && ([r, n] = [
        .5,
        r
    ]);
    let { space: a , outputSpace: s  } = n;
    return te(t, e, {
        space: a,
        outputSpace: s
    })(r);
}
function Gt(t, e, r = {}) {
    let n;
    De(t) && ([n, r] = [
        t,
        e
    ], [t, e] = n.rangeArgs.colors);
    let { maxDeltaE: a , deltaEMethod: s , steps: i1 = 2 , maxSteps: o = 1e3 , ...l } = r;
    n || ([t, e] = [
        g(t),
        g(e)
    ], n = te(t, e, l));
    let u = F(t, e), h = a > 0 ? Math.max(i1, Math.ceil(u / a) + 1) : i1, f = [];
    if (o !== void 0 && (h = Math.min(h, o)), h === 1) f = [
        {
            p: .5,
            color: n(.5)
        }
    ];
    else {
        let d1 = 1 / (h - 1);
        f = Array.from({
            length: h
        }, (b, p1)=>{
            let y = p1 * d1;
            return {
                p: y,
                color: n(y)
            };
        });
    }
    if (a > 0) {
        let d11 = f.reduce((b, p1, y)=>{
            if (y === 0) return 0;
            let L = F(p1.color, f[y - 1].color, s);
            return Math.max(b, L);
        }, 0);
        for(; d11 > a;){
            d11 = 0;
            for(let b = 1; b < f.length && f.length < o; b++){
                let p1 = f[b - 1], y = f[b], L = (y.p + p1.p) / 2, A1 = n(L);
                d11 = Math.max(d11, F(A1, p1.color), F(A1, y.color)), f.splice(b, 0, {
                    p: L,
                    color: n(L)
                }), b++;
            }
        }
    }
    return f = f.map((d1)=>d1.color), f;
}
function te(t, e, r = {}) {
    if (De(t)) {
        let [l, u] = [
            t,
            e
        ];
        return te(...l.rangeArgs.colors, {
            ...l.rangeArgs.options,
            ...u
        });
    }
    let { space: n , outputSpace: a , progression: s , premultiplied: i1  } = r;
    t = g(t), e = g(e), t = K(t), e = K(e);
    let o = {
        colors: [
            t,
            e
        ],
        options: r
    };
    if (n ? n = c.get(n) : n = c.registry[E.interpolationSpace] || t.space, a = a ? c.get(a) : n, t = _(t, n), e = _(e, n), t = v(t), e = v(e), n.coords.h && n.coords.h.type === "angle") {
        let l1 = r.hue = r.hue || "shorter", u1 = [
            n,
            "h"
        ], [h, f] = [
            x1(t, u1),
            x1(e, u1)
        ];
        [h, f] = u0(l1, [
            h,
            f
        ]), Z(t, u1, h), Z(e, u1, f);
    }
    return i1 && (t.coords = t.coords.map((l)=>l * t.alpha), e.coords = e.coords.map((l)=>l * e.alpha)), Object.assign((l)=>{
        l = s ? s(l) : l;
        let u = t.coords.map((d1, b)=>{
            let p1 = e.coords[b];
            return pe(d1, p1, l);
        }), h = pe(t.alpha, e.alpha, l), f = {
            space: n,
            coords: u,
            alpha: h
        };
        return i1 && (f.coords = f.coords.map((d1)=>d1 / h)), a !== n && (f = _(f, a)), f;
    }, {
        rangeArgs: o
    });
}
function De(t) {
    return I(t) === "function" && !!t.rangeArgs;
}
E.interpolationSpace = "lab";
function hr(t) {
    t.defineFunction("mix", jt, {
        returns: "color"
    }), t.defineFunction("range", te, {
        returns: "function<color>"
    }), t.defineFunction("steps", Gt, {
        returns: "array<color>"
    });
}
var dr = Object.freeze({
    __proto__: null,
    mix: jt,
    steps: Gt,
    range: te,
    isRange: De,
    register: hr
}), qt = new c({
    id: "hsl",
    name: "HSL",
    coords: {
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        },
        s: {
            range: [
                0,
                100
            ],
            name: "Saturation"
        },
        l: {
            range: [
                0,
                100
            ],
            name: "Lightness"
        }
    },
    base: Q,
    fromBase: (t)=>{
        let e = Math.max(...t), r = Math.min(...t), [n, a, s] = t, [i1, o, l] = [
            NaN,
            0,
            (r + e) / 2
        ], u = e - r;
        if (u !== 0) {
            switch(o = l === 0 || l === 1 ? 0 : (e - l) / Math.min(l, 1 - l), e){
                case n:
                    i1 = (a - s) / u + (a < s ? 6 : 0);
                    break;
                case a:
                    i1 = (s - n) / u + 2;
                    break;
                case s:
                    i1 = (n - a) / u + 4;
            }
            i1 = i1 * 60;
        }
        return [
            i1,
            o * 100,
            l * 100
        ];
    },
    toBase: (t)=>{
        let [e, r, n] = t;
        e = e % 360, e < 0 && (e += 360), r /= 100, n /= 100;
        function a(s) {
            let i1 = (s + e / 30) % 12, o = r * Math.min(n, 1 - n);
            return n - o * Math.max(-1, Math.min(i1 - 3, 9 - i1, 1));
        }
        return [
            a(0),
            a(8),
            a(4)
        ];
    },
    formats: {
        hsl: {
            toGamut: !0,
            coords: [
                "<number> | <angle>",
                "<percentage>",
                "<percentage>"
            ]
        },
        hsla: {
            coords: [
                "<number> | <angle>",
                "<percentage>",
                "<percentage>"
            ],
            commas: !0,
            lastAlpha: !0
        }
    }
}), Ht = new c({
    id: "hsv",
    name: "HSV",
    coords: {
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        },
        s: {
            range: [
                0,
                100
            ],
            name: "Saturation"
        },
        v: {
            range: [
                0,
                100
            ],
            name: "Value"
        }
    },
    base: qt,
    fromBase (t) {
        let [e, r, n] = t;
        r /= 100, n /= 100;
        let a = n + r * Math.min(n, 1 - n);
        return [
            e,
            a === 0 ? 0 : 200 * (1 - n / a),
            100 * a
        ];
    },
    toBase (t) {
        let [e, r, n] = t;
        r /= 100, n /= 100;
        let a = n * (1 - r / 2);
        return [
            e,
            a === 0 || a === 1 ? 0 : (n - a) / Math.min(a, 1 - a) * 100,
            a * 100
        ];
    },
    formats: {
        color: {
            toGamut: !0
        }
    }
}), mr = new c({
    id: "hwb",
    name: "HWB",
    coords: {
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        },
        w: {
            range: [
                0,
                100
            ],
            name: "Whiteness"
        },
        b: {
            range: [
                0,
                100
            ],
            name: "Blackness"
        }
    },
    base: Ht,
    fromBase (t) {
        let [e, r, n] = t;
        return [
            e,
            n * (100 - r) / 100,
            100 - n
        ];
    },
    toBase (t) {
        let [e, r, n] = t;
        r /= 100, n /= 100;
        let a = r + n;
        if (a >= 1) {
            let o = r / a;
            return [
                e,
                0,
                o * 100
            ];
        }
        let s = 1 - n, i1 = s === 0 ? 0 : 1 - r / s;
        return [
            e,
            i1 * 100,
            s * 100
        ];
    },
    formats: {
        hwb: {
            toGamut: !0,
            coords: [
                "<number> | <angle>",
                "<percentage>",
                "<percentage>"
            ]
        }
    }
}), gr = [
    [
        .5766690429101305,
        .1855582379065463,
        .1882286462349947
    ],
    [
        .29734497525053605,
        .6273635662554661,
        .07529145849399788
    ],
    [
        .02703136138641234,
        .07068885253582723,
        .9913375368376388
    ]
], pr = [
    [
        2.0415879038107465,
        -.5650069742788596,
        -.34473135077832956
    ],
    [
        -.9692436362808795,
        1.8759675015077202,
        .04155505740717557
    ],
    [
        .013444280632031142,
        -.11836239223101838,
        1.0151749943912054
    ]
], Ft = new w({
    id: "a98rgb-linear",
    name: "Linear Adobe\xAE 98 RGB compatible",
    white: "D65",
    toXYZ_M: gr,
    fromXYZ_M: pr
}), br = new w({
    id: "a98rgb",
    name: "Adobe\xAE 98 RGB compatible",
    base: Ft,
    toBase: (t)=>t.map((e)=>Math.pow(Math.abs(e), 563 / 256) * Math.sign(e)),
    fromBase: (t)=>t.map((e)=>Math.pow(Math.abs(e), 256 / 563) * Math.sign(e)),
    formats: {
        color: {
            id: "a98-rgb"
        }
    }
}), Mr = [
    [
        .7977604896723027,
        .13518583717574031,
        .0313493495815248
    ],
    [
        .2880711282292934,
        .7118432178101014,
        8565396060525902e-20
    ],
    [
        0,
        0,
        .8251046025104601
    ]
], wr = [
    [
        1.3457989731028281,
        -.25558010007997534,
        -.05110628506753401
    ],
    [
        -.5446224939028347,
        1.5082327413132781,
        .02053603239147973
    ],
    [
        0,
        0,
        1.2119675456389454
    ]
], Jt = new w({
    id: "prophoto-linear",
    name: "Linear ProPhoto",
    white: "D50",
    base: Ze,
    toXYZ_M: Mr,
    fromXYZ_M: wr
}), yr = 1 / 512, Cr = 16 / 512, _r = new w({
    id: "prophoto",
    name: "ProPhoto",
    base: Jt,
    toBase (t) {
        return t.map((e)=>e < Cr ? e / 16 : e ** 1.8);
    },
    fromBase (t) {
        return t.map((e)=>e >= yr ? e ** (1 / 1.8) : 16 * e);
    },
    formats: {
        color: {
            id: "prophoto-rgb"
        }
    }
}), Lr = new c({
    id: "oklch",
    name: "OKLCh",
    coords: {
        l: {
            refRange: [
                0,
                1
            ],
            name: "Lightness"
        },
        c: {
            refRange: [
                0,
                .4
            ],
            name: "Chroma"
        },
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        }
    },
    white: "D65",
    base: ye,
    fromBase (t) {
        let [e, r, n] = t, a, s = 2e-4;
        return Math.abs(r) < s && Math.abs(n) < s ? a = NaN : a = Math.atan2(n, r) * 180 / Math.PI, [
            e,
            Math.sqrt(r ** 2 + n ** 2),
            _e(a)
        ];
    },
    toBase (t) {
        let [e, r, n] = t, a, s;
        return isNaN(n) ? (a = 0, s = 0) : (a = r * Math.cos(n * Math.PI / 180), s = r * Math.sin(n * Math.PI / 180)), [
            e,
            a,
            s
        ];
    },
    formats: {
        oklch: {
            coords: [
                "<percentage>",
                "<number>",
                "<number> | <angle>"
            ]
        }
    }
}), mt = 203, gt = 2610 / 2 ** 14, Sr = 2 ** 14 / 2610, zr = 2523 / 2 ** 5, pt = 2 ** 5 / 2523, bt = 3424 / 2 ** 12, Mt = 2413 / 2 ** 7, wt = 2392 / 2 ** 7, Rr = new w({
    id: "rec2100pq",
    name: "REC.2100-PQ",
    base: Le,
    toBase (t) {
        return t.map(function(e) {
            return (Math.max(e ** pt - bt, 0) / (Mt - wt * e ** pt)) ** Sr * 1e4 / mt;
        });
    },
    fromBase (t) {
        return t.map(function(e) {
            let r = Math.max(e * mt / 1e4, 0), n = bt + Mt * r ** gt, a = 1 + wt * r ** gt;
            return (n / a) ** zr;
        });
    },
    formats: {
        color: {
            id: "rec2100-pq"
        }
    }
}), yt = .17883277, Ct = .28466892, _t = .55991073, Br = new w({
    id: "rec2100hlg",
    cssid: "rec2100-hlg",
    name: "REC.2100-HLG",
    referred: "scene",
    base: Le,
    toBase (t) {
        return t.map(function(e) {
            return e <= 1 / 12 ? Math.sqrt(3 * e) : yt * Math.log(12 * e - Ct) + _t;
        });
    },
    fromBase (t) {
        return t.map(function(e) {
            return e <= .5 ? e ** 2 / 3 : Math.exp((e - _t) / yt + Ct) / 12;
        });
    },
    formats: {
        color: {
            id: "rec2100-hlg"
        }
    }
}), Wt = {};
X.add("chromatic-adaptation-start", (t)=>{
    t.options.method && (t.M = Kt(t.W1, t.W2, t.options.method));
});
X.add("chromatic-adaptation-end", (t)=>{
    t.M || (t.M = Kt(t.W1, t.W2, t.options.method));
});
function Se({ id: t , toCone_M: e , fromCone_M: r  }) {
    Wt[t] = arguments[0];
}
function Kt(t, e, r = "Bradford") {
    let n = Wt[r], [a, s, i1] = M(n.toCone_M, t), [o, l, u] = M(n.toCone_M, e), h = [
        [
            o / a,
            0,
            0
        ],
        [
            0,
            l / s,
            0
        ],
        [
            0,
            0,
            u / i1
        ]
    ], f = M(h, n.toCone_M);
    return M(n.fromCone_M, f);
}
Se({
    id: "von Kries",
    toCone_M: [
        [
            .40024,
            .7076,
            -.08081
        ],
        [
            -.2263,
            1.16532,
            .0457
        ],
        [
            0,
            0,
            .91822
        ]
    ],
    fromCone_M: [
        [
            1.8599364,
            -1.1293816,
            .2198974
        ],
        [
            .3611914,
            .6388125,
            -64e-7
        ],
        [
            0,
            0,
            1.0890636
        ]
    ]
});
Se({
    id: "Bradford",
    toCone_M: [
        [
            .8951,
            .2664,
            -.1614
        ],
        [
            -.7502,
            1.7135,
            .0367
        ],
        [
            .0389,
            -.0685,
            1.0296
        ]
    ],
    fromCone_M: [
        [
            .9869929,
            -.1470543,
            .1599627
        ],
        [
            .4323053,
            .5183603,
            .0492912
        ],
        [
            -.0085287,
            .0400428,
            .9684867
        ]
    ]
});
Se({
    id: "CAT02",
    toCone_M: [
        [
            .7328,
            .4296,
            -.1624
        ],
        [
            -.7036,
            1.6975,
            .0061
        ],
        [
            .003,
            .0136,
            .9834
        ]
    ],
    fromCone_M: [
        [
            1.0961238,
            -.278869,
            .1827452
        ],
        [
            .454369,
            .4735332,
            .0720978
        ],
        [
            -.0096276,
            -.005698,
            1.0153256
        ]
    ]
});
Se({
    id: "CAT16",
    toCone_M: [
        [
            .401288,
            .650173,
            -.051461
        ],
        [
            -.250268,
            1.204414,
            .045854
        ],
        [
            -.002079,
            .048952,
            .953127
        ]
    ],
    fromCone_M: [
        [
            1.862067855087233,
            -1.011254630531685,
            .1491867754444518
        ],
        [
            .3875265432361372,
            .6214474419314753,
            -.008973985167612518
        ],
        [
            -.01584149884933386,
            -.03412293802851557,
            1.04996443687785
        ]
    ]
});
Object.assign(B, {
    A: [
        1.0985,
        1,
        .35585
    ],
    C: [
        .98074,
        1,
        1.18232
    ],
    D55: [
        .95682,
        1,
        .92149
    ],
    D75: [
        .94972,
        1,
        1.22638
    ],
    E: [
        1,
        1,
        1
    ],
    F2: [
        .99186,
        1,
        .67393
    ],
    F7: [
        .95041,
        1,
        1.08747
    ],
    F11: [
        1.00962,
        1,
        .6435
    ]
});
B.ACES = [
    .32168 / .33767,
    1,
    (1 - .32168 - .33767) / .33767
];
var xr = [
    [
        .6624541811085053,
        .13400420645643313,
        .1561876870049078
    ],
    [
        .27222871678091454,
        .6740817658111484,
        .05368951740793705
    ],
    [
        -.005574649490394108,
        .004060733528982826,
        1.0103391003129971
    ]
], Er = [
    [
        1.6410233796943257,
        -.32480329418479,
        -.23642469523761225
    ],
    [
        -.6636628587229829,
        1.6153315916573379,
        .016756347685530137
    ],
    [
        .011721894328375376,
        -.008284441996237409,
        .9883948585390215
    ]
], Qt = new w({
    id: "acescg",
    name: "ACEScg",
    coords: {
        r: {
            range: [
                0,
                65504
            ],
            name: "Red"
        },
        g: {
            range: [
                0,
                65504
            ],
            name: "Green"
        },
        b: {
            range: [
                0,
                65504
            ],
            name: "Blue"
        }
    },
    referred: "scene",
    white: B.ACES,
    toXYZ_M: xr,
    fromXYZ_M: Er,
    formats: {
        color: {}
    }
}), he = 2 ** -16, Pe = -.35828683, de = (Math.log2(65504) + 9.72) / 17.52, $r = new w({
    id: "acescc",
    name: "ACEScc",
    coords: {
        r: {
            range: [
                Pe,
                de
            ],
            name: "Red"
        },
        g: {
            range: [
                Pe,
                de
            ],
            name: "Green"
        },
        b: {
            range: [
                Pe,
                de
            ],
            name: "Blue"
        }
    },
    referred: "scene",
    base: Qt,
    toBase (t) {
        let e = -.3013698630136986;
        return t.map(function(r) {
            return r <= e ? (2 ** (r * 17.52 - 9.72) - he) * 2 : r < de ? 2 ** (r * 17.52 - 9.72) : 65504;
        });
    },
    fromBase (t) {
        return t.map(function(e) {
            return e <= 0 ? (Math.log2(he) + 9.72) / 17.52 : e < he ? (Math.log2(he + e * .5) + 9.72) / 17.52 : (Math.log2(e) + 9.72) / 17.52;
        });
    },
    formats: {
        color: {}
    }
}), Lt = Object.freeze({
    __proto__: null,
    XYZ_D65: z,
    XYZ_D50: Ze,
    XYZ_ABS_D65: Oe,
    Lab: C,
    LCH: W,
    sRGB_Linear: Yt,
    sRGB: Q,
    HSL: qt,
    HWB: mr,
    HSV: Ht,
    P3_Linear: At,
    P3: Nt,
    A98RGB_Linear: Ft,
    A98RGB: br,
    ProPhoto_Linear: Jt,
    ProPhoto: _r,
    REC_2020_Linear: Le,
    REC_2020: Pt,
    OKLab: ye,
    OKLCH: Lr,
    Jzazbz: Tt,
    JzCzHz: Ie,
    ICTCP: Xe,
    REC_2100_PQ: Rr,
    REC_2100_HLG: Br,
    ACEScg: Qt,
    ACEScc: $r
}), m = class {
    constructor(...e){
        let r;
        e.length === 1 && (r = g(e[0]));
        let n, a, s;
        r ? (n = r.space || r.spaceId, a = r.coords, s = r.alpha) : [n, a, s] = e, this.#e = c.get(n), this.coords = a ? a.slice() : [
            0,
            0,
            0
        ], this.alpha = s < 1 ? s : 1;
        for(let i1 = 0; i1 < this.coords.length; i1++)this.coords[i1] === "NaN" && (this.coords[i1] = NaN);
        for(let i11 in this.#e.coords)Object.defineProperty(this, i11, {
            get: ()=>this.get(i11),
            set: (o)=>this.set(i11, o)
        });
    }
    #e;
    get space() {
        return this.#e;
    }
    get spaceId() {
        return this.#e.id;
    }
    clone() {
        return new m(this.space, this.coords, this.alpha);
    }
    toJSON() {
        return {
            spaceId: this.spaceId,
            coords: this.coords,
            alpha: this.alpha
        };
    }
    display(...e) {
        let r = b0(this, ...e);
        return r.color = new m(r.color), r;
    }
    static get(e, ...r) {
        return e instanceof m ? e : new m(e, ...r);
    }
    static defineFunction(e, r, n = r) {
        arguments.length === 1 && ([e, r, n] = [
            arguments[0].name,
            arguments[0],
            arguments[0]
        ]);
        let { instance: a = !0 , returns: s  } = n, i1 = function(...o) {
            let l = r(...o);
            if (s === "color") l = m.get(l);
            else if (s === "function<color>") {
                let u = l;
                l = function(...h) {
                    let f = u(...h);
                    return m.get(f);
                }, Object.assign(l, u);
            } else s === "array<color>" && (l = l.map((u)=>m.get(u)));
            return l;
        };
        e in m || (m[e] = i1), a && (m.prototype[e] = function(...o) {
            return i1(this, ...o);
        });
    }
    static defineFunctions(e) {
        for(let r in e)m.defineFunction(r, e[r], e[r]);
    }
    static extend(e) {
        if (e.register) e.register(m);
        else if (e.default) m.defineFunction(e.default.name, e.default);
        else if (typeof e == "function") m.defineFunction(e);
        else for(let r in e)m.defineFunction(r, e[r]);
    }
};
m.defineFunctions({
    get: x1,
    getAll: ee,
    set: Z,
    setAll: $t,
    to: _,
    equals: M0,
    inGamut: J,
    toGamut: v,
    distance: kt,
    toString: we
});
Object.assign(m, {
    util: i0,
    hooks: X,
    WHITES: B,
    Space: c,
    spaces: c.registry,
    parse: Et,
    defaults: E
});
for (let t1 of Object.keys(Lt))c.register(Lt[t1]);
for(let t2 in c.registry)Ut(t2, c.registry[t2]);
X.add("colorspace-init-end", Ut);
function Ut(t, e) {
    Object.keys(e.coords), Object.values(e.coords).map((n)=>n.name);
    let r = t.replace(/-/g, "_");
    Object.defineProperty(m.prototype, r, {
        get () {
            let n = this.getAll(t);
            return typeof Proxy > "u" ? n : new Proxy(n, {
                has: (a, s)=>{
                    try {
                        return c.resolveCoord([
                            e,
                            s
                        ]), !0;
                    } catch  {}
                    return Reflect.has(a, s);
                },
                get: (a, s, i1)=>{
                    if (s && typeof s != "symbol" && !(s in a)) {
                        let { index: o  } = c.resolveCoord([
                            e,
                            s
                        ]);
                        if (o >= 0) return a[o];
                    }
                    return Reflect.get(a, s, i1);
                },
                set: (a, s, i1, o)=>{
                    if (s && typeof s != "symbol" && !(s in a) || s >= 0) {
                        let { index: l  } = c.resolveCoord([
                            e,
                            s
                        ]);
                        if (l >= 0) return a[l] = i1, this.setAll(t, a), !0;
                    }
                    return Reflect.set(a, s, i1, o);
                }
            });
        },
        set (n) {
            this.setAll(t, n);
        },
        configurable: !0,
        enumerable: !0
    });
}
m.extend(ve);
m.extend(lr);
m.extend(cr);
m.extend(k0);
m.extend(X0);
m.extend(y0);
m.extend(dr);
m.extend(me);
function o(t) {
    var r = [];
    return e1(t, r), r;
}
function e1(t, r) {
    for(var n = 0; n < t.length; n++){
        var f = t[n];
        Array.isArray(f) ? e1(f, r) : r.push(f);
    }
}
const mod = {
    flatten: o
};
var B1 = Object.create;
var F1 = Object.defineProperty;
var M1 = Object.getOwnPropertyDescriptor;
var P = Object.getOwnPropertyNames;
var N = Object.getPrototypeOf, T2 = Object.prototype.hasOwnProperty;
var y = (t, e)=>()=>(e || t((e = {
            exports: {}
        }).exports, e), e.exports);
var E1 = (t, e, n, o)=>{
    if (e && typeof e == "object" || typeof e == "function") for (let i1 of P(e))!T2.call(t, i1) && i1 !== n && F1(t, i1, {
        get: ()=>e[i1],
        enumerable: !(o = M1(e, i1)) || o.enumerable
    });
    return t;
};
var C1 = (t, e, n)=>(n = t != null ? B1(N(t)) : {}, E1(e || !t || !t.__esModule ? F1(n, "default", {
        value: t,
        enumerable: !0
    }) : n, t));
var m1 = y((z, b)=>{
    function O(t) {
        var e = new f(t), n = e.readChunk();
        if (n.id != "MThd") throw "Bad MIDI file.  Expected 'MHdr', got: '" + n.id + "'";
        for(var o = D1(n.data), i1 = [], c = 0; !e.eof() && c < o.numTracks; c++){
            var r = e.readChunk();
            if (r.id != "MTrk") throw "Bad MIDI file.  Expected 'MTrk', got: '" + r.id + "'";
            var u = q(r.data);
            i1.push(u);
        }
        return {
            header: o,
            tracks: i1
        };
    }
    function D1(t) {
        var e = new f(t), n = e.readUInt16(), o = e.readUInt16(), i1 = {
            format: n,
            numTracks: o
        }, c = e.readUInt16();
        return c & 32768 ? (i1.framesPerSecond = 256 - (c >> 8), i1.ticksPerFrame = c & 255) : i1.ticksPerBeat = c, i1;
    }
    function q(t) {
        for(var e = new f(t), n = []; !e.eof();){
            var o = c();
            n.push(o);
        }
        return n;
        var i1;
        function c() {
            var r = {};
            r.deltaTime = e.readVarInt();
            var u = e.readUInt8();
            if ((u & 240) === 240) if (u === 255) {
                r.meta = !0;
                var s = e.readUInt8(), a = e.readVarInt();
                switch(s){
                    case 0:
                        if (r.type = "sequenceNumber", a !== 2) throw "Expected length for sequenceNumber event is 2, got " + a;
                        return r.number = e.readUInt16(), r;
                    case 1:
                        return r.type = "text", r.text = e.readString(a), r;
                    case 2:
                        return r.type = "copyrightNotice", r.text = e.readString(a), r;
                    case 3:
                        return r.type = "trackName", r.text = e.readString(a), r;
                    case 4:
                        return r.type = "instrumentName", r.text = e.readString(a), r;
                    case 5:
                        return r.type = "lyrics", r.text = e.readString(a), r;
                    case 6:
                        return r.type = "marker", r.text = e.readString(a), r;
                    case 7:
                        return r.type = "cuePoint", r.text = e.readString(a), r;
                    case 32:
                        if (r.type = "channelPrefix", a != 1) throw "Expected length for channelPrefix event is 1, got " + a;
                        return r.channel = e.readUInt8(), r;
                    case 33:
                        if (r.type = "portPrefix", a != 1) throw "Expected length for portPrefix event is 1, got " + a;
                        return r.port = e.readUInt8(), r;
                    case 47:
                        if (r.type = "endOfTrack", a != 0) throw "Expected length for endOfTrack event is 0, got " + a;
                        return r;
                    case 81:
                        if (r.type = "setTempo", a != 3) throw "Expected length for setTempo event is 3, got " + a;
                        return r.microsecondsPerBeat = e.readUInt24(), r;
                    case 84:
                        if (r.type = "smpteOffset", a != 5) throw "Expected length for smpteOffset event is 5, got " + a;
                        var U = e.readUInt8(), h = {
                            0: 24,
                            32: 25,
                            64: 29,
                            96: 30
                        };
                        return r.frameRate = h[U & 96], r.hour = U & 31, r.min = e.readUInt8(), r.sec = e.readUInt8(), r.frame = e.readUInt8(), r.subFrame = e.readUInt8(), r;
                    case 88:
                        if (r.type = "timeSignature", a != 2 && a != 4) throw "Expected length for timeSignature event is 4 or 2, got " + a;
                        return r.numerator = e.readUInt8(), r.denominator = 1 << e.readUInt8(), a === 4 ? (r.metronome = e.readUInt8(), r.thirtyseconds = e.readUInt8()) : (r.metronome = 36, r.thirtyseconds = 8), r;
                    case 89:
                        if (r.type = "keySignature", a != 2) throw "Expected length for keySignature event is 2, got " + a;
                        return r.key = e.readInt8(), r.scale = e.readUInt8(), r;
                    case 127:
                        return r.type = "sequencerSpecific", r.data = e.readBytes(a), r;
                    default:
                        return r.type = "unknownMeta", r.data = e.readBytes(a), r.metatypeByte = s, r;
                }
            } else if (u == 240) {
                r.type = "sysEx";
                var a = e.readVarInt();
                return r.data = e.readBytes(a), r;
            } else if (u == 247) {
                r.type = "endSysEx";
                var a = e.readVarInt();
                return r.data = e.readBytes(a), r;
            } else throw "Unrecognised MIDI event type byte: " + u;
            else {
                var x1;
                if (u & 128) x1 = e.readUInt8(), i1 = u;
                else {
                    if (i1 === null) throw "Running status byte encountered before status byte";
                    x1 = u, u = i1, r.running = !0;
                }
                var d1 = u >> 4;
                switch(r.channel = u & 15, d1){
                    case 8:
                        return r.type = "noteOff", r.noteNumber = x1, r.velocity = e.readUInt8(), r;
                    case 9:
                        var p1 = e.readUInt8();
                        return r.type = p1 === 0 ? "noteOff" : "noteOn", r.noteNumber = x1, r.velocity = p1, p1 === 0 && (r.byte9 = !0), r;
                    case 10:
                        return r.type = "noteAftertouch", r.noteNumber = x1, r.amount = e.readUInt8(), r;
                    case 11:
                        return r.type = "controller", r.controllerType = x1, r.value = e.readUInt8(), r;
                    case 12:
                        return r.type = "programChange", r.programNumber = x1, r;
                    case 13:
                        return r.type = "channelAftertouch", r.amount = x1, r;
                    case 14:
                        return r.type = "pitchBend", r.value = x1 + (e.readUInt8() << 7) - 8192, r;
                    default:
                        throw "Unrecognised MIDI event type: " + d1;
                }
            }
        }
    }
    function f(t) {
        this.buffer = t, this.bufferLen = this.buffer.length, this.pos = 0;
    }
    f.prototype.eof = function() {
        return this.pos >= this.bufferLen;
    };
    f.prototype.readUInt8 = function() {
        var t = this.buffer[this.pos];
        return this.pos += 1, t;
    };
    f.prototype.readInt8 = function() {
        var t = this.readUInt8();
        return t & 128 ? t - 256 : t;
    };
    f.prototype.readUInt16 = function() {
        var t = this.readUInt8(), e = this.readUInt8();
        return (t << 8) + e;
    };
    f.prototype.readInt16 = function() {
        var t = this.readUInt16();
        return t & 32768 ? t - 65536 : t;
    };
    f.prototype.readUInt24 = function() {
        var t = this.readUInt8(), e = this.readUInt8(), n = this.readUInt8();
        return (t << 16) + (e << 8) + n;
    };
    f.prototype.readInt24 = function() {
        var t = this.readUInt24();
        return t & 8388608 ? t - 16777216 : t;
    };
    f.prototype.readUInt32 = function() {
        var t = this.readUInt8(), e = this.readUInt8(), n = this.readUInt8(), o = this.readUInt8();
        return (t << 24) + (e << 16) + (n << 8) + o;
    };
    f.prototype.readBytes = function(t) {
        var e = this.buffer.slice(this.pos, this.pos + t);
        return this.pos += t, e;
    };
    f.prototype.readString = function(t) {
        var e = this.readBytes(t);
        return String.fromCharCode.apply(null, e);
    };
    f.prototype.readVarInt = function() {
        for(var t = 0; !this.eof();){
            var e = this.readUInt8();
            if (e & 128) t += e & 127, t <<= 7;
            else return t + e;
        }
        return t;
    };
    f.prototype.readChunk = function() {
        var t = this.readString(4), e = this.readUInt32(), n = this.readBytes(e);
        return {
            id: t,
            length: e,
            data: n
        };
    };
    b.exports = O;
});
var k = y((W, w)=>{
    function A1(t, e) {
        if (typeof t != "object") throw "Invalid MIDI data";
        e = e || {};
        var n = t.header || {}, o = t.tracks || [], i1, c = o.length, r = new I;
        for(_(r, n, c), i1 = 0; i1 < c; i1++)H(r, o[i1], e);
        return r.buffer;
    }
    function _(t, e, n) {
        var o = e.format == null ? 1 : e.format, i1 = 128;
        e.timeDivision ? i1 = e.timeDivision : e.ticksPerFrame && e.framesPerSecond ? i1 = -(e.framesPerSecond & 255) << 8 | e.ticksPerFrame & 255 : e.ticksPerBeat && (i1 = e.ticksPerBeat & 32767);
        var c = new I;
        c.writeUInt16(o), c.writeUInt16(n), c.writeUInt16(i1), t.writeChunk("MThd", c.buffer);
    }
    function H(t, e, n) {
        var o = new I, i1, c = e.length, r = null;
        for(i1 = 0; i1 < c; i1++)(n.running === !1 || !n.running && !e[i1].running) && (r = null), r = L(o, e[i1], r, n.useByte9ForNoteOff);
        t.writeChunk("MTrk", o.buffer);
    }
    function L(t, e, n, o) {
        var i1 = e.type, c = e.deltaTime, r = e.text || "", u = e.data || [], s = null;
        switch(t.writeVarInt(c), i1){
            case "sequenceNumber":
                t.writeUInt8(255), t.writeUInt8(0), t.writeVarInt(2), t.writeUInt16(e.number);
                break;
            case "text":
                t.writeUInt8(255), t.writeUInt8(1), t.writeVarInt(r.length), t.writeString(r);
                break;
            case "copyrightNotice":
                t.writeUInt8(255), t.writeUInt8(2), t.writeVarInt(r.length), t.writeString(r);
                break;
            case "trackName":
                t.writeUInt8(255), t.writeUInt8(3), t.writeVarInt(r.length), t.writeString(r);
                break;
            case "instrumentName":
                t.writeUInt8(255), t.writeUInt8(4), t.writeVarInt(r.length), t.writeString(r);
                break;
            case "lyrics":
                t.writeUInt8(255), t.writeUInt8(5), t.writeVarInt(r.length), t.writeString(r);
                break;
            case "marker":
                t.writeUInt8(255), t.writeUInt8(6), t.writeVarInt(r.length), t.writeString(r);
                break;
            case "cuePoint":
                t.writeUInt8(255), t.writeUInt8(7), t.writeVarInt(r.length), t.writeString(r);
                break;
            case "channelPrefix":
                t.writeUInt8(255), t.writeUInt8(32), t.writeVarInt(1), t.writeUInt8(e.channel);
                break;
            case "portPrefix":
                t.writeUInt8(255), t.writeUInt8(33), t.writeVarInt(1), t.writeUInt8(e.port);
                break;
            case "endOfTrack":
                t.writeUInt8(255), t.writeUInt8(47), t.writeVarInt(0);
                break;
            case "setTempo":
                t.writeUInt8(255), t.writeUInt8(81), t.writeVarInt(3), t.writeUInt24(e.microsecondsPerBeat);
                break;
            case "smpteOffset":
                t.writeUInt8(255), t.writeUInt8(84), t.writeVarInt(5);
                var a = {
                    24: 0,
                    25: 32,
                    29: 64,
                    30: 96
                }, U = e.hour & 31 | a[e.frameRate];
                t.writeUInt8(U), t.writeUInt8(e.min), t.writeUInt8(e.sec), t.writeUInt8(e.frame), t.writeUInt8(e.subFrame);
                break;
            case "timeSignature":
                t.writeUInt8(255), t.writeUInt8(88), t.writeVarInt(4), t.writeUInt8(e.numerator);
                var h = Math.floor(Math.log(e.denominator) / Math.LN2) & 255;
                t.writeUInt8(h), t.writeUInt8(e.metronome), t.writeUInt8(e.thirtyseconds || 8);
                break;
            case "keySignature":
                t.writeUInt8(255), t.writeUInt8(89), t.writeVarInt(2), t.writeInt8(e.key), t.writeUInt8(e.scale);
                break;
            case "sequencerSpecific":
                t.writeUInt8(255), t.writeUInt8(127), t.writeVarInt(u.length), t.writeBytes(u);
                break;
            case "unknownMeta":
                e.metatypeByte != null && (t.writeUInt8(255), t.writeUInt8(e.metatypeByte), t.writeVarInt(u.length), t.writeBytes(u));
                break;
            case "sysEx":
                t.writeUInt8(240), t.writeVarInt(u.length), t.writeBytes(u);
                break;
            case "endSysEx":
                t.writeUInt8(247), t.writeVarInt(u.length), t.writeBytes(u);
                break;
            case "noteOff":
                var x1 = o !== !1 && e.byte9 || o && e.velocity == 0 ? 144 : 128;
                s = x1 | e.channel, s !== n && t.writeUInt8(s), t.writeUInt8(e.noteNumber), t.writeUInt8(e.velocity);
                break;
            case "noteOn":
                s = 144 | e.channel, s !== n && t.writeUInt8(s), t.writeUInt8(e.noteNumber), t.writeUInt8(e.velocity);
                break;
            case "noteAftertouch":
                s = 160 | e.channel, s !== n && t.writeUInt8(s), t.writeUInt8(e.noteNumber), t.writeUInt8(e.amount);
                break;
            case "controller":
                s = 176 | e.channel, s !== n && t.writeUInt8(s), t.writeUInt8(e.controllerType), t.writeUInt8(e.value);
                break;
            case "programChange":
                s = 192 | e.channel, s !== n && t.writeUInt8(s), t.writeUInt8(e.programNumber);
                break;
            case "channelAftertouch":
                s = 208 | e.channel, s !== n && t.writeUInt8(s), t.writeUInt8(e.amount);
                break;
            case "pitchBend":
                s = 224 | e.channel, s !== n && t.writeUInt8(s);
                var d1 = 8192 + e.value, p1 = d1 & 127, V = d1 >> 7 & 127;
                t.writeUInt8(p1), t.writeUInt8(V);
                break;
            default:
                throw "Unrecognized event type: " + i1;
        }
        return s;
    }
    function I() {
        this.buffer = [];
    }
    I.prototype.writeUInt8 = function(t) {
        this.buffer.push(t & 255);
    };
    I.prototype.writeInt8 = I.prototype.writeUInt8;
    I.prototype.writeUInt16 = function(t) {
        var e = t >> 8 & 255, n = t & 255;
        this.writeUInt8(e), this.writeUInt8(n);
    };
    I.prototype.writeInt16 = I.prototype.writeUInt16;
    I.prototype.writeUInt24 = function(t) {
        var e = t >> 16 & 255, n = t >> 8 & 255, o = t & 255;
        this.writeUInt8(e), this.writeUInt8(n), this.writeUInt8(o);
    };
    I.prototype.writeInt24 = I.prototype.writeUInt24;
    I.prototype.writeUInt32 = function(t) {
        var e = t >> 24 & 255, n = t >> 16 & 255, o = t >> 8 & 255, i1 = t & 255;
        this.writeUInt8(e), this.writeUInt8(n), this.writeUInt8(o), this.writeUInt8(i1);
    };
    I.prototype.writeInt32 = I.prototype.writeUInt32;
    I.prototype.writeBytes = function(t) {
        this.buffer = this.buffer.concat(Array.prototype.slice.call(t, 0));
    };
    I.prototype.writeString = function(t) {
        var e, n = t.length, o = [];
        for(e = 0; e < n; e++)o.push(t.codePointAt(e));
        this.writeBytes(o);
    };
    I.prototype.writeVarInt = function(t) {
        if (t < 0) throw "Cannot write negative variable-length integer";
        if (t <= 127) this.writeUInt8(t);
        else {
            var e = t, n = [];
            for(n.push(e & 127), e >>= 7; e;){
                var o = e & 127 | 128;
                n.push(o), e >>= 7;
            }
            this.writeBytes(n.reverse());
        }
    };
    I.prototype.writeChunk = function(t, e) {
        this.writeString(t), this.writeUInt32(e.length), this.writeBytes(e);
    };
    w.exports = A1;
});
var g1 = y((l)=>{
    l.parseMidi = m1();
    l.writeMidi = k();
});
var S2 = C1(g1()), { parseMidi: J1 , writeMidi: K1  } = S2, { default: v1 , ...R } = S2, Q1 = v1 !== void 0 ? v1 : R;
var se1 = Object.create;
var K2 = Object.defineProperty;
var oe1 = Object.getOwnPropertyDescriptor;
var ue1 = Object.getOwnPropertyNames;
var ce1 = Object.getPrototypeOf, he1 = Object.prototype.hasOwnProperty;
((r)=>typeof require < "u" ? require : typeof Proxy < "u" ? new Proxy(r, {
        get: (e, t)=>(typeof require < "u" ? require : e)[t]
    }) : r)(function(r) {
    if (typeof require < "u") return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + r + '" is not supported');
});
var m2 = (r, e)=>()=>(e || r((e = {
            exports: {}
        }).exports, e), e.exports);
var le1 = (r, e, t, n)=>{
    if (e && typeof e == "object" || typeof e == "function") for (let i1 of ue1(e))!he1.call(r, i1) && i1 !== t && K2(r, i1, {
        get: ()=>e[i1],
        enumerable: !(n = oe1(e, i1)) || n.enumerable
    });
    return r;
};
var fe1 = (r, e, t)=>(t = r != null ? se1(ce1(r)) : {}, le1(e || !r || !r.__esModule ? K2(t, "default", {
        value: r,
        enumerable: !0
    }) : t, r));
var q = m2((v)=>{
    "use strict";
    Object.defineProperty(v, "__esModule", {
        value: !0
    });
    v.insert = v.search = void 0;
    function U(r, e, t) {
        t === void 0 && (t = "ticks");
        var n = 0, i1 = r.length, a = i1;
        if (i1 > 0 && r[i1 - 1][t] <= e) return i1 - 1;
        for(; n < a;){
            var o = Math.floor(n + (a - n) / 2), c = r[o], l = r[o + 1];
            if (c[t] === e) {
                for(var s = o; s < r.length; s++){
                    var h = r[s];
                    h[t] === e && (o = s);
                }
                return o;
            } else {
                if (c[t] < e && l[t] > e) return o;
                c[t] > e ? a = o : c[t] < e && (n = o + 1);
            }
        }
        return -1;
    }
    v.search = U;
    function de(r, e, t) {
        if (t === void 0 && (t = "ticks"), r.length) {
            var n = U(r, e[t], t);
            r.splice(n + 1, 0, e);
        } else r.push(e);
    }
    v.insert = de;
});
var C2 = m2((g)=>{
    "use strict";
    Object.defineProperty(g, "__esModule", {
        value: !0
    });
    g.Header = g.keySignatureKeys = void 0;
    var j = q(), O = new WeakMap;
    g.keySignatureKeys = [
        "Cb",
        "Gb",
        "Db",
        "Ab",
        "Eb",
        "Bb",
        "F",
        "C",
        "G",
        "D",
        "A",
        "E",
        "B",
        "F#",
        "C#"
    ];
    var me = function() {
        function r(e) {
            var t = this;
            if (this.tempos = [], this.timeSignatures = [], this.keySignatures = [], this.meta = [], this.name = "", O.set(this, 480), e) {
                O.set(this, e.header.ticksPerBeat), e.tracks.forEach(function(i1) {
                    i1.forEach(function(a) {
                        a.meta && (a.type === "timeSignature" ? t.timeSignatures.push({
                            ticks: a.absoluteTime,
                            timeSignature: [
                                a.numerator,
                                a.denominator
                            ]
                        }) : a.type === "setTempo" ? t.tempos.push({
                            bpm: 6e7 / a.microsecondsPerBeat,
                            ticks: a.absoluteTime
                        }) : a.type === "keySignature" && t.keySignatures.push({
                            key: g.keySignatureKeys[a.key + 7],
                            scale: a.scale === 0 ? "major" : "minor",
                            ticks: a.absoluteTime
                        }));
                    });
                });
                var n = 0;
                e.tracks[0].forEach(function(i1) {
                    n += i1.deltaTime, i1.meta && (i1.type === "trackName" ? t.name = i1.text : (i1.type === "text" || i1.type === "cuePoint" || i1.type === "marker" || i1.type === "lyrics") && t.meta.push({
                        text: i1.text,
                        ticks: n,
                        type: i1.type
                    }));
                }), this.update();
            }
        }
        return r.prototype.update = function() {
            var e = this, t = 0, n = 0;
            this.tempos.sort(function(i1, a) {
                return i1.ticks - a.ticks;
            }), this.tempos.forEach(function(i1, a) {
                var o = a > 0 ? e.tempos[a - 1].bpm : e.tempos[0].bpm, c = i1.ticks / e.ppq - n, l = 60 / o * c;
                i1.time = l + t, t = i1.time, n += c;
            }), this.timeSignatures.sort(function(i1, a) {
                return i1.ticks - a.ticks;
            }), this.timeSignatures.forEach(function(i1, a) {
                var o = a > 0 ? e.timeSignatures[a - 1] : e.timeSignatures[0], c = (i1.ticks - o.ticks) / e.ppq, l = c / o.timeSignature[0] / (o.timeSignature[1] / 4);
                o.measures = o.measures || 0, i1.measures = l + o.measures;
            });
        }, r.prototype.ticksToSeconds = function(e) {
            var t = (0, j.search)(this.tempos, e);
            if (t !== -1) {
                var n = this.tempos[t], i1 = n.time, a = (e - n.ticks) / this.ppq;
                return i1 + 60 / n.bpm * a;
            } else {
                var o = e / this.ppq;
                return 60 / 120 * o;
            }
        }, r.prototype.ticksToMeasures = function(e) {
            var t = (0, j.search)(this.timeSignatures, e);
            if (t !== -1) {
                var n = this.timeSignatures[t], i1 = (e - n.ticks) / this.ppq;
                return n.measures + i1 / (n.timeSignature[0] / n.timeSignature[1]) / 4;
            } else return e / this.ppq / 4;
        }, Object.defineProperty(r.prototype, "ppq", {
            get: function() {
                return O.get(this);
            },
            enumerable: !1,
            configurable: !0
        }), r.prototype.secondsToTicks = function(e) {
            var t = (0, j.search)(this.tempos, e, "time");
            if (t !== -1) {
                var n = this.tempos[t], i1 = n.time, a = e - i1, o = a / (60 / n.bpm);
                return Math.round(n.ticks + o * this.ppq);
            } else {
                var c = e / .5;
                return Math.round(c * this.ppq);
            }
        }, r.prototype.toJSON = function() {
            return {
                keySignatures: this.keySignatures,
                meta: this.meta,
                name: this.name,
                ppq: this.ppq,
                tempos: this.tempos.map(function(e) {
                    return {
                        bpm: e.bpm,
                        ticks: e.ticks
                    };
                }),
                timeSignatures: this.timeSignatures
            };
        }, r.prototype.fromJSON = function(e) {
            this.name = e.name, this.tempos = e.tempos.map(function(t) {
                return Object.assign({}, t);
            }), this.timeSignatures = e.timeSignatures.map(function(t) {
                return Object.assign({}, t);
            }), this.keySignatures = e.keySignatures.map(function(t) {
                return Object.assign({}, t);
            }), this.meta = e.meta.map(function(t) {
                return Object.assign({}, t);
            }), O.set(this, e.ppq), this.update();
        }, r.prototype.setTempo = function(e) {
            this.tempos = [
                {
                    bpm: e,
                    ticks: 0
                }
            ], this.update();
        }, r;
    }();
    g.Header = me;
});
var E2 = m2((f)=>{
    "use strict";
    Object.defineProperty(f, "__esModule", {
        value: !0
    });
    f.ControlChange = f.controlChangeIds = f.controlChangeNames = void 0;
    f.controlChangeNames = {
        1: "modulationWheel",
        2: "breath",
        4: "footController",
        5: "portamentoTime",
        7: "volume",
        8: "balance",
        10: "pan",
        64: "sustain",
        65: "portamentoTime",
        66: "sostenuto",
        67: "softPedal",
        68: "legatoFootswitch",
        84: "portamentoControl"
    };
    f.controlChangeIds = Object.keys(f.controlChangeNames).reduce(function(r, e) {
        return r[f.controlChangeNames[e]] = e, r;
    }, {});
    var J = new WeakMap, V = new WeakMap, pe = function() {
        function r(e, t) {
            J.set(this, t), V.set(this, e.controllerType), this.ticks = e.absoluteTime, this.value = e.value;
        }
        return Object.defineProperty(r.prototype, "number", {
            get: function() {
                return V.get(this);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "name", {
            get: function() {
                return f.controlChangeNames[this.number] ? f.controlChangeNames[this.number] : null;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "time", {
            get: function() {
                var e = J.get(this);
                return e.ticksToSeconds(this.ticks);
            },
            set: function(e) {
                var t = J.get(this);
                this.ticks = t.secondsToTicks(e);
            },
            enumerable: !1,
            configurable: !0
        }), r.prototype.toJSON = function() {
            return {
                number: this.number,
                ticks: this.ticks,
                time: this.time,
                value: this.value
            };
        }, r;
    }();
    f.ControlChange = pe;
});
var L = m2((w)=>{
    "use strict";
    Object.defineProperty(w, "__esModule", {
        value: !0
    });
    w.createControlChanges = void 0;
    var S1 = E2();
    function be() {
        return new Proxy({}, {
            get: function(r, e) {
                if (r[e]) return r[e];
                if (S1.controlChangeIds.hasOwnProperty(e)) return r[S1.controlChangeIds[e]];
            },
            set: function(r, e, t) {
                return S1.controlChangeIds.hasOwnProperty(e) ? r[S1.controlChangeIds[e]] = t : r[e] = t, !0;
            }
        });
    }
    w.createControlChanges = be;
});
var Q2 = m2((N)=>{
    "use strict";
    Object.defineProperty(N, "__esModule", {
        value: !0
    });
    N.PitchBend = void 0;
    var H = new WeakMap, ye = function() {
        function r(e, t) {
            H.set(this, t), this.ticks = e.absoluteTime, this.value = e.value;
        }
        return Object.defineProperty(r.prototype, "time", {
            get: function() {
                var e = H.get(this);
                return e.ticksToSeconds(this.ticks);
            },
            set: function(e) {
                var t = H.get(this);
                this.ticks = t.secondsToTicks(e);
            },
            enumerable: !1,
            configurable: !0
        }), r.prototype.toJSON = function() {
            return {
                ticks: this.ticks,
                time: this.time,
                value: this.value
            };
        }, r;
    }();
    N.PitchBend = ye;
});
var R1 = m2((b)=>{
    "use strict";
    Object.defineProperty(b, "__esModule", {
        value: !0
    });
    b.DrumKitByPatchID = b.InstrumentFamilyByID = b.instrumentByPatchID = void 0;
    b.instrumentByPatchID = [
        "acoustic grand piano",
        "bright acoustic piano",
        "electric grand piano",
        "honky-tonk piano",
        "electric piano 1",
        "electric piano 2",
        "harpsichord",
        "clavi",
        "celesta",
        "glockenspiel",
        "music box",
        "vibraphone",
        "marimba",
        "xylophone",
        "tubular bells",
        "dulcimer",
        "drawbar organ",
        "percussive organ",
        "rock organ",
        "church organ",
        "reed organ",
        "accordion",
        "harmonica",
        "tango accordion",
        "acoustic guitar (nylon)",
        "acoustic guitar (steel)",
        "electric guitar (jazz)",
        "electric guitar (clean)",
        "electric guitar (muted)",
        "overdriven guitar",
        "distortion guitar",
        "guitar harmonics",
        "acoustic bass",
        "electric bass (finger)",
        "electric bass (pick)",
        "fretless bass",
        "slap bass 1",
        "slap bass 2",
        "synth bass 1",
        "synth bass 2",
        "violin",
        "viola",
        "cello",
        "contrabass",
        "tremolo strings",
        "pizzicato strings",
        "orchestral harp",
        "timpani",
        "string ensemble 1",
        "string ensemble 2",
        "synthstrings 1",
        "synthstrings 2",
        "choir aahs",
        "voice oohs",
        "synth voice",
        "orchestra hit",
        "trumpet",
        "trombone",
        "tuba",
        "muted trumpet",
        "french horn",
        "brass section",
        "synthbrass 1",
        "synthbrass 2",
        "soprano sax",
        "alto sax",
        "tenor sax",
        "baritone sax",
        "oboe",
        "english horn",
        "bassoon",
        "clarinet",
        "piccolo",
        "flute",
        "recorder",
        "pan flute",
        "blown bottle",
        "shakuhachi",
        "whistle",
        "ocarina",
        "lead 1 (square)",
        "lead 2 (sawtooth)",
        "lead 3 (calliope)",
        "lead 4 (chiff)",
        "lead 5 (charang)",
        "lead 6 (voice)",
        "lead 7 (fifths)",
        "lead 8 (bass + lead)",
        "pad 1 (new age)",
        "pad 2 (warm)",
        "pad 3 (polysynth)",
        "pad 4 (choir)",
        "pad 5 (bowed)",
        "pad 6 (metallic)",
        "pad 7 (halo)",
        "pad 8 (sweep)",
        "fx 1 (rain)",
        "fx 2 (soundtrack)",
        "fx 3 (crystal)",
        "fx 4 (atmosphere)",
        "fx 5 (brightness)",
        "fx 6 (goblins)",
        "fx 7 (echoes)",
        "fx 8 (sci-fi)",
        "sitar",
        "banjo",
        "shamisen",
        "koto",
        "kalimba",
        "bag pipe",
        "fiddle",
        "shanai",
        "tinkle bell",
        "agogo",
        "steel drums",
        "woodblock",
        "taiko drum",
        "melodic tom",
        "synth drum",
        "reverse cymbal",
        "guitar fret noise",
        "breath noise",
        "seashore",
        "bird tweet",
        "telephone ring",
        "helicopter",
        "applause",
        "gunshot"
    ];
    b.InstrumentFamilyByID = [
        "piano",
        "chromatic percussion",
        "organ",
        "guitar",
        "bass",
        "strings",
        "ensemble",
        "brass",
        "reed",
        "pipe",
        "synth lead",
        "synth pad",
        "synth effects",
        "world",
        "percussive",
        "sound effects"
    ];
    b.DrumKitByPatchID = {
        0: "standard kit",
        8: "room kit",
        16: "power kit",
        24: "electronic kit",
        25: "tr-808 kit",
        32: "jazz kit",
        40: "brush kit",
        48: "orchestra kit",
        56: "sound fx kit"
    };
});
var Y = m2((P)=>{
    "use strict";
    Object.defineProperty(P, "__esModule", {
        value: !0
    });
    P.Instrument = void 0;
    var _ = R1(), X = new WeakMap, ge = function() {
        function r(e, t) {
            if (this.number = 0, X.set(this, t), this.number = 0, e) {
                var n = e.find(function(i1) {
                    return i1.type === "programChange";
                });
                n && (this.number = n.programNumber);
            }
        }
        return Object.defineProperty(r.prototype, "name", {
            get: function() {
                return this.percussion ? _.DrumKitByPatchID[this.number] : _.instrumentByPatchID[this.number];
            },
            set: function(e) {
                var t = _.instrumentByPatchID.indexOf(e);
                t !== -1 && (this.number = t);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "family", {
            get: function() {
                return this.percussion ? "drums" : _.InstrumentFamilyByID[Math.floor(this.number / 8)];
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "percussion", {
            get: function() {
                var e = X.get(this);
                return e.channel === 9;
            },
            enumerable: !1,
            configurable: !0
        }), r.prototype.toJSON = function() {
            return {
                family: this.family,
                number: this.number,
                name: this.name
            };
        }, r.prototype.fromJSON = function(e) {
            this.number = e.number;
        }, r;
    }();
    P.Instrument = ge;
});
var $ = m2((M)=>{
    "use strict";
    Object.defineProperty(M, "__esModule", {
        value: !0
    });
    M.Note = void 0;
    function ve(r) {
        var e = Math.floor(r / 12) - 1;
        return Z(r) + e.toString();
    }
    function Z(r) {
        var e = [
            "C",
            "C#",
            "D",
            "D#",
            "E",
            "F",
            "F#",
            "G",
            "G#",
            "A",
            "A#",
            "B"
        ], t = r % 12;
        return e[t];
    }
    function ke(r) {
        var e = [
            "C",
            "C#",
            "D",
            "D#",
            "E",
            "F",
            "F#",
            "G",
            "G#",
            "A",
            "A#",
            "B"
        ];
        return e.indexOf(r);
    }
    var Te = function() {
        var r = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i, e = {
            cbb: -2,
            cb: -1,
            c: 0,
            "c#": 1,
            cx: 2,
            dbb: 0,
            db: 1,
            d: 2,
            "d#": 3,
            dx: 4,
            ebb: 2,
            eb: 3,
            e: 4,
            "e#": 5,
            ex: 6,
            fbb: 3,
            fb: 4,
            f: 5,
            "f#": 6,
            fx: 7,
            gbb: 5,
            gb: 6,
            g: 7,
            "g#": 8,
            gx: 9,
            abb: 7,
            ab: 8,
            a: 9,
            "a#": 10,
            ax: 11,
            bbb: 9,
            bb: 10,
            b: 11,
            "b#": 12,
            bx: 13
        };
        return function(t) {
            var n = r.exec(t), i1 = n[1], a = n[2], o = e[i1.toLowerCase()];
            return o + (parseInt(a, 10) + 1) * 12;
        };
    }(), k = new WeakMap, Oe = function() {
        function r(e, t, n) {
            k.set(this, n), this.midi = e.midi, this.velocity = e.velocity, this.noteOffVelocity = t.velocity, this.ticks = e.ticks, this.durationTicks = t.ticks - e.ticks;
        }
        return Object.defineProperty(r.prototype, "name", {
            get: function() {
                return ve(this.midi);
            },
            set: function(e) {
                this.midi = Te(e);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "octave", {
            get: function() {
                return Math.floor(this.midi / 12) - 1;
            },
            set: function(e) {
                var t = e - this.octave;
                this.midi += t * 12;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "pitch", {
            get: function() {
                return Z(this.midi);
            },
            set: function(e) {
                this.midi = 12 * (this.octave + 1) + ke(e);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "duration", {
            get: function() {
                var e = k.get(this);
                return e.ticksToSeconds(this.ticks + this.durationTicks) - e.ticksToSeconds(this.ticks);
            },
            set: function(e) {
                var t = k.get(this), n = t.secondsToTicks(this.time + e);
                this.durationTicks = n - this.ticks;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "time", {
            get: function() {
                var e = k.get(this);
                return e.ticksToSeconds(this.ticks);
            },
            set: function(e) {
                var t = k.get(this);
                this.ticks = t.secondsToTicks(e);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "bars", {
            get: function() {
                var e = k.get(this);
                return e.ticksToMeasures(this.ticks);
            },
            enumerable: !1,
            configurable: !0
        }), r.prototype.toJSON = function() {
            return {
                duration: this.duration,
                durationTicks: this.durationTicks,
                midi: this.midi,
                name: this.name,
                ticks: this.ticks,
                time: this.time,
                velocity: this.velocity
            };
        }, r;
    }();
    M.Note = Oe;
});
var D2 = m2((B)=>{
    "use strict";
    Object.defineProperty(B, "__esModule", {
        value: !0
    });
    B.Track = void 0;
    var A1 = q(), Ce = E2(), Se = L(), we = Q2(), ee = Y(), Ne = $(), x1 = new WeakMap, _e = function() {
        function r(e, t) {
            var n = this;
            if (this.name = "", this.notes = [], this.controlChanges = (0, Se.createControlChanges)(), this.pitchBends = [], x1.set(this, t), e) {
                var i1 = e.find(function(u) {
                    return u.type === "trackName";
                });
                this.name = i1 ? i1.text : "";
            }
            if (this.instrument = new ee.Instrument(e, this), this.channel = 0, e) {
                for(var a = e.filter(function(u) {
                    return u.type === "noteOn";
                }), o = e.filter(function(u) {
                    return u.type === "noteOff";
                }), c = function() {
                    var u = a.shift();
                    l.channel = u.channel;
                    var W = o.findIndex(function(G) {
                        return G.noteNumber === u.noteNumber && G.absoluteTime >= u.absoluteTime;
                    });
                    if (W !== -1) {
                        var z = o.splice(W, 1)[0];
                        l.addNote({
                            durationTicks: z.absoluteTime - u.absoluteTime,
                            midi: u.noteNumber,
                            noteOffVelocity: z.velocity / 127,
                            ticks: u.absoluteTime,
                            velocity: u.velocity / 127
                        });
                    }
                }, l = this; a.length;)c();
                var s = e.filter(function(u) {
                    return u.type === "controller";
                });
                s.forEach(function(u) {
                    n.addCC({
                        number: u.controllerType,
                        ticks: u.absoluteTime,
                        value: u.value / 127
                    });
                });
                var h = e.filter(function(u) {
                    return u.type === "pitchBend";
                });
                h.forEach(function(u) {
                    n.addPitchBend({
                        ticks: u.absoluteTime,
                        value: u.value / Math.pow(2, 13)
                    });
                });
                var p1 = e.find(function(u) {
                    return u.type === "endOfTrack";
                });
                this.endOfTrackTicks = p1 !== void 0 ? p1.absoluteTime : void 0;
            }
        }
        return r.prototype.addNote = function(e) {
            var t = x1.get(this), n = new Ne.Note({
                midi: 0,
                ticks: 0,
                velocity: 1
            }, {
                ticks: 0,
                velocity: 0
            }, t);
            return Object.assign(n, e), (0, A1.insert)(this.notes, n, "ticks"), this;
        }, r.prototype.addCC = function(e) {
            var t = x1.get(this), n = new Ce.ControlChange({
                controllerType: e.number
            }, t);
            return delete e.number, Object.assign(n, e), Array.isArray(this.controlChanges[n.number]) || (this.controlChanges[n.number] = []), (0, A1.insert)(this.controlChanges[n.number], n, "ticks"), this;
        }, r.prototype.addPitchBend = function(e) {
            var t = x1.get(this), n = new we.PitchBend({}, t);
            return Object.assign(n, e), (0, A1.insert)(this.pitchBends, n, "ticks"), this;
        }, Object.defineProperty(r.prototype, "duration", {
            get: function() {
                if (!this.notes.length) return 0;
                for(var e = this.notes[this.notes.length - 1].time + this.notes[this.notes.length - 1].duration, t = 0; t < this.notes.length - 1; t++){
                    var n = this.notes[t].time + this.notes[t].duration;
                    e < n && (e = n);
                }
                return e;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "durationTicks", {
            get: function() {
                if (!this.notes.length) return 0;
                for(var e = this.notes[this.notes.length - 1].ticks + this.notes[this.notes.length - 1].durationTicks, t = 0; t < this.notes.length - 1; t++){
                    var n = this.notes[t].ticks + this.notes[t].durationTicks;
                    e < n && (e = n);
                }
                return e;
            },
            enumerable: !1,
            configurable: !0
        }), r.prototype.fromJSON = function(e) {
            var t = this;
            this.name = e.name, this.channel = e.channel, this.instrument = new ee.Instrument(void 0, this), this.instrument.fromJSON(e.instrument), e.endOfTrackTicks !== void 0 && (this.endOfTrackTicks = e.endOfTrackTicks);
            for(var n in e.controlChanges)e.controlChanges[n] && e.controlChanges[n].forEach(function(i1) {
                t.addCC({
                    number: i1.number,
                    ticks: i1.ticks,
                    value: i1.value
                });
            });
            e.notes.forEach(function(i1) {
                t.addNote({
                    durationTicks: i1.durationTicks,
                    midi: i1.midi,
                    ticks: i1.ticks,
                    velocity: i1.velocity
                });
            });
        }, r.prototype.toJSON = function() {
            for(var e = {}, t = 0; t < 127; t++)this.controlChanges.hasOwnProperty(t) && (e[t] = this.controlChanges[t].map(function(i1) {
                return i1.toJSON();
            }));
            var n = {
                channel: this.channel,
                controlChanges: e,
                pitchBends: this.pitchBends.map(function(i1) {
                    return i1.toJSON();
                }),
                instrument: this.instrument.toJSON(),
                name: this.name,
                notes: this.notes.map(function(i1) {
                    return i1.toJSON();
                })
            };
            return this.endOfTrackTicks !== void 0 && (n.endOfTrackTicks = this.endOfTrackTicks), n;
        }, r;
    }();
    B.Track = _e;
});
var te1 = m2((T1)=>{
    "use strict";
    var y = T1 && T1.__spreadArray || function(r, e, t) {
        if (t || arguments.length === 2) for(var n = 0, i1 = e.length, a; n < i1; n++)(a || !(n in e)) && (a || (a = Array.prototype.slice.call(e, 0, n)), a[n] = e[n]);
        return r.concat(a || Array.prototype.slice.call(e));
    };
    Object.defineProperty(T1, "__esModule", {
        value: !0
    });
    T1.encode = void 0;
    var Pe = Q1, Me = C2(), xe = mod;
    function Be(r, e) {
        return [
            {
                absoluteTime: r.ticks,
                channel: e,
                deltaTime: 0,
                noteNumber: r.midi,
                type: "noteOn",
                velocity: Math.floor(r.velocity * 127)
            },
            {
                absoluteTime: r.ticks + r.durationTicks,
                channel: e,
                deltaTime: 0,
                noteNumber: r.midi,
                type: "noteOff",
                velocity: Math.floor(r.noteOffVelocity * 127)
            }
        ];
    }
    function Ie(r) {
        return (0, xe.flatten)(r.notes.map(function(e) {
            return Be(e, r.channel);
        }));
    }
    function qe(r, e) {
        return {
            absoluteTime: r.ticks,
            channel: e,
            controllerType: r.number,
            deltaTime: 0,
            type: "controller",
            value: Math.floor(r.value * 127)
        };
    }
    function je(r) {
        for(var e = [], t = 0; t < 127; t++)r.controlChanges.hasOwnProperty(t) && r.controlChanges[t].forEach(function(n) {
            e.push(qe(n, r.channel));
        });
        return e;
    }
    function Je(r, e) {
        return {
            absoluteTime: r.ticks,
            channel: e,
            deltaTime: 0,
            type: "pitchBend",
            value: r.value
        };
    }
    function Ee(r) {
        var e = [];
        return r.pitchBends.forEach(function(t) {
            e.push(Je(t, r.channel));
        }), e;
    }
    function He(r) {
        return {
            absoluteTime: 0,
            channel: r.channel,
            deltaTime: 0,
            programNumber: r.instrument.number,
            type: "programChange"
        };
    }
    function Ae(r) {
        return {
            absoluteTime: 0,
            deltaTime: 0,
            meta: !0,
            text: r,
            type: "trackName"
        };
    }
    function De(r) {
        return {
            absoluteTime: r.ticks,
            deltaTime: 0,
            meta: !0,
            microsecondsPerBeat: Math.floor(6e7 / r.bpm),
            type: "setTempo"
        };
    }
    function Fe(r) {
        return {
            absoluteTime: r.ticks,
            deltaTime: 0,
            denominator: r.timeSignature[1],
            meta: !0,
            metronome: 24,
            numerator: r.timeSignature[0],
            thirtyseconds: 8,
            type: "timeSignature"
        };
    }
    function We(r) {
        var e = Me.keySignatureKeys.indexOf(r.key);
        return {
            absoluteTime: r.ticks,
            deltaTime: 0,
            key: e + 7,
            meta: !0,
            scale: r.scale === "major" ? 0 : 1,
            type: "keySignature"
        };
    }
    function ze(r) {
        return {
            absoluteTime: r.ticks,
            deltaTime: 0,
            meta: !0,
            text: r.text,
            type: r.type
        };
    }
    function Ge(r) {
        var e = {
            header: {
                format: 1,
                numTracks: r.tracks.length + 1,
                ticksPerBeat: r.header.ppq
            },
            tracks: y([
                y(y(y(y([
                    {
                        absoluteTime: 0,
                        deltaTime: 0,
                        meta: !0,
                        text: r.header.name,
                        type: "trackName"
                    }
                ], r.header.keySignatures.map(function(t) {
                    return We(t);
                }), !0), r.header.meta.map(function(t) {
                    return ze(t);
                }), !0), r.header.tempos.map(function(t) {
                    return De(t);
                }), !0), r.header.timeSignatures.map(function(t) {
                    return Fe(t);
                }), !0)
            ], r.tracks.map(function(t) {
                return y(y(y([
                    Ae(t.name),
                    He(t)
                ], Ie(t), !0), je(t), !0), Ee(t), !0);
            }), !0)
        };
        return e.tracks = e.tracks.map(function(t) {
            t = t.sort(function(i1, a) {
                return i1.absoluteTime - a.absoluteTime;
            });
            var n = 0;
            return t.forEach(function(i1) {
                i1.deltaTime = i1.absoluteTime - n, n = i1.absoluteTime, delete i1.absoluteTime;
            }), t.push({
                deltaTime: 0,
                meta: !0,
                type: "endOfTrack"
            }), t;
        }), new Uint8Array((0, Pe.writeMidi)(e));
    }
    T1.encode = Ge;
});
var ne = m2((d1)=>{
    "use strict";
    var Ke = d1 && d1.__awaiter || function(r, e, t, n) {
        function i1(a) {
            return a instanceof t ? a : new t(function(o) {
                o(a);
            });
        }
        return new (t || (t = Promise))(function(a, o) {
            function c(h) {
                try {
                    s(n.next(h));
                } catch (p1) {
                    o(p1);
                }
            }
            function l(h) {
                try {
                    s(n.throw(h));
                } catch (p1) {
                    o(p1);
                }
            }
            function s(h) {
                h.done ? a(h.value) : i1(h.value).then(c, l);
            }
            s((n = n.apply(r, e || [])).next());
        });
    }, Ue = d1 && d1.__generator || function(r, e) {
        var t = {
            label: 0,
            sent: function() {
                if (a[0] & 1) throw a[1];
                return a[1];
            },
            trys: [],
            ops: []
        }, n, i1, a, o;
        return o = {
            next: c(0),
            throw: c(1),
            return: c(2)
        }, typeof Symbol == "function" && (o[Symbol.iterator] = function() {
            return this;
        }), o;
        function c(s) {
            return function(h) {
                return l([
                    s,
                    h
                ]);
            };
        }
        function l(s) {
            if (n) throw new TypeError("Generator is already executing.");
            for(; t;)try {
                if (n = 1, i1 && (a = s[0] & 2 ? i1.return : s[0] ? i1.throw || ((a = i1.return) && a.call(i1), 0) : i1.next) && !(a = a.call(i1, s[1])).done) return a;
                switch(i1 = 0, a && (s = [
                    s[0] & 2,
                    a.value
                ]), s[0]){
                    case 0:
                    case 1:
                        a = s;
                        break;
                    case 4:
                        return t.label++, {
                            value: s[1],
                            done: !1
                        };
                    case 5:
                        t.label++, i1 = s[1], s = [
                            0
                        ];
                        continue;
                    case 7:
                        s = t.ops.pop(), t.trys.pop();
                        continue;
                    default:
                        if (a = t.trys, !(a = a.length > 0 && a[a.length - 1]) && (s[0] === 6 || s[0] === 2)) {
                            t = 0;
                            continue;
                        }
                        if (s[0] === 3 && (!a || s[1] > a[0] && s[1] < a[3])) {
                            t.label = s[1];
                            break;
                        }
                        if (s[0] === 6 && t.label < a[1]) {
                            t.label = a[1], a = s;
                            break;
                        }
                        if (a && t.label < a[2]) {
                            t.label = a[2], t.ops.push(s);
                            break;
                        }
                        a[2] && t.ops.pop(), t.trys.pop();
                        continue;
                }
                s = e.call(r, t);
            } catch (h) {
                s = [
                    6,
                    h
                ], i1 = 0;
            } finally{
                n = a = 0;
            }
            if (s[0] & 5) throw s[1];
            return {
                value: s[0] ? s[1] : void 0,
                done: !0
            };
        }
    };
    Object.defineProperty(d1, "__esModule", {
        value: !0
    });
    d1.Header = d1.Track = d1.Midi = void 0;
    var Ve = Q1, re = C2(), F = D2(), Le = te1(), Qe = function() {
        function r(e) {
            var t = this, n = null;
            if (e) {
                var i1 = e instanceof ArrayBuffer ? new Uint8Array(e) : e;
                n = (0, Ve.parseMidi)(i1), n.tracks.forEach(function(a) {
                    var o = 0;
                    a.forEach(function(c) {
                        o += c.deltaTime, c.absoluteTime = o;
                    });
                }), n.tracks = Ye(n.tracks);
            }
            this.header = new re.Header(n), this.tracks = [], e && (this.tracks = n.tracks.map(function(a) {
                return new F.Track(a, t.header);
            }), n.header.format === 1 && this.tracks[0].duration === 0 && this.tracks.shift());
        }
        return r.fromUrl = function(e) {
            return Ke(this, void 0, void 0, function() {
                var t, n;
                return Ue(this, function(i1) {
                    switch(i1.label){
                        case 0:
                            return [
                                4,
                                fetch(e)
                            ];
                        case 1:
                            return t = i1.sent(), t.ok ? [
                                4,
                                t.arrayBuffer()
                            ] : [
                                3,
                                3
                            ];
                        case 2:
                            return n = i1.sent(), [
                                2,
                                new r(n)
                            ];
                        case 3:
                            throw new Error("Could not load '".concat(e, "'"));
                    }
                });
            });
        }, Object.defineProperty(r.prototype, "name", {
            get: function() {
                return this.header.name;
            },
            set: function(e) {
                this.header.name = e;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "duration", {
            get: function() {
                var e = this.tracks.map(function(t) {
                    return t.duration;
                });
                return Math.max.apply(Math, e);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(r.prototype, "durationTicks", {
            get: function() {
                var e = this.tracks.map(function(t) {
                    return t.durationTicks;
                });
                return Math.max.apply(Math, e);
            },
            enumerable: !1,
            configurable: !0
        }), r.prototype.addTrack = function() {
            var e = new F.Track(void 0, this.header);
            return this.tracks.push(e), e;
        }, r.prototype.toArray = function() {
            return (0, Le.encode)(this);
        }, r.prototype.toJSON = function() {
            return {
                header: this.header.toJSON(),
                tracks: this.tracks.map(function(e) {
                    return e.toJSON();
                })
            };
        }, r.prototype.fromJSON = function(e) {
            var t = this;
            this.header = new re.Header, this.header.fromJSON(e.header), this.tracks = e.tracks.map(function(n) {
                var i1 = new F.Track(void 0, t.header);
                return i1.fromJSON(n), i1;
            });
        }, r.prototype.clone = function() {
            var e = new r;
            return e.fromJSON(this.toJSON()), e;
        }, r;
    }();
    d1.Midi = Qe;
    var Re = D2();
    Object.defineProperty(d1, "Track", {
        enumerable: !0,
        get: function() {
            return Re.Track;
        }
    });
    var Xe = C2();
    Object.defineProperty(d1, "Header", {
        enumerable: !0,
        get: function() {
            return Xe.Header;
        }
    });
    function Ye(r) {
        for(var e = [], t = 0; t < r.length; t++)for(var n = e.length, i1 = new Map, a = Array(16).fill(0), o = 0, c = r[t]; o < c.length; o++){
            var l = c[o], s = n, h = l.channel;
            if (h !== void 0) {
                l.type === "programChange" && (a[h] = l.programNumber);
                var p1 = a[h], u = "".concat(p1, " ").concat(h);
                i1.has(u) ? s = i1.get(u) : (s = n + i1.size, i1.set(u, s));
            }
            e[s] || e.push([]), e[s].push(l);
        }
        return e;
    }
});
var ae = fe1(ne()), { Header: ft1 , Track: dt1 , Midi: mt1  } = ae, { default: ie1 , ...Ze1 } = ae;
var A1 = (e, o, t)=>({
        endTime: o,
        insertTime: t,
        type: "exponentialRampToValue",
        value: e
    });
var h = (e, o, t)=>({
        endTime: o,
        insertTime: t,
        type: "linearRampToValue",
        value: e
    });
var V1 = (e, o)=>({
        startTime: o,
        type: "setValue",
        value: e
    });
var _1 = (e, o, t)=>({
        duration: t,
        startTime: o,
        type: "setValueCurve",
        values: e
    });
var T3 = (e, o, { startTime: t , target: n , timeConstant: i1  })=>n + (o - n) * Math.exp((t - e) / i1);
var s = (e)=>e.type === "exponentialRampToValue";
var l = (e)=>e.type === "linearRampToValue";
var u = (e)=>s(e) || l(e);
var d1 = (e)=>e.type === "setValue";
var a = (e)=>e.type === "setValueCurve";
var c1 = (e, o, t, n)=>{
    let i1 = e[o];
    return i1 === void 0 ? n : u(i1) || d1(i1) ? i1.value : a(i1) ? i1.values[i1.values.length - 1] : T3(t, c1(e, o - 1, i1.startTime, n), i1);
};
var g2 = (e, o, t, n, i1)=>t === void 0 ? [
        n.insertTime,
        i1
    ] : u(t) ? [
        t.endTime,
        t.value
    ] : d1(t) ? [
        t.startTime,
        t.value
    ] : a(t) ? [
        t.startTime + t.duration,
        t.values[t.values.length - 1]
    ] : [
        t.startTime,
        c1(e, o - 1, t.startTime, i1)
    ];
var x2 = (e)=>e.type === "cancelAndHold";
var v2 = (e)=>e.type === "cancelScheduledValues";
var p1 = (e)=>x2(e) || v2(e) ? e.cancelTime : s(e) || l(e) ? e.endTime : e.startTime;
var R2 = (e, o, t, { endTime: n , value: i1  })=>t === i1 ? i1 : 0 < t && 0 < i1 || t < 0 && i1 < 0 ? t * (i1 / t) ** ((e - o) / (n - o)) : 0;
var y1 = (e, o, t, { endTime: n , value: i1  })=>t + (e - o) / (n - o) * (i1 - t);
var L1 = (e, o)=>{
    let t = Math.floor(o), n = Math.ceil(o);
    return t === n ? e[t] : (1 - (o - t)) * e[t] + (1 - (n - o)) * e[n];
};
var H = (e, { duration: o , startTime: t , values: n  })=>{
    let i1 = (e - t) / o * (n.length - 1);
    return L1(n, i1);
};
var E3 = (e)=>e.type === "setTarget";
var C3 = class {
    constructor(o){
        this._automationEvents = [], this._currenTime = 0, this._defaultValue = o;
    }
    [Symbol.iterator]() {
        return this._automationEvents[Symbol.iterator]();
    }
    add(o) {
        let t = p1(o);
        if (x2(o) || v2(o)) {
            let n = this._automationEvents.findIndex((r)=>v2(o) && a(r) ? r.startTime + r.duration >= t : p1(r) >= t), i1 = this._automationEvents[n];
            if (n !== -1 && (this._automationEvents = this._automationEvents.slice(0, n)), x2(o)) {
                let r = this._automationEvents[this._automationEvents.length - 1];
                if (i1 !== void 0 && u(i1)) {
                    if (E3(r)) throw new Error("The internal list is malformed.");
                    let m = a(r) ? r.startTime + r.duration : p1(r), f = a(r) ? r.values[r.values.length - 1] : r.value, S1 = s(i1) ? R2(t, m, f, i1) : y1(t, m, f, i1), I = s(i1) ? A1(S1, t, this._currenTime) : h(S1, t, this._currenTime);
                    this._automationEvents.push(I);
                }
                r !== void 0 && E3(r) && this._automationEvents.push(V1(this.getValue(t), t)), r !== void 0 && a(r) && r.startTime + r.duration > t && (this._automationEvents[this._automationEvents.length - 1] = _1(new Float32Array([
                    6,
                    7
                ]), r.startTime, t - r.startTime));
            }
        } else {
            let n1 = this._automationEvents.findIndex((m)=>p1(m) > t), i11 = n1 === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[n1 - 1];
            if (i11 !== void 0 && a(i11) && p1(i11) + i11.duration > t) return !1;
            let r1 = s(o) ? A1(o.value, o.endTime, this._currenTime) : l(o) ? h(o.value, t, this._currenTime) : o;
            if (n1 === -1) this._automationEvents.push(r1);
            else {
                if (a(o) && t + o.duration > p1(this._automationEvents[n1])) return !1;
                this._automationEvents.splice(n1, 0, r1);
            }
        }
        return !0;
    }
    flush(o) {
        let t = this._automationEvents.findIndex((n)=>p1(n) > o);
        if (t > 1) {
            let n = this._automationEvents.slice(t - 1), i1 = n[0];
            E3(i1) && n.unshift(V1(c1(this._automationEvents, t - 2, i1.startTime, this._defaultValue), i1.startTime)), this._automationEvents = n;
        }
    }
    getValue(o) {
        if (this._automationEvents.length === 0) return this._defaultValue;
        let t = this._automationEvents.findIndex((m)=>p1(m) > o), n = this._automationEvents[t], i1 = (t === -1 ? this._automationEvents.length : t) - 1, r = this._automationEvents[i1];
        if (r !== void 0 && E3(r) && (n === void 0 || !u(n) || n.insertTime > o)) return T3(o, c1(this._automationEvents, i1 - 1, r.startTime, this._defaultValue), r);
        if (r !== void 0 && d1(r) && (n === void 0 || !u(n))) return r.value;
        if (r !== void 0 && a(r) && (n === void 0 || !u(n) || r.startTime + r.duration > o)) return o < r.startTime + r.duration ? H(o, r) : r.values[r.values.length - 1];
        if (r !== void 0 && u(r) && (n === void 0 || !u(n))) return r.value;
        if (n !== void 0 && s(n)) {
            let [m, f] = g2(this._automationEvents, i1, r, n, this._defaultValue);
            return R2(o, m, f, n);
        }
        if (n !== void 0 && l(n)) {
            let [m1, f1] = g2(this._automationEvents, i1, r, n, this._defaultValue);
            return y1(o, m1, f1, n);
        }
        return this._defaultValue;
    }
};
var O1 = (e)=>({
        cancelTime: e,
        type: "cancelAndHold"
    });
var w1 = (e)=>({
        cancelTime: e,
        type: "cancelScheduledValues"
    });
var M2 = (e, o)=>({
        endTime: o,
        type: "exponentialRampToValue",
        value: e
    });
var b = (e, o)=>({
        endTime: o,
        type: "linearRampToValue",
        value: e
    });
var P1 = (e, o, t)=>({
        startTime: o,
        target: e,
        timeConstant: t,
        type: "setTarget"
    });
var lr1 = ()=>new DOMException("", "AbortError");
var dr1 = (e)=>(r, t, [o, n, a], u)=>{
        e(r[n], [
            t,
            o,
            a
        ], (s)=>s[0] === t && s[1] === o, u);
    };
var fr1 = (e)=>(r, t, o)=>{
        let n = [];
        for(let a = 0; a < o.numberOfInputs; a += 1)n.push(new Set);
        e.set(r, {
            activeInputs: n,
            outputs: new Set,
            passiveInputs: new WeakMap,
            renderer: t
        });
    };
var mr1 = (e)=>(r, t)=>{
        e.set(r, {
            activeInputs: new Set,
            passiveInputs: new WeakMap,
            renderer: t
        });
    };
var _e1 = new WeakSet, gt1 = new WeakMap, ze = new WeakMap, vt1 = new WeakMap, mt2 = new WeakMap, Qe1 = new WeakMap, At1 = new WeakMap, ht1 = new WeakMap, xt1 = new WeakMap, Nt1 = new WeakMap;
var hr1 = {
    construct () {
        return hr1;
    }
}, xr1 = (e)=>{
    try {
        let r = new Proxy(e, hr1);
        new r;
    } catch  {
        return !1;
    }
    return !0;
};
var Nr = /^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/, Wt1 = (e, r)=>{
    let t = [], o = e.replace(/^[\s]+/, ""), n = o.match(Nr);
    for(; n !== null;){
        let a = n[1].slice(1, -1), u = n[0].replace(/([\s]+)?;?$/, "").replace(a, new URL(a, r).toString());
        t.push(u), o = o.slice(n[0].length).replace(/^[\s]+/, ""), n = o.match(Nr);
    }
    return [
        t.join(";"),
        o
    ];
};
var Cr1 = (e)=>{
    if (e !== void 0 && !Array.isArray(e)) throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.");
}, gr1 = (e)=>{
    if (!xr1(e)) throw new TypeError("The given value for processorCtor should be a constructor.");
    if (e.prototype === null || typeof e.prototype != "object") throw new TypeError("The given value for processorCtor should have a prototype.");
}, vr = (e, r, t, o, n, a, u, s, c, i1, p1, l, m)=>{
    let f = 0;
    return (d1, h, N = {
        credentials: "omit"
    })=>{
        let C = p1.get(d1);
        if (C !== void 0 && C.has(h)) return Promise.resolve();
        let y = i1.get(d1);
        if (y !== void 0) {
            let x1 = y.get(h);
            if (x1 !== void 0) return x1;
        }
        let O = a(d1), w = O.audioWorklet === void 0 ? n(h).then(([x1, g])=>{
            let [v, A1] = Wt1(x1, g), M = `${v};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${A1}
})})(window,'_AWGS')`;
            return t(M);
        }).then(()=>{
            let x1 = m._AWGS.pop();
            if (x1 === void 0) throw new SyntaxError;
            o(O.currentTime, O.sampleRate, ()=>x1(class {
                }, void 0, (g, v)=>{
                    if (g.trim() === "") throw r();
                    let A1 = xt1.get(O);
                    if (A1 !== void 0) {
                        if (A1.has(g)) throw r();
                        gr1(v), Cr1(v.parameterDescriptors), A1.set(g, v);
                    } else gr1(v), Cr1(v.parameterDescriptors), xt1.set(O, new Map([
                        [
                            g,
                            v
                        ]
                    ]));
                }, O.sampleRate, void 0, void 0));
        }) : Promise.all([
            n(h),
            Promise.resolve(e(l, l))
        ]).then(([[x1, g], v])=>{
            let A1 = f + 1;
            f = A1;
            let [M, _] = Wt1(x1, g), E = `${M};((AudioWorkletProcessor,registerProcessor)=>{${_}
})(${v ? "AudioWorkletProcessor" : "class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}"},(n,p)=>registerProcessor(n,class extends p{${v ? "" : "__c = (a) => a.forEach(e=>this.__b.add(e.buffer));"}process(i,o,p){${v ? "" : "i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));"}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${A1}',class extends AudioWorkletProcessor{process(){return !1}})`, k = new Blob([
                E
            ], {
                type: "application/javascript; charset=utf-8"
            }), P = URL.createObjectURL(k);
            return O.audioWorklet.addModule(P, N).then(()=>{
                if (s(O)) return O;
                let F = u(O);
                return F.audioWorklet.addModule(P, N).then(()=>F);
            }).then((F)=>{
                if (c === null) throw new SyntaxError;
                try {
                    new c(F, `__sac${A1}`);
                } catch  {
                    throw new SyntaxError;
                }
            }).finally(()=>URL.revokeObjectURL(P));
        });
        return y === void 0 ? i1.set(d1, new Map([
            [
                h,
                w
            ]
        ])) : y.set(h, w), w.then(()=>{
            let x1 = p1.get(d1);
            x1 === void 0 ? p1.set(d1, new Set([
                h
            ])) : x1.add(h);
        }).finally(()=>{
            let x1 = i1.get(d1);
            x1 !== void 0 && x1.delete(h);
        }), w;
    };
};
var ne1 = (e, r)=>{
    let t = e.get(r);
    if (t === void 0) throw new Error("A value with the given key could not be found.");
    return t;
};
var Fe = (e, r)=>{
    let t = Array.from(e).filter(r);
    if (t.length > 1) throw Error("More than one element was found.");
    if (t.length === 0) throw Error("No element was found.");
    let [o] = t;
    return e.delete(o), o;
};
var yt1 = (e, r, t, o)=>{
    let n = ne1(e, r), a = Fe(n, (u)=>u[0] === t && u[1] === o);
    return n.size === 0 && e.delete(r), a;
};
var Oe1 = (e)=>ne1(At1, e);
var ve1 = (e)=>{
    if (_e1.has(e)) throw new Error("The AudioNode is already stored.");
    _e1.add(e), Oe1(e).forEach((r)=>r(!0));
};
var St1 = (e)=>"port" in e;
var Ie1 = (e)=>{
    if (!_e1.has(e)) throw new Error("The AudioNode is not stored.");
    _e1.delete(e), Oe1(e).forEach((r)=>r(!1));
};
var Ct1 = (e, r)=>{
    !St1(e) && r.every((t)=>t.size === 0) && Ie1(e);
};
var Ar = (e, r, t, o, n, a, u, s, c, i1, p1, l, m)=>{
    let f = new WeakMap;
    return (d1, h, N, C, y)=>{
        let { activeInputs: O , passiveInputs: w  } = a(h), { outputs: x1  } = a(d1), g = s(d1), v = (A1)=>{
            let M = c(h), _ = c(d1);
            if (A1) {
                let I = yt1(w, d1, N, C);
                e(O, d1, I, !1), !y && !l(d1) && t(_, M, N, C), m(h) && ve1(h);
            } else {
                let I1 = o(O, d1, N, C);
                r(w, C, I1, !1), !y && !l(d1) && n(_, M, N, C);
                let S1 = u(h);
                if (S1 === 0) p1(h) && Ct1(h, O);
                else {
                    let b = f.get(h);
                    b !== void 0 && clearTimeout(b), f.set(h, setTimeout(()=>{
                        p1(h) && Ct1(h, O);
                    }, S1 * 1e3));
                }
            }
        };
        return i1(x1, [
            h,
            N,
            C
        ], (A1)=>A1[0] === h && A1[1] === N && A1[2] === C, !0) ? (g.add(v), p1(d1) ? e(O, d1, [
            N,
            C,
            v
        ], !0) : r(w, C, [
            d1,
            N,
            v
        ], !0), !0) : !1;
    };
};
var yr1 = (e)=>(r, t, [o, n, a], u)=>{
        let s = r.get(o);
        s === void 0 ? r.set(o, new Set([
            [
                n,
                t,
                a
            ]
        ])) : e(s, [
            n,
            t,
            a
        ], (c)=>c[0] === n && c[1] === t, u);
    };
var Sr1 = (e)=>(r, t)=>{
        let o = e(r, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            gain: 0
        });
        t.connect(o).connect(r.destination);
        let n = ()=>{
            t.removeEventListener("ended", n), t.disconnect(o), o.disconnect();
        };
        t.addEventListener("ended", n);
    };
var wr1 = (e)=>(r, t)=>{
        e(r).add(t);
    };
var ma = {
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    fftSize: 2048,
    maxDecibels: -30,
    minDecibels: -100,
    smoothingTimeConstant: .8
}, _r1 = (e, r, t, o, n, a)=>class extends e {
        constructor(s, c){
            let i1 = n(s), p1 = {
                ...ma,
                ...c
            }, l = o(i1, p1), m = a(i1) ? r() : null;
            super(s, !1, l, m), this._nativeAnalyserNode = l;
        }
        get fftSize() {
            return this._nativeAnalyserNode.fftSize;
        }
        set fftSize(s) {
            this._nativeAnalyserNode.fftSize = s;
        }
        get frequencyBinCount() {
            return this._nativeAnalyserNode.frequencyBinCount;
        }
        get maxDecibels() {
            return this._nativeAnalyserNode.maxDecibels;
        }
        set maxDecibels(s) {
            let c = this._nativeAnalyserNode.maxDecibels;
            if (this._nativeAnalyserNode.maxDecibels = s, !(s > this._nativeAnalyserNode.minDecibels)) throw this._nativeAnalyserNode.maxDecibels = c, t();
        }
        get minDecibels() {
            return this._nativeAnalyserNode.minDecibels;
        }
        set minDecibels(s) {
            let c = this._nativeAnalyserNode.minDecibels;
            if (this._nativeAnalyserNode.minDecibels = s, !(this._nativeAnalyserNode.maxDecibels > s)) throw this._nativeAnalyserNode.minDecibels = c, t();
        }
        get smoothingTimeConstant() {
            return this._nativeAnalyserNode.smoothingTimeConstant;
        }
        set smoothingTimeConstant(s) {
            this._nativeAnalyserNode.smoothingTimeConstant = s;
        }
        getByteFrequencyData(s) {
            this._nativeAnalyserNode.getByteFrequencyData(s);
        }
        getByteTimeDomainData(s) {
            this._nativeAnalyserNode.getByteTimeDomainData(s);
        }
        getFloatFrequencyData(s) {
            this._nativeAnalyserNode.getFloatFrequencyData(s);
        }
        getFloatTimeDomainData(s) {
            this._nativeAnalyserNode.getFloatTimeDomainData(s);
        }
    };
var q1 = (e, r)=>e.context === r;
var Or = (e, r, t)=>()=>{
        let o = new WeakMap, n = async (a, u)=>{
            let s = r(a);
            if (!q1(s, u)) {
                let i1 = {
                    channelCount: s.channelCount,
                    channelCountMode: s.channelCountMode,
                    channelInterpretation: s.channelInterpretation,
                    fftSize: s.fftSize,
                    maxDecibels: s.maxDecibels,
                    minDecibels: s.minDecibels,
                    smoothingTimeConstant: s.smoothingTimeConstant
                };
                s = e(u, i1);
            }
            return o.set(u, s), await t(a, u, s), s;
        };
        return {
            render (a, u) {
                let s = o.get(u);
                return s !== void 0 ? Promise.resolve(s) : n(a, u);
            }
        };
    };
var He = (e)=>{
    try {
        e.copyToChannel(new Float32Array(1), 0, -1);
    } catch  {
        return !1;
    }
    return !0;
};
var Ne1 = ()=>new DOMException("", "IndexSizeError");
var $e1 = (e)=>{
    e.getChannelData = ((r)=>(t)=>{
            try {
                return r.call(e, t);
            } catch (o) {
                throw o.code === 12 ? Ne1() : o;
            }
        })(e.getChannelData);
};
var ha = {
    numberOfChannels: 1
}, Ir = (e, r, t, o, n, a, u, s)=>{
    let c = null;
    return class Mr {
        constructor(p1){
            if (n === null) throw new Error("Missing the native OfflineAudioContext constructor.");
            let { length: l , numberOfChannels: m , sampleRate: f  } = {
                ...ha,
                ...p1
            };
            c === null && (c = new n(1, 1, 44100));
            let d1 = o !== null && r(a, a) ? new o({
                length: l,
                numberOfChannels: m,
                sampleRate: f
            }) : c.createBuffer(m, l, f);
            if (d1.numberOfChannels === 0) throw t();
            return typeof d1.copyFromChannel != "function" ? (u(d1), $e1(d1)) : r(He, ()=>He(d1)) || s(d1), e.add(d1), d1;
        }
        static [Symbol.hasInstance](p1) {
            return p1 !== null && typeof p1 == "object" && Object.getPrototypeOf(p1) === Mr.prototype || e.has(p1);
        }
    };
};
var re = -34028234663852886e22, te2 = -re;
var le2 = (e)=>_e1.has(e);
var xa = {
    buffer: null,
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    loop: !1,
    loopEnd: 0,
    loopStart: 0,
    playbackRate: 1
}, Er1 = (e, r, t, o, n, a, u, s)=>class extends e {
        constructor(i1, p1){
            let l = a(i1), m = {
                ...xa,
                ...p1
            }, f = n(l, m), d1 = u(l), h = d1 ? r() : null;
            super(i1, !1, f, h), this._audioBufferSourceNodeRenderer = h, this._isBufferNullified = !1, this._isBufferSet = m.buffer !== null, this._nativeAudioBufferSourceNode = f, this._onended = null, this._playbackRate = t(this, d1, f.playbackRate, te2, re);
        }
        get buffer() {
            return this._isBufferNullified ? null : this._nativeAudioBufferSourceNode.buffer;
        }
        set buffer(i1) {
            if (this._nativeAudioBufferSourceNode.buffer = i1, i1 !== null) {
                if (this._isBufferSet) throw o();
                this._isBufferSet = !0;
            }
        }
        get loop() {
            return this._nativeAudioBufferSourceNode.loop;
        }
        set loop(i1) {
            this._nativeAudioBufferSourceNode.loop = i1;
        }
        get loopEnd() {
            return this._nativeAudioBufferSourceNode.loopEnd;
        }
        set loopEnd(i1) {
            this._nativeAudioBufferSourceNode.loopEnd = i1;
        }
        get loopStart() {
            return this._nativeAudioBufferSourceNode.loopStart;
        }
        set loopStart(i1) {
            this._nativeAudioBufferSourceNode.loopStart = i1;
        }
        get onended() {
            return this._onended;
        }
        set onended(i1) {
            let p1 = typeof i1 == "function" ? s(this, i1) : null;
            this._nativeAudioBufferSourceNode.onended = p1;
            let l = this._nativeAudioBufferSourceNode.onended;
            this._onended = l !== null && l === p1 ? i1 : l;
        }
        get playbackRate() {
            return this._playbackRate;
        }
        start(i1 = 0, p1 = 0, l) {
            if (this._nativeAudioBufferSourceNode.start(i1, p1, l), this._audioBufferSourceNodeRenderer !== null && (this._audioBufferSourceNodeRenderer.start = l === void 0 ? [
                i1,
                p1
            ] : [
                i1,
                p1,
                l
            ]), this.context.state !== "closed") {
                ve1(this);
                let m = ()=>{
                    this._nativeAudioBufferSourceNode.removeEventListener("ended", m), le2(this) && Ie1(this);
                };
                this._nativeAudioBufferSourceNode.addEventListener("ended", m);
            }
        }
        stop(i1 = 0) {
            this._nativeAudioBufferSourceNode.stop(i1), this._audioBufferSourceNodeRenderer !== null && (this._audioBufferSourceNodeRenderer.stop = i1);
        }
    };
var Tr = (e, r, t, o, n)=>()=>{
        let a = new WeakMap, u = null, s = null, c = async (i1, p1)=>{
            let l = t(i1), m = q1(l, p1);
            if (!m) {
                let f = {
                    buffer: l.buffer,
                    channelCount: l.channelCount,
                    channelCountMode: l.channelCountMode,
                    channelInterpretation: l.channelInterpretation,
                    loop: l.loop,
                    loopEnd: l.loopEnd,
                    loopStart: l.loopStart,
                    playbackRate: l.playbackRate.value
                };
                l = r(p1, f), u !== null && l.start(...u), s !== null && l.stop(s);
            }
            return a.set(p1, l), m ? await e(p1, i1.playbackRate, l.playbackRate) : await o(p1, i1.playbackRate, l.playbackRate), await n(i1, p1, l), l;
        };
        return {
            set start (i){
                u = i;
            },
            set stop (i){
                s = i;
            },
            render (i1, p1) {
                let l = a.get(p1);
                return l !== void 0 ? Promise.resolve(l) : c(i1, p1);
            }
        };
    };
var br1 = (e)=>"playbackRate" in e;
var Pr = (e)=>"frequency" in e && "gain" in e;
var Fr = (e)=>"offset" in e;
var Dr = (e)=>!("frequency" in e) && "gain" in e;
var Rr1 = (e)=>"detune" in e && "frequency" in e;
var kr = (e)=>"pan" in e;
var ae1 = (e)=>ne1(gt1, e);
var De1 = (e)=>ne1(vt1, e);
var wt1 = (e, r)=>{
    let { activeInputs: t  } = ae1(e);
    t.forEach((n)=>n.forEach(([a])=>{
            r.includes(e) || wt1(a, [
                ...r,
                e
            ]);
        }));
    let o = br1(e) ? [
        e.playbackRate
    ] : St1(e) ? Array.from(e.parameters.values()) : Pr(e) ? [
        e.Q,
        e.detune,
        e.frequency,
        e.gain
    ] : Fr(e) ? [
        e.offset
    ] : Dr(e) ? [
        e.gain
    ] : Rr1(e) ? [
        e.detune,
        e.frequency
    ] : kr(e) ? [
        e.pan
    ] : [];
    for (let n of o){
        let a = De1(n);
        a !== void 0 && a.activeInputs.forEach(([u])=>wt1(u, r));
    }
    le2(e) && Ie1(e);
};
var Re1 = (e)=>{
    wt1(e.destination, []);
};
var _t1 = (e)=>e === void 0 || typeof e == "number" || typeof e == "string" && (e === "balanced" || e === "interactive" || e === "playback");
var Wr = (e, r, t, o, n, a, u, s, c)=>class extends e {
        constructor(p1 = {}){
            if (c === null) throw new Error("Missing the native AudioContext constructor.");
            let l;
            try {
                l = new c(p1);
            } catch (d1) {
                throw d1.code === 12 && d1.message === "sampleRate is not in range" ? t() : d1;
            }
            if (l === null) throw o();
            if (!_t1(p1.latencyHint)) throw new TypeError(`The provided value '${p1.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
            if (p1.sampleRate !== void 0 && l.sampleRate !== p1.sampleRate) throw t();
            super(l, 2);
            let { latencyHint: m  } = p1, { sampleRate: f  } = l;
            if (this._baseLatency = typeof l.baseLatency == "number" ? l.baseLatency : m === "balanced" ? 512 / f : m === "interactive" || m === void 0 ? 256 / f : m === "playback" ? 1024 / f : Math.max(2, Math.min(128, Math.round(m * f / 128))) * 128 / f, this._nativeAudioContext = l, c.name === "webkitAudioContext" ? (this._nativeGainNode = l.createGain(), this._nativeOscillatorNode = l.createOscillator(), this._nativeGainNode.gain.value = 1e-37, this._nativeOscillatorNode.connect(this._nativeGainNode).connect(l.destination), this._nativeOscillatorNode.start()) : (this._nativeGainNode = null, this._nativeOscillatorNode = null), this._state = null, l.state === "running") {
                this._state = "suspended";
                let d2 = ()=>{
                    this._state === "suspended" && (this._state = null), l.removeEventListener("statechange", d2);
                };
                l.addEventListener("statechange", d2);
            }
        }
        get baseLatency() {
            return this._baseLatency;
        }
        get state() {
            return this._state !== null ? this._state : this._nativeAudioContext.state;
        }
        close() {
            return this.state === "closed" ? this._nativeAudioContext.close().then(()=>{
                throw r();
            }) : (this._state === "suspended" && (this._state = null), this._nativeAudioContext.close().then(()=>{
                this._nativeGainNode !== null && this._nativeOscillatorNode !== null && (this._nativeOscillatorNode.stop(), this._nativeGainNode.disconnect(), this._nativeOscillatorNode.disconnect()), Re1(this);
            }));
        }
        createMediaElementSource(p1) {
            return new n(this, {
                mediaElement: p1
            });
        }
        createMediaStreamDestination() {
            return new a(this);
        }
        createMediaStreamSource(p1) {
            return new u(this, {
                mediaStream: p1
            });
        }
        createMediaStreamTrackSource(p1) {
            return new s(this, {
                mediaStreamTrack: p1
            });
        }
        resume() {
            return this._state === "suspended" ? new Promise((p1, l)=>{
                let m = ()=>{
                    this._nativeAudioContext.removeEventListener("statechange", m), this._nativeAudioContext.state === "running" ? p1() : this.resume().then(p1, l);
                };
                this._nativeAudioContext.addEventListener("statechange", m);
            }) : this._nativeAudioContext.resume().catch((p1)=>{
                throw p1 === void 0 || p1.code === 15 ? r() : p1;
            });
        }
        suspend() {
            return this._nativeAudioContext.suspend().catch((p1)=>{
                throw p1 === void 0 ? r() : p1;
            });
        }
    };
var Lr1 = (e, r, t, o, n, a, u, s)=>class extends e {
        constructor(i1, p1){
            let l = a(i1), m = u(l), f = n(l, p1, m), d1 = m ? r(s) : null;
            super(i1, !1, f, d1), this._isNodeOfNativeOfflineAudioContext = m, this._nativeAudioDestinationNode = f;
        }
        get channelCount() {
            return this._nativeAudioDestinationNode.channelCount;
        }
        set channelCount(i1) {
            if (this._isNodeOfNativeOfflineAudioContext) throw o();
            if (i1 > this._nativeAudioDestinationNode.maxChannelCount) throw t();
            this._nativeAudioDestinationNode.channelCount = i1;
        }
        get channelCountMode() {
            return this._nativeAudioDestinationNode.channelCountMode;
        }
        set channelCountMode(i1) {
            if (this._isNodeOfNativeOfflineAudioContext) throw o();
            this._nativeAudioDestinationNode.channelCountMode = i1;
        }
        get maxChannelCount() {
            return this._nativeAudioDestinationNode.maxChannelCount;
        }
    };
var Br1 = (e)=>{
    let r = new WeakMap, t = async (o, n)=>{
        let a = n.destination;
        return r.set(n, a), await e(o, n, a), a;
    };
    return {
        render (o, n) {
            let a = r.get(n);
            return a !== void 0 ? Promise.resolve(a) : t(o, n);
        }
    };
};
var Vr = (e, r, t, o, n, a, u, s)=>(c, i1)=>{
        let p1 = i1.listener, l = ()=>{
            let x1 = new Float32Array(1), g = r(i1, {
                channelCount: 1,
                channelCountMode: "explicit",
                channelInterpretation: "speakers",
                numberOfInputs: 9
            }), v = u(i1), A1 = !1, M = [
                0,
                0,
                -1,
                0,
                1,
                0
            ], _ = [
                0,
                0,
                0
            ], I = ()=>{
                if (A1) return;
                A1 = !0;
                let k = o(i1, 256, 9, 0);
                k.onaudioprocess = ({ inputBuffer: P  })=>{
                    let F = [
                        a(P, x1, 0),
                        a(P, x1, 1),
                        a(P, x1, 2),
                        a(P, x1, 3),
                        a(P, x1, 4),
                        a(P, x1, 5)
                    ];
                    F.some((R, B)=>R !== M[B]) && (p1.setOrientation(...F), M = F);
                    let V = [
                        a(P, x1, 6),
                        a(P, x1, 7),
                        a(P, x1, 8)
                    ];
                    V.some((R, B)=>R !== _[B]) && (p1.setPosition(...V), _ = V);
                }, g.connect(k);
            }, S1 = (k)=>(P)=>{
                    P !== M[k] && (M[k] = P, p1.setOrientation(...M));
                }, b = (k)=>(P)=>{
                    P !== _[k] && (_[k] = P, p1.setPosition(..._));
                }, E = (k, P, F)=>{
                let V = t(i1, {
                    channelCount: 1,
                    channelCountMode: "explicit",
                    channelInterpretation: "discrete",
                    offset: P
                });
                V.connect(g, 0, k), V.start(), Object.defineProperty(V.offset, "defaultValue", {
                    get () {
                        return P;
                    }
                });
                let R = e({
                    context: c
                }, v, V.offset, te2, re);
                return s(R, "value", (B)=>()=>B.call(R), (B)=>(L)=>{
                        try {
                            B.call(R, L);
                        } catch (Y) {
                            if (Y.code !== 9) throw Y;
                        }
                        I(), v && F(L);
                    }), R.cancelAndHoldAtTime = ((B)=>v ? ()=>{
                        throw n();
                    } : (...L)=>{
                        let Y = B.apply(R, L);
                        return I(), Y;
                    })(R.cancelAndHoldAtTime), R.cancelScheduledValues = ((B)=>v ? ()=>{
                        throw n();
                    } : (...L)=>{
                        let Y = B.apply(R, L);
                        return I(), Y;
                    })(R.cancelScheduledValues), R.exponentialRampToValueAtTime = ((B)=>v ? ()=>{
                        throw n();
                    } : (...L)=>{
                        let Y = B.apply(R, L);
                        return I(), Y;
                    })(R.exponentialRampToValueAtTime), R.linearRampToValueAtTime = ((B)=>v ? ()=>{
                        throw n();
                    } : (...L)=>{
                        let Y = B.apply(R, L);
                        return I(), Y;
                    })(R.linearRampToValueAtTime), R.setTargetAtTime = ((B)=>v ? ()=>{
                        throw n();
                    } : (...L)=>{
                        let Y = B.apply(R, L);
                        return I(), Y;
                    })(R.setTargetAtTime), R.setValueAtTime = ((B)=>v ? ()=>{
                        throw n();
                    } : (...L)=>{
                        let Y = B.apply(R, L);
                        return I(), Y;
                    })(R.setValueAtTime), R.setValueCurveAtTime = ((B)=>v ? ()=>{
                        throw n();
                    } : (...L)=>{
                        let Y = B.apply(R, L);
                        return I(), Y;
                    })(R.setValueCurveAtTime), R;
            };
            return {
                forwardX: E(0, 0, S1(0)),
                forwardY: E(1, 0, S1(1)),
                forwardZ: E(2, -1, S1(2)),
                positionX: E(6, 0, b(0)),
                positionY: E(7, 0, b(1)),
                positionZ: E(8, 0, b(2)),
                upX: E(3, 0, S1(3)),
                upY: E(4, 1, S1(4)),
                upZ: E(5, 0, S1(5))
            };
        }, { forwardX: m , forwardY: f , forwardZ: d1 , positionX: h , positionY: N , positionZ: C , upX: y , upY: O , upZ: w  } = p1.forwardX === void 0 ? l() : p1;
        return {
            get forwardX () {
                return m;
            },
            get forwardY () {
                return f;
            },
            get forwardZ () {
                return d1;
            },
            get positionX () {
                return h;
            },
            get positionY () {
                return N;
            },
            get positionZ () {
                return C;
            },
            get upX () {
                return y;
            },
            get upY () {
                return O;
            },
            get upZ () {
                return w;
            }
        };
    };
var Ge = (e)=>"context" in e;
var ke1 = (e)=>Ge(e[0]);
var Ae1 = (e, r, t, o)=>{
    for (let n of e)if (t(n)) {
        if (o) return !1;
        throw Error("The set contains at least one similar element.");
    }
    return e.add(r), !0;
};
var Lt1 = (e, r, [t, o], n)=>{
    Ae1(e, [
        r,
        t,
        o
    ], (a)=>a[0] === r && a[1] === t, n);
};
var Bt1 = (e, [r, t, o], n)=>{
    let a = e.get(r);
    a === void 0 ? e.set(r, new Set([
        [
            t,
            o
        ]
    ])) : Ae1(a, [
        t,
        o
    ], (u)=>u[0] === t, n);
};
var Ce1 = (e)=>"inputs" in e;
var Ke1 = (e, r, t, o)=>{
    if (Ce1(r)) {
        let n = r.inputs[o];
        return e.connect(n, t, 0), [
            n,
            t,
            0
        ];
    }
    return e.connect(r, t, o), [
        r,
        t,
        o
    ];
};
var Vt = (e, r, t)=>{
    for (let o of e)if (o[0] === r && o[1] === t) return e.delete(o), o;
    return null;
};
var Gr = (e, r, t)=>Fe(e, (o)=>o[0] === r && o[1] === t);
var Gt1 = (e, r)=>{
    if (!Oe1(e).delete(r)) throw new Error("Missing the expected event listener.");
};
var Ut1 = (e, r, t)=>{
    let o = ne1(e, r), n = Fe(o, (a)=>a[0] === t);
    return o.size === 0 && e.delete(r), n;
};
var Je = (e, r, t, o)=>{
    Ce1(r) ? e.disconnect(r.inputs[o], t, 0) : e.disconnect(r, t, o);
};
var z1 = (e)=>ne1(ze, e);
var Ue1 = (e)=>ne1(mt2, e);
var Te1 = (e)=>ht1.has(e);
var et1 = (e)=>!_e1.has(e);
var qt1 = (e, r)=>new Promise((t)=>{
        if (r !== null) t(!0);
        else {
            let o = e.createScriptProcessor(256, 1, 1), n = e.createGain(), a = e.createBuffer(1, 2, 44100), u = a.getChannelData(0);
            u[0] = 1, u[1] = 1;
            let s = e.createBufferSource();
            s.buffer = a, s.loop = !0, s.connect(o).connect(e.destination), s.connect(n), s.disconnect(n), o.onaudioprocess = (c)=>{
                let i1 = c.inputBuffer.getChannelData(0);
                Array.prototype.some.call(i1, (p1)=>p1 === 1) ? t(!0) : t(!1), s.stop(), o.onaudioprocess = null, s.disconnect(o), o.disconnect(e.destination);
            }, s.start();
        }
    });
var Ot1 = (e, r)=>{
    let t = new Map;
    for (let o of e)for (let n of o){
        let a = t.get(n);
        t.set(n, a === void 0 ? 1 : a + 1);
    }
    t.forEach((o, n)=>r(n, o));
};
var qe = (e)=>"context" in e;
var Ur = (e)=>{
    let r = new Map;
    e.connect = ((t)=>(o, n = 0, a = 0)=>{
            let u = qe(o) ? t(o, n, a) : t(o, n), s = r.get(o);
            return s === void 0 ? r.set(o, [
                {
                    input: a,
                    output: n
                }
            ]) : s.every((c)=>c.input !== a || c.output !== n) && s.push({
                input: a,
                output: n
            }), u;
        })(e.connect.bind(e)), e.disconnect = ((t)=>(o, n, a)=>{
            if (t.apply(e), o === void 0) r.clear();
            else if (typeof o == "number") for (let [u, s] of r){
                let c = s.filter((i1)=>i1.output !== o);
                c.length === 0 ? r.delete(u) : r.set(u, c);
            }
            else if (r.has(o)) if (n === void 0) r.delete(o);
            else {
                let u1 = r.get(o);
                if (u1 !== void 0) {
                    let s1 = u1.filter((c)=>c.output !== n && (c.input !== a || a === void 0));
                    s1.length === 0 ? r.delete(o) : r.set(o, s1);
                }
            }
            for (let [u2, s2] of r)s2.forEach((c)=>{
                qe(u2) ? e.connect(u2, c.output, c.input) : e.connect(u2, c.output);
            });
        })(e.disconnect);
};
var Na = (e, r, t, o)=>{
    let { activeInputs: n , passiveInputs: a  } = De1(r), { outputs: u  } = ae1(e), s = Oe1(e), c = (i1)=>{
        let p1 = z1(e), l = Ue1(r);
        if (i1) {
            let m = Ut1(a, e, t);
            Lt1(n, e, m, !1), !o && !Te1(e) && p1.connect(l, t);
        } else {
            let m1 = Gr(n, e, t);
            Bt1(a, m1, !1), !o && !Te1(e) && p1.disconnect(l, t);
        }
    };
    return Ae1(u, [
        r,
        t
    ], (i1)=>i1[0] === r && i1[1] === t, !0) ? (s.add(c), le2(e) ? Lt1(n, e, [
        t,
        c
    ], !0) : Bt1(a, [
        e,
        t,
        c
    ], !0), !0) : !1;
}, Ca = (e, r, t, o)=>{
    let { activeInputs: n , passiveInputs: a  } = ae1(r), u = Vt(n[o], e, t);
    return u === null ? [
        yt1(a, e, t, o)[2],
        !1
    ] : [
        u[2],
        !0
    ];
}, ga = (e, r, t)=>{
    let { activeInputs: o , passiveInputs: n  } = De1(r), a = Vt(o, e, t);
    return a === null ? [
        Ut1(n, e, t)[1],
        !1
    ] : [
        a[2],
        !0
    ];
}, jt1 = (e, r, t, o, n)=>{
    let [a, u] = Ca(e, t, o, n);
    if (a !== null && (Gt1(e, a), u && !r && !Te1(e) && Je(z1(e), z1(t), o, n)), le2(t)) {
        let { activeInputs: s  } = ae1(t);
        Ct1(t, s);
    }
}, Zt1 = (e, r, t, o)=>{
    let [n, a] = ga(e, t, o);
    n !== null && (Gt1(e, n), a && !r && !Te1(e) && z1(e).disconnect(Ue1(t), o));
}, va = (e, r)=>{
    let t = ae1(e), o = [];
    for (let n of t.outputs)ke1(n) ? jt1(e, r, ...n) : Zt1(e, r, ...n), o.push(n[0]);
    return t.outputs.clear(), o;
}, Aa = (e, r, t)=>{
    let o = ae1(e), n = [];
    for (let a of o.outputs)a[1] === t && (ke1(a) ? jt1(e, r, ...a) : Zt1(e, r, ...a), n.push(a[0]), o.outputs.delete(a));
    return n;
}, ya = (e, r, t, o, n)=>{
    let a = ae1(e);
    return Array.from(a.outputs).filter((u)=>u[0] === t && (o === void 0 || u[1] === o) && (n === void 0 || u[2] === n)).map((u)=>(ke1(u) ? jt1(e, r, ...u) : Zt1(e, r, ...u), a.outputs.delete(u), u[0]));
}, qr = (e, r, t, o, n, a, u, s, c, i1, p1, l, m, f, d1, h)=>class extends i1 {
        constructor(C, y, O, w){
            super(O), this._context = C, this._nativeAudioNode = O;
            let x1 = p1(C);
            l(x1) && t(qt1, ()=>qt1(x1, h)) !== !0 && Ur(O), ze.set(this, O), At1.set(this, new Set), C.state !== "closed" && y && ve1(this), e(this, w, O);
        }
        get channelCount() {
            return this._nativeAudioNode.channelCount;
        }
        set channelCount(C) {
            this._nativeAudioNode.channelCount = C;
        }
        get channelCountMode() {
            return this._nativeAudioNode.channelCountMode;
        }
        set channelCountMode(C) {
            this._nativeAudioNode.channelCountMode = C;
        }
        get channelInterpretation() {
            return this._nativeAudioNode.channelInterpretation;
        }
        set channelInterpretation(C) {
            this._nativeAudioNode.channelInterpretation = C;
        }
        get context() {
            return this._context;
        }
        get numberOfInputs() {
            return this._nativeAudioNode.numberOfInputs;
        }
        get numberOfOutputs() {
            return this._nativeAudioNode.numberOfOutputs;
        }
        connect(C, y = 0, O = 0) {
            if (y < 0 || y >= this._nativeAudioNode.numberOfOutputs) throw n();
            let w = p1(this._context), x1 = d1(w);
            if (m(C) || f(C)) throw a();
            if (Ge(C)) {
                let A1 = z1(C);
                try {
                    let _ = Ke1(this._nativeAudioNode, A1, y, O), I = et1(this);
                    (x1 || I) && this._nativeAudioNode.disconnect(..._), this.context.state !== "closed" && !I && et1(C) && ve1(C);
                } catch (_1) {
                    throw _1.code === 12 ? a() : _1;
                }
                if (r(this, C, y, O, x1)) {
                    let _2 = c([
                        this
                    ], C);
                    Ot1(_2, o(x1));
                }
                return C;
            }
            let g = Ue1(C);
            if (g.name === "playbackRate" && g.maxValue === 1024) throw u();
            try {
                this._nativeAudioNode.connect(g, y), (x1 || et1(this)) && this._nativeAudioNode.disconnect(g, y);
            } catch (A2) {
                throw A2.code === 12 ? a() : A2;
            }
            if (Na(this, C, y, x1)) {
                let A3 = c([
                    this
                ], C);
                Ot1(A3, o(x1));
            }
        }
        disconnect(C, y, O) {
            let w, x1 = p1(this._context), g = d1(x1);
            if (C === void 0) w = va(this, g);
            else if (typeof C == "number") {
                if (C < 0 || C >= this.numberOfOutputs) throw n();
                w = Aa(this, g, C);
            } else {
                if (y !== void 0 && (y < 0 || y >= this.numberOfOutputs) || Ge(C) && O !== void 0 && (O < 0 || O >= C.numberOfInputs)) throw n();
                if (w = ya(this, g, C, y, O), w.length === 0) throw a();
            }
            for (let v of w){
                let A1 = c([
                    this
                ], v);
                Ot1(A1, s);
            }
        }
    };
var jr = (e, r, t, o, n, a, u, s, c, i1, p1, l, m)=>(f, d1, h, N = null, C = null)=>{
        let y = new C3(h.defaultValue), O = d1 ? o(y) : null, w = {
            get defaultValue () {
                return h.defaultValue;
            },
            get maxValue () {
                return N === null ? h.maxValue : N;
            },
            get minValue () {
                return C === null ? h.minValue : C;
            },
            get value () {
                return h.value;
            },
            set value (x){
                h.value = x, w.setValueAtTime(x, f.context.currentTime);
            },
            cancelAndHoldAtTime (x1) {
                if (typeof h.cancelAndHoldAtTime == "function") O === null && y.flush(f.context.currentTime), y.add(n(x1)), h.cancelAndHoldAtTime(x1);
                else {
                    let g = Array.from(y).pop();
                    O === null && y.flush(f.context.currentTime), y.add(n(x1));
                    let v = Array.from(y).pop();
                    h.cancelScheduledValues(x1), g !== v && v !== void 0 && (v.type === "exponentialRampToValue" ? h.exponentialRampToValueAtTime(v.value, v.endTime) : v.type === "linearRampToValue" ? h.linearRampToValueAtTime(v.value, v.endTime) : v.type === "setValue" ? h.setValueAtTime(v.value, v.startTime) : v.type === "setValueCurve" && h.setValueCurveAtTime(v.values, v.startTime, v.duration));
                }
                return w;
            },
            cancelScheduledValues (x1) {
                return O === null && y.flush(f.context.currentTime), y.add(a(x1)), h.cancelScheduledValues(x1), w;
            },
            exponentialRampToValueAtTime (x1, g) {
                if (x1 === 0) throw new RangeError;
                if (!Number.isFinite(g) || g < 0) throw new RangeError;
                return O === null && y.flush(f.context.currentTime), y.add(u(x1, g)), h.exponentialRampToValueAtTime(x1, g), w;
            },
            linearRampToValueAtTime (x1, g) {
                return O === null && y.flush(f.context.currentTime), y.add(s(x1, g)), h.linearRampToValueAtTime(x1, g), w;
            },
            setTargetAtTime (x1, g, v) {
                return O === null && y.flush(f.context.currentTime), y.add(c(x1, g, v)), h.setTargetAtTime(x1, g, v), w;
            },
            setValueAtTime (x1, g) {
                return O === null && y.flush(f.context.currentTime), y.add(i1(x1, g)), h.setValueAtTime(x1, g), w;
            },
            setValueCurveAtTime (x1, g, v) {
                let A1 = x1 instanceof Float32Array ? x1 : new Float32Array(x1);
                if (l !== null && l.name === "webkitAudioContext") {
                    let M = g + v, _ = f.context.sampleRate, I = Math.ceil(g * _), S1 = Math.floor(M * _), b = S1 - I, E = new Float32Array(b);
                    for(let P = 0; P < b; P += 1){
                        let F = (A1.length - 1) / v * ((I + P) / _ - g), V = Math.floor(F), R = Math.ceil(F);
                        E[P] = V === R ? A1[V] : (1 - (F - V)) * A1[V] + (1 - (R - F)) * A1[R];
                    }
                    O === null && y.flush(f.context.currentTime), y.add(p1(E, g, v)), h.setValueCurveAtTime(E, g, v);
                    let k = S1 / _;
                    k < M && m(w, E[E.length - 1], k), m(w, A1[A1.length - 1], M);
                } else O === null && y.flush(f.context.currentTime), y.add(p1(A1, g, v)), h.setValueCurveAtTime(A1, g, v);
                return w;
            }
        };
        return t.set(w, h), r.set(w, f), e(w, O), w;
    };
var Zr = (e)=>({
        replay (r) {
            for (let t of e)if (t.type === "exponentialRampToValue") {
                let { endTime: o , value: n  } = t;
                r.exponentialRampToValueAtTime(n, o);
            } else if (t.type === "linearRampToValue") {
                let { endTime: o1 , value: n1  } = t;
                r.linearRampToValueAtTime(n1, o1);
            } else if (t.type === "setTarget") {
                let { startTime: o2 , target: n2 , timeConstant: a  } = t;
                r.setTargetAtTime(n2, o2, a);
            } else if (t.type === "setValue") {
                let { startTime: o3 , value: n3  } = t;
                r.setValueAtTime(n3, o3);
            } else if (t.type === "setValueCurve") {
                let { duration: o4 , startTime: n4 , values: a1  } = t;
                r.setValueCurveAtTime(a1, n4, o4);
            } else throw new Error("Can't apply an unknown automation.");
        }
    });
var tt1 = class {
    constructor(r){
        this._map = new Map(r);
    }
    get size() {
        return this._map.size;
    }
    entries() {
        return this._map.entries();
    }
    forEach(r, t = null) {
        return this._map.forEach((o, n)=>r.call(t, o, n, this));
    }
    get(r) {
        return this._map.get(r);
    }
    has(r) {
        return this._map.has(r);
    }
    keys() {
        return this._map.keys();
    }
    values() {
        return this._map.values();
    }
};
var wa = {
    channelCount: 2,
    channelCountMode: "explicit",
    channelInterpretation: "speakers",
    numberOfInputs: 1,
    numberOfOutputs: 1,
    parameterData: {},
    processorOptions: {}
}, Xr = (e, r, t, o, n, a, u, s, c, i1, p1, l, m, f)=>class extends r {
        constructor(h, N, C){
            var y;
            let O = s(h), w = c(O), x1 = p1({
                ...wa,
                ...C
            });
            m(x1);
            let g = xt1.get(O), v = g?.get(N), A1 = w || O.state !== "closed" ? O : (y = u(O)) !== null && y !== void 0 ? y : O, M = n(A1, w ? null : h.baseLatency, i1, N, v, x1), _ = w ? o(N, x1, v) : null;
            super(h, !0, M, _);
            let I = [];
            M.parameters.forEach((b, E)=>{
                let k = t(this, w, b);
                I.push([
                    E,
                    k
                ]);
            }), this._nativeAudioWorkletNode = M, this._onprocessorerror = null, this._parameters = new tt1(I), w && e(O, this);
            let { activeInputs: S1  } = a(this);
            l(M, S1);
        }
        get onprocessorerror() {
            return this._onprocessorerror;
        }
        set onprocessorerror(h) {
            let N = typeof h == "function" ? f(this, h) : null;
            this._nativeAudioWorkletNode.onprocessorerror = N;
            let C = this._nativeAudioWorkletNode.onprocessorerror;
            this._onprocessorerror = C !== null && C === N ? h : C;
        }
        get parameters() {
            return this._parameters === null ? this._nativeAudioWorkletNode.parameters : this._parameters;
        }
        get port() {
            return this._nativeAudioWorkletNode.port;
        }
    };
function rt1(e, r, t, o, n) {
    if (typeof e.copyFromChannel == "function") r[t].byteLength === 0 && (r[t] = new Float32Array(128)), e.copyFromChannel(r[t], o, n);
    else {
        let a = e.getChannelData(o);
        if (r[t].byteLength === 0) r[t] = a.slice(n, n + 128);
        else {
            let u = new Float32Array(a.buffer, n * Float32Array.BYTES_PER_ELEMENT, 128);
            r[t].set(u);
        }
    }
}
var It1 = (e, r, t, o, n)=>{
    typeof e.copyToChannel == "function" ? r[t].byteLength !== 0 && e.copyToChannel(r[t], o, n) : r[t].byteLength !== 0 && e.getChannelData(o).set(r[t], n);
};
var ot1 = (e, r)=>{
    let t = [];
    for(let o = 0; o < e; o += 1){
        let n = [], a = typeof r == "number" ? r : r[o];
        for(let u = 0; u < a; u += 1)n.push(new Float32Array(128));
        t.push(n);
    }
    return t;
};
var Yr = (e, r)=>{
    let t = ne1(Nt1, e), o = z1(r);
    return ne1(t, o);
};
var _a = async (e, r, t, o, n, a, u)=>{
    let s = r === null ? Math.ceil(e.context.length / 128) * 128 : r.length, c = o.channelCount * o.numberOfInputs, i1 = n.reduce((N, C)=>N + C, 0), p1 = i1 === 0 ? null : t.createBuffer(i1, s, t.sampleRate);
    if (a === void 0) throw new Error("Missing the processor constructor.");
    let l = ae1(e), m = await Yr(t, e), f = ot1(o.numberOfInputs, o.channelCount), d1 = ot1(o.numberOfOutputs, n), h = Array.from(e.parameters.keys()).reduce((N, C)=>({
            ...N,
            [C]: new Float32Array(128)
        }), {});
    for(let N = 0; N < s; N += 128){
        if (o.numberOfInputs > 0 && r !== null) for(let C = 0; C < o.numberOfInputs; C += 1)for(let y = 0; y < o.channelCount; y += 1)rt1(r, f[C], y, y, N);
        a.parameterDescriptors !== void 0 && r !== null && a.parameterDescriptors.forEach(({ name: C  }, y)=>{
            rt1(r, h, C, c + y, N);
        });
        for(let C1 = 0; C1 < o.numberOfInputs; C1 += 1)for(let y1 = 0; y1 < n[C1]; y1 += 1)d1[C1][y1].byteLength === 0 && (d1[C1][y1] = new Float32Array(128));
        try {
            let C2 = f.map((O, w)=>l.activeInputs[w].size === 0 ? [] : O), y2 = u(N / t.sampleRate, t.sampleRate, ()=>m.process(C2, d1, h));
            if (p1 !== null) for(let O = 0, w = 0; O < o.numberOfOutputs; O += 1){
                for(let x1 = 0; x1 < n[O]; x1 += 1)It1(p1, d1[O], x1, w + x1, N);
                w += n[O];
            }
            if (!y2) break;
        } catch (C3) {
            e.dispatchEvent(new ErrorEvent("processorerror", {
                colno: C3.colno,
                filename: C3.filename,
                lineno: C3.lineno,
                message: C3.message
            }));
            break;
        }
    }
    return p1;
}, zr1 = (e, r, t, o, n, a, u, s, c, i1, p1, l, m, f, d1, h)=>(N, C, y)=>{
        let O = new WeakMap, w = null, x1 = async (g, v)=>{
            let A1 = p1(g), M = null, _ = q1(A1, v), I = Array.isArray(C.outputChannelCount) ? C.outputChannelCount : Array.from(C.outputChannelCount);
            if (l === null) {
                let S1 = I.reduce((P, F)=>P + F, 0), b = n(v, {
                    channelCount: Math.max(1, S1),
                    channelCountMode: "explicit",
                    channelInterpretation: "discrete",
                    numberOfOutputs: Math.max(1, S1)
                }), E = [];
                for(let P = 0; P < g.numberOfOutputs; P += 1)E.push(o(v, {
                    channelCount: 1,
                    channelCountMode: "explicit",
                    channelInterpretation: "speakers",
                    numberOfInputs: I[P]
                }));
                let k = u(v, {
                    channelCount: C.channelCount,
                    channelCountMode: C.channelCountMode,
                    channelInterpretation: C.channelInterpretation,
                    gain: 1
                });
                k.connect = r.bind(null, E), k.disconnect = c.bind(null, E), M = [
                    b,
                    E,
                    k
                ];
            } else _ || (A1 = new l(v, N));
            if (O.set(v, M === null ? A1 : M[2]), M !== null) {
                if (w === null) {
                    if (y === void 0) throw new Error("Missing the processor constructor.");
                    if (m === null) throw new Error("Missing the native OfflineAudioContext constructor.");
                    let F = g.channelCount * g.numberOfInputs, V = y.parameterDescriptors === void 0 ? 0 : y.parameterDescriptors.length, R = F + V;
                    w = _a(g, R === 0 ? null : await (async ()=>{
                        let L = new m(R, Math.ceil(g.context.length / 128) * 128, v.sampleRate), Y = [], fe = [];
                        for(let $ = 0; $ < C.numberOfInputs; $ += 1)Y.push(u(L, {
                            channelCount: C.channelCount,
                            channelCountMode: C.channelCountMode,
                            channelInterpretation: C.channelInterpretation,
                            gain: 1
                        })), fe.push(n(L, {
                            channelCount: C.channelCount,
                            channelCountMode: "explicit",
                            channelInterpretation: "discrete",
                            numberOfOutputs: C.channelCount
                        }));
                        let me = await Promise.all(Array.from(g.parameters.values()).map(async ($)=>{
                            let pe = a(L, {
                                channelCount: 1,
                                channelCountMode: "explicit",
                                channelInterpretation: "discrete",
                                offset: $.value
                            });
                            return await f(L, $, pe.offset), pe;
                        })), U = o(L, {
                            channelCount: 1,
                            channelCountMode: "explicit",
                            channelInterpretation: "speakers",
                            numberOfInputs: Math.max(1, F + V)
                        });
                        for(let $1 = 0; $1 < C.numberOfInputs; $1 += 1){
                            Y[$1].connect(fe[$1]);
                            for(let pe = 0; pe < C.channelCount; pe += 1)fe[$1].connect(U, pe, $1 * C.channelCount + pe);
                        }
                        for (let [$2, pe1] of me.entries())pe1.connect(U, 0, F + $2), pe1.start(0);
                        return U.connect(L.destination), await Promise.all(Y.map(($)=>d1(g, L, $))), h(L);
                    })(), v, C, I, y, i1);
                }
                let S2 = await w, b1 = t(v, {
                    buffer: null,
                    channelCount: 2,
                    channelCountMode: "max",
                    channelInterpretation: "speakers",
                    loop: !1,
                    loopEnd: 0,
                    loopStart: 0,
                    playbackRate: 1
                }), [E1, k1, P1] = M;
                S2 !== null && (b1.buffer = S2, b1.start(0)), b1.connect(E1);
                for(let F1 = 0, V1 = 0; F1 < g.numberOfOutputs; F1 += 1){
                    let R1 = k1[F1];
                    for(let B = 0; B < I[F1]; B += 1)E1.connect(R1, V1 + B, B);
                    V1 += I[F1];
                }
                return P1;
            }
            if (_) for (let [S3, b2] of g.parameters.entries())await e(v, b2, A1.parameters.get(S3));
            else for (let [S4, b3] of g.parameters.entries())await f(v, b3, A1.parameters.get(S4));
            return await d1(g, v, A1), A1;
        };
        return {
            render (g, v) {
                s(v, g);
                let A1 = O.get(v);
                return A1 !== void 0 ? Promise.resolve(A1) : x1(g, v);
            }
        };
    };
var Qr = (e, r, t, o, n, a, u, s, c, i1, p1, l, m, f, d1, h, N, C, y, O)=>class extends d1 {
        constructor(x1, g){
            super(x1, g), this._nativeContext = x1, this._audioWorklet = e === void 0 ? void 0 : {
                addModule: (v, A1)=>e(this, v, A1)
            };
        }
        get audioWorklet() {
            return this._audioWorklet;
        }
        createAnalyser() {
            return new r(this);
        }
        createBiquadFilter() {
            return new n(this);
        }
        createBuffer(x1, g, v) {
            return new t({
                length: g,
                numberOfChannels: x1,
                sampleRate: v
            });
        }
        createBufferSource() {
            return new o(this);
        }
        createChannelMerger(x1 = 6) {
            return new a(this, {
                numberOfInputs: x1
            });
        }
        createChannelSplitter(x1 = 6) {
            return new u(this, {
                numberOfOutputs: x1
            });
        }
        createConstantSource() {
            return new s(this);
        }
        createConvolver() {
            return new c(this);
        }
        createDelay(x1 = 1) {
            return new p1(this, {
                maxDelayTime: x1
            });
        }
        createDynamicsCompressor() {
            return new l(this);
        }
        createGain() {
            return new m(this);
        }
        createIIRFilter(x1, g) {
            return new f(this, {
                feedback: g,
                feedforward: x1
            });
        }
        createOscillator() {
            return new h(this);
        }
        createPanner() {
            return new N(this);
        }
        createPeriodicWave(x1, g, v = {
            disableNormalization: !1
        }) {
            return new C(this, {
                ...v,
                imag: g,
                real: x1
            });
        }
        createStereoPanner() {
            return new y(this);
        }
        createWaveShaper() {
            return new O(this);
        }
        decodeAudioData(x1, g, v) {
            return i1(this._nativeContext, x1).then((A1)=>(typeof g == "function" && g(A1), A1), (A1)=>{
                throw typeof v == "function" && v(A1), A1;
            });
        }
    };
var Oa = {
    Q: 1,
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    detune: 0,
    frequency: 350,
    gain: 0,
    type: "lowpass"
}, Hr = (e, r, t, o, n, a, u, s)=>class extends e {
        constructor(i1, p1){
            let l = a(i1), m = {
                ...Oa,
                ...p1
            }, f = n(l, m), d1 = u(l), h = d1 ? t() : null;
            super(i1, !1, f, h), this._Q = r(this, d1, f.Q, te2, re), this._detune = r(this, d1, f.detune, 1200 * Math.log2(te2), -1200 * Math.log2(te2)), this._frequency = r(this, d1, f.frequency, i1.sampleRate / 2, 0), this._gain = r(this, d1, f.gain, 40 * Math.log10(te2), re), this._nativeBiquadFilterNode = f, s(this, 1);
        }
        get detune() {
            return this._detune;
        }
        get frequency() {
            return this._frequency;
        }
        get gain() {
            return this._gain;
        }
        get Q() {
            return this._Q;
        }
        get type() {
            return this._nativeBiquadFilterNode.type;
        }
        set type(i1) {
            this._nativeBiquadFilterNode.type = i1;
        }
        getFrequencyResponse(i1, p1, l) {
            try {
                this._nativeBiquadFilterNode.getFrequencyResponse(i1, p1, l);
            } catch (m) {
                throw m.code === 11 ? o() : m;
            }
            if (i1.length !== p1.length || p1.length !== l.length) throw o();
        }
    };
var $r1 = (e, r, t, o, n)=>()=>{
        let a = new WeakMap, u = async (s, c)=>{
            let i1 = t(s), p1 = q1(i1, c);
            if (!p1) {
                let l = {
                    Q: i1.Q.value,
                    channelCount: i1.channelCount,
                    channelCountMode: i1.channelCountMode,
                    channelInterpretation: i1.channelInterpretation,
                    detune: i1.detune.value,
                    frequency: i1.frequency.value,
                    gain: i1.gain.value,
                    type: i1.type
                };
                i1 = r(c, l);
            }
            return a.set(c, i1), p1 ? (await e(c, s.Q, i1.Q), await e(c, s.detune, i1.detune), await e(c, s.frequency, i1.frequency), await e(c, s.gain, i1.gain)) : (await o(c, s.Q, i1.Q), await o(c, s.detune, i1.detune), await o(c, s.frequency, i1.frequency), await o(c, s.gain, i1.gain)), await n(s, c, i1), i1;
        };
        return {
            render (s, c) {
                let i1 = a.get(c);
                return i1 !== void 0 ? Promise.resolve(i1) : u(s, c);
            }
        };
    };
var Kr = (e, r)=>(t, o)=>{
        let n = r.get(t);
        if (n !== void 0) return n;
        let a = e.get(t);
        if (a !== void 0) return a;
        try {
            let u = o();
            return u instanceof Promise ? (e.set(t, u), u.catch(()=>!1).then((s)=>(e.delete(t), r.set(t, s), s))) : (r.set(t, u), u);
        } catch  {
            return r.set(t, !1), !1;
        }
    };
var Ia = {
    channelCount: 1,
    channelCountMode: "explicit",
    channelInterpretation: "speakers",
    numberOfInputs: 6
}, Jr = (e, r, t, o, n)=>class extends e {
        constructor(u, s){
            let c = o(u), i1 = {
                ...Ia,
                ...s
            }, p1 = t(c, i1), l = n(c) ? r() : null;
            super(u, !1, p1, l);
        }
    };
var eo = (e, r, t)=>()=>{
        let o = new WeakMap, n = async (a, u)=>{
            let s = r(a);
            if (!q1(s, u)) {
                let i1 = {
                    channelCount: s.channelCount,
                    channelCountMode: s.channelCountMode,
                    channelInterpretation: s.channelInterpretation,
                    numberOfInputs: s.numberOfInputs
                };
                s = e(u, i1);
            }
            return o.set(u, s), await t(a, u, s), s;
        };
        return {
            render (a, u) {
                let s = o.get(u);
                return s !== void 0 ? Promise.resolve(s) : n(a, u);
            }
        };
    };
var Ma = {
    channelCount: 6,
    channelCountMode: "explicit",
    channelInterpretation: "discrete",
    numberOfOutputs: 6
}, to = (e, r, t, o, n, a)=>class extends e {
        constructor(s, c){
            let i1 = o(s), p1 = a({
                ...Ma,
                ...c
            }), l = t(i1, p1), m = n(i1) ? r() : null;
            super(s, !1, l, m);
        }
    };
var ro = (e, r, t)=>()=>{
        let o = new WeakMap, n = async (a, u)=>{
            let s = r(a);
            if (!q1(s, u)) {
                let i1 = {
                    channelCount: s.channelCount,
                    channelCountMode: s.channelCountMode,
                    channelInterpretation: s.channelInterpretation,
                    numberOfOutputs: s.numberOfOutputs
                };
                s = e(u, i1);
            }
            return o.set(u, s), await t(a, u, s), s;
        };
        return {
            render (a, u) {
                let s = o.get(u);
                return s !== void 0 ? Promise.resolve(s) : n(a, u);
            }
        };
    };
var oo = (e)=>(r, t, o)=>e(t, r, o);
var no = (e)=>(r, t, o = 0, n = 0)=>{
        let a = r[o];
        if (a === void 0) throw e();
        return qe(t) ? a.connect(t, 0, n) : a.connect(t, 0);
    };
var so = (e)=>(r, t)=>{
        let o = e(r, {
            buffer: null,
            channelCount: 2,
            channelCountMode: "max",
            channelInterpretation: "speakers",
            loop: !1,
            loopEnd: 0,
            loopStart: 0,
            playbackRate: 1
        }), n = r.createBuffer(1, 2, 44100);
        return o.buffer = n, o.loop = !0, o.connect(t), o.start(), ()=>{
            o.stop(), o.disconnect(t);
        };
    };
var Ea = {
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    offset: 1
}, ao = (e, r, t, o, n, a, u)=>class extends e {
        constructor(c, i1){
            let p1 = n(c), l = {
                ...Ea,
                ...i1
            }, m = o(p1, l), f = a(p1), d1 = f ? t() : null;
            super(c, !1, m, d1), this._constantSourceNodeRenderer = d1, this._nativeConstantSourceNode = m, this._offset = r(this, f, m.offset, te2, re), this._onended = null;
        }
        get offset() {
            return this._offset;
        }
        get onended() {
            return this._onended;
        }
        set onended(c) {
            let i1 = typeof c == "function" ? u(this, c) : null;
            this._nativeConstantSourceNode.onended = i1;
            let p1 = this._nativeConstantSourceNode.onended;
            this._onended = p1 !== null && p1 === i1 ? c : p1;
        }
        start(c = 0) {
            if (this._nativeConstantSourceNode.start(c), this._constantSourceNodeRenderer !== null && (this._constantSourceNodeRenderer.start = c), this.context.state !== "closed") {
                ve1(this);
                let i1 = ()=>{
                    this._nativeConstantSourceNode.removeEventListener("ended", i1), le2(this) && Ie1(this);
                };
                this._nativeConstantSourceNode.addEventListener("ended", i1);
            }
        }
        stop(c = 0) {
            this._nativeConstantSourceNode.stop(c), this._constantSourceNodeRenderer !== null && (this._constantSourceNodeRenderer.stop = c);
        }
    };
var io = (e, r, t, o, n)=>()=>{
        let a = new WeakMap, u = null, s = null, c = async (i1, p1)=>{
            let l = t(i1), m = q1(l, p1);
            if (!m) {
                let f = {
                    channelCount: l.channelCount,
                    channelCountMode: l.channelCountMode,
                    channelInterpretation: l.channelInterpretation,
                    offset: l.offset.value
                };
                l = r(p1, f), u !== null && l.start(u), s !== null && l.stop(s);
            }
            return a.set(p1, l), m ? await e(p1, i1.offset, l.offset) : await o(p1, i1.offset, l.offset), await n(i1, p1, l), l;
        };
        return {
            set start (i){
                u = i;
            },
            set stop (i){
                s = i;
            },
            render (i1, p1) {
                let l = a.get(p1);
                return l !== void 0 ? Promise.resolve(l) : c(i1, p1);
            }
        };
    };
var co = (e)=>(r)=>(e[0] = r, e[0]);
var Ta = {
    buffer: null,
    channelCount: 2,
    channelCountMode: "clamped-max",
    channelInterpretation: "speakers",
    disableNormalization: !1
}, uo = (e, r, t, o, n, a)=>class extends e {
        constructor(s, c){
            let i1 = o(s), p1 = {
                ...Ta,
                ...c
            }, l = t(i1, p1), f = n(i1) ? r() : null;
            super(s, !1, l, f), this._isBufferNullified = !1, this._nativeConvolverNode = l, p1.buffer !== null && a(this, p1.buffer.duration);
        }
        get buffer() {
            return this._isBufferNullified ? null : this._nativeConvolverNode.buffer;
        }
        set buffer(s) {
            if (this._nativeConvolverNode.buffer = s, s === null && this._nativeConvolverNode.buffer !== null) {
                let c = this._nativeConvolverNode.context;
                this._nativeConvolverNode.buffer = c.createBuffer(1, 1, c.sampleRate), this._isBufferNullified = !0, a(this, 0);
            } else this._isBufferNullified = !1, a(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);
        }
        get normalize() {
            return this._nativeConvolverNode.normalize;
        }
        set normalize(s) {
            this._nativeConvolverNode.normalize = s;
        }
    };
var po = (e, r, t)=>()=>{
        let o = new WeakMap, n = async (a, u)=>{
            let s = r(a);
            if (!q1(s, u)) {
                let i1 = {
                    buffer: s.buffer,
                    channelCount: s.channelCount,
                    channelCountMode: s.channelCountMode,
                    channelInterpretation: s.channelInterpretation,
                    disableNormalization: !s.normalize
                };
                s = e(u, i1);
            }
            return o.set(u, s), Ce1(s) ? await t(a, u, s.inputs[0]) : await t(a, u, s), s;
        };
        return {
            render (a, u) {
                let s = o.get(u);
                return s !== void 0 ? Promise.resolve(s) : n(a, u);
            }
        };
    };
var lo = (e, r)=>(t, o, n)=>{
        if (r === null) throw new Error("Missing the native OfflineAudioContext constructor.");
        try {
            return new r(t, o, n);
        } catch (a) {
            throw a.name === "SyntaxError" ? e() : a;
        }
    };
var fo = ()=>new DOMException("", "DataCloneError");
var Xt1 = (e)=>{
    let { port1: r , port2: t  } = new MessageChannel;
    return new Promise((o)=>{
        let n = ()=>{
            t.onmessage = null, r.close(), t.close(), o();
        };
        t.onmessage = ()=>n();
        try {
            r.postMessage(e, [
                e
            ]);
        } catch  {} finally{
            n();
        }
    });
};
var mo = (e, r, t, o, n, a, u, s, c, i1, p1)=>(l, m)=>{
        let f = u(l) ? l : a(l);
        if (n.has(m)) {
            let d1 = t();
            return Promise.reject(d1);
        }
        try {
            n.add(m);
        } catch  {}
        return r(c, ()=>c(f)) ? f.decodeAudioData(m).then((d1)=>(Xt1(m).catch(()=>{}), r(s, ()=>s(d1)) || p1(d1), e.add(d1), d1)) : new Promise((d1, h)=>{
            let N = async ()=>{
                try {
                    await Xt1(m);
                } catch  {}
            }, C = (y)=>{
                h(y), N();
            };
            try {
                f.decodeAudioData(m, (y)=>{
                    typeof y.copyFromChannel != "function" && (i1(y), $e1(y)), e.add(y), N().then(()=>d1(y));
                }, (y)=>{
                    C(y === null ? o() : y);
                });
            } catch (y) {
                C(y);
            }
        });
    };
var ho = (e, r, t, o, n, a, u, s)=>(c, i1)=>{
        let p1 = r.get(c);
        if (p1 === void 0) throw new Error("Missing the expected cycle count.");
        let l = a(c.context), m = s(l);
        if (p1 === i1) {
            if (r.delete(c), !m && u(c)) {
                let f = o(c), { outputs: d1  } = t(c);
                for (let h of d1)if (ke1(h)) {
                    let N = o(h[0]);
                    e(f, N, h[1], h[2]);
                } else {
                    let N1 = n(h[0]);
                    f.connect(N1, h[1]);
                }
            }
        } else r.set(c, p1 - i1);
    };
var ba = {
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    delayTime: 0,
    maxDelayTime: 1
}, xo = (e, r, t, o, n, a, u)=>class extends e {
        constructor(c, i1){
            let p1 = n(c), l = {
                ...ba,
                ...i1
            }, m = o(p1, l), f = a(p1), d1 = f ? t(l.maxDelayTime) : null;
            super(c, !1, m, d1), this._delayTime = r(this, f, m.delayTime), u(this, l.maxDelayTime);
        }
        get delayTime() {
            return this._delayTime;
        }
    };
var No = (e, r, t, o, n)=>(a)=>{
        let u = new WeakMap, s = async (c, i1)=>{
            let p1 = t(c), l = q1(p1, i1);
            if (!l) {
                let m = {
                    channelCount: p1.channelCount,
                    channelCountMode: p1.channelCountMode,
                    channelInterpretation: p1.channelInterpretation,
                    delayTime: p1.delayTime.value,
                    maxDelayTime: a
                };
                p1 = r(i1, m);
            }
            return u.set(i1, p1), l ? await e(i1, c.delayTime, p1.delayTime) : await o(i1, c.delayTime, p1.delayTime), await n(c, i1, p1), p1;
        };
        return {
            render (c, i1) {
                let p1 = u.get(i1);
                return p1 !== void 0 ? Promise.resolve(p1) : s(c, i1);
            }
        };
    };
var Co = (e)=>(r, t, o, n)=>e(r[n], (a)=>a[0] === t && a[1] === o);
var go = (e)=>(r, t)=>{
        e(r).delete(t);
    };
var vo = (e)=>"delayTime" in e;
var Ao = (e, r, t)=>function o(n, a) {
        let u = Ge(a) ? a : t(e, a);
        if (vo(u)) return [];
        if (n[0] === u) return [
            n
        ];
        if (n.includes(u)) return [];
        let { outputs: s  } = r(u);
        return Array.from(s).map((c)=>o([
                ...n,
                u
            ], c[0])).reduce((c, i1)=>c.concat(i1), []);
    };
var Mt1 = (e, r, t)=>{
    let o = r[t];
    if (o === void 0) throw e();
    return o;
}, yo = (e)=>(r, t = void 0, o = void 0, n = 0)=>t === void 0 ? r.forEach((a)=>a.disconnect()) : typeof t == "number" ? Mt1(e, r, t).disconnect() : qe(t) ? o === void 0 ? r.forEach((a)=>a.disconnect(t)) : n === void 0 ? Mt1(e, r, o).disconnect(t, 0) : Mt1(e, r, o).disconnect(t, 0, n) : o === void 0 ? r.forEach((a)=>a.disconnect(t)) : Mt1(e, r, o).disconnect(t, 0);
var Pa = {
    attack: .003,
    channelCount: 2,
    channelCountMode: "clamped-max",
    channelInterpretation: "speakers",
    knee: 30,
    ratio: 12,
    release: .25,
    threshold: -24
}, So = (e, r, t, o, n, a, u, s)=>class extends e {
        constructor(i1, p1){
            let l = a(i1), m = {
                ...Pa,
                ...p1
            }, f = o(l, m), d1 = u(l), h = d1 ? t() : null;
            super(i1, !1, f, h), this._attack = r(this, d1, f.attack), this._knee = r(this, d1, f.knee), this._nativeDynamicsCompressorNode = f, this._ratio = r(this, d1, f.ratio), this._release = r(this, d1, f.release), this._threshold = r(this, d1, f.threshold), s(this, .006);
        }
        get attack() {
            return this._attack;
        }
        get channelCount() {
            return this._nativeDynamicsCompressorNode.channelCount;
        }
        set channelCount(i1) {
            let p1 = this._nativeDynamicsCompressorNode.channelCount;
            if (this._nativeDynamicsCompressorNode.channelCount = i1, i1 > 2) throw this._nativeDynamicsCompressorNode.channelCount = p1, n();
        }
        get channelCountMode() {
            return this._nativeDynamicsCompressorNode.channelCountMode;
        }
        set channelCountMode(i1) {
            let p1 = this._nativeDynamicsCompressorNode.channelCountMode;
            if (this._nativeDynamicsCompressorNode.channelCountMode = i1, i1 === "max") throw this._nativeDynamicsCompressorNode.channelCountMode = p1, n();
        }
        get knee() {
            return this._knee;
        }
        get ratio() {
            return this._ratio;
        }
        get reduction() {
            return typeof this._nativeDynamicsCompressorNode.reduction.value == "number" ? this._nativeDynamicsCompressorNode.reduction.value : this._nativeDynamicsCompressorNode.reduction;
        }
        get release() {
            return this._release;
        }
        get threshold() {
            return this._threshold;
        }
    };
var wo = (e, r, t, o, n)=>()=>{
        let a = new WeakMap, u = async (s, c)=>{
            let i1 = t(s), p1 = q1(i1, c);
            if (!p1) {
                let l = {
                    attack: i1.attack.value,
                    channelCount: i1.channelCount,
                    channelCountMode: i1.channelCountMode,
                    channelInterpretation: i1.channelInterpretation,
                    knee: i1.knee.value,
                    ratio: i1.ratio.value,
                    release: i1.release.value,
                    threshold: i1.threshold.value
                };
                i1 = r(c, l);
            }
            return a.set(c, i1), p1 ? (await e(c, s.attack, i1.attack), await e(c, s.knee, i1.knee), await e(c, s.ratio, i1.ratio), await e(c, s.release, i1.release), await e(c, s.threshold, i1.threshold)) : (await o(c, s.attack, i1.attack), await o(c, s.knee, i1.knee), await o(c, s.ratio, i1.ratio), await o(c, s.release, i1.release), await o(c, s.threshold, i1.threshold)), await n(s, c, i1), i1;
        };
        return {
            render (s, c) {
                let i1 = a.get(c);
                return i1 !== void 0 ? Promise.resolve(i1) : u(s, c);
            }
        };
    };
var _o = ()=>new DOMException("", "EncodingError");
var Oo = (e)=>(r)=>new Promise((t, o)=>{
            if (e === null) {
                o(new SyntaxError);
                return;
            }
            let n = e.document.head;
            if (n === null) o(new SyntaxError);
            else {
                let a = e.document.createElement("script"), u = new Blob([
                    r
                ], {
                    type: "application/javascript"
                }), s = URL.createObjectURL(u), c = e.onerror, i1 = ()=>{
                    e.onerror = c, URL.revokeObjectURL(s);
                };
                e.onerror = (p1, l, m, f, d1)=>{
                    if (l === s || l === e.location.href && m === 1 && f === 1) return i1(), o(d1), !1;
                    if (c !== null) return c(p1, l, m, f, d1);
                }, a.onerror = ()=>{
                    i1(), o(new SyntaxError);
                }, a.onload = ()=>{
                    i1(), t();
                }, a.src = s, a.type = "module", n.appendChild(a);
            }
        });
var Io = (e)=>class {
        constructor(t){
            this._nativeEventTarget = t, this._listeners = new WeakMap;
        }
        addEventListener(t, o, n) {
            if (o !== null) {
                let a = this._listeners.get(o);
                a === void 0 && (a = e(this, o), typeof o == "function" && this._listeners.set(o, a)), this._nativeEventTarget.addEventListener(t, a, n);
            }
        }
        dispatchEvent(t) {
            return this._nativeEventTarget.dispatchEvent(t);
        }
        removeEventListener(t, o, n) {
            let a = o === null ? void 0 : this._listeners.get(o);
            this._nativeEventTarget.removeEventListener(t, a === void 0 ? null : a, n);
        }
    };
var Mo = (e)=>(r, t, o)=>{
        Object.defineProperties(e, {
            currentFrame: {
                configurable: !0,
                get () {
                    return Math.round(r * t);
                }
            },
            currentTime: {
                configurable: !0,
                get () {
                    return r;
                }
            }
        });
        try {
            return o();
        } finally{
            e !== null && (delete e.currentFrame, delete e.currentTime);
        }
    };
var Eo = (e)=>async (r)=>{
        try {
            let t = await fetch(r);
            if (t.ok) return [
                await t.text(),
                t.url
            ];
        } catch  {}
        throw e();
    };
var Fa = {
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    gain: 1
}, To = (e, r, t, o, n, a)=>class extends e {
        constructor(s, c){
            let i1 = n(s), p1 = {
                ...Fa,
                ...c
            }, l = o(i1, p1), m = a(i1), f = m ? t() : null;
            super(s, !1, l, f), this._gain = r(this, m, l.gain, te2, re);
        }
        get gain() {
            return this._gain;
        }
    };
var bo = (e, r, t, o, n)=>()=>{
        let a = new WeakMap, u = async (s, c)=>{
            let i1 = t(s), p1 = q1(i1, c);
            if (!p1) {
                let l = {
                    channelCount: i1.channelCount,
                    channelCountMode: i1.channelCountMode,
                    channelInterpretation: i1.channelInterpretation,
                    gain: i1.gain.value
                };
                i1 = r(c, l);
            }
            return a.set(c, i1), p1 ? await e(c, s.gain, i1.gain) : await o(c, s.gain, i1.gain), await n(s, c, i1), i1;
        };
        return {
            render (s, c) {
                let i1 = a.get(c);
                return i1 !== void 0 ? Promise.resolve(i1) : u(s, c);
            }
        };
    };
var Po = (e, r)=>(t)=>r(e, t);
var Fo = (e)=>(r)=>{
        let t = e(r);
        if (t.renderer === null) throw new Error("Missing the renderer of the given AudioNode in the audio graph.");
        return t.renderer;
    };
var Do = (e)=>(r)=>{
        var t;
        return (t = e.get(r)) !== null && t !== void 0 ? t : 0;
    };
var Ro = (e)=>(r)=>{
        let t = e(r);
        if (t.renderer === null) throw new Error("Missing the renderer of the given AudioParam in the audio graph.");
        return t.renderer;
    };
var ko = (e)=>(r)=>e.get(r);
var K3 = ()=>new DOMException("", "InvalidStateError");
var Wo = (e)=>(r)=>{
        let t = e.get(r);
        if (t === void 0) throw K3();
        return t;
    };
var Lo = (e, r)=>(t)=>{
        let o = e.get(t);
        if (o !== void 0) return o;
        if (r === null) throw new Error("Missing the native OfflineAudioContext constructor.");
        return o = new r(1, 1, 44100), e.set(t, o), o;
    };
var Bo = (e)=>(r)=>{
        let t = e.get(r);
        if (t === void 0) throw new Error("The context has no set of AudioWorkletNodes.");
        return t;
    };
var nt1 = ()=>new DOMException("", "InvalidAccessError");
var Vo = (e)=>{
    e.getFrequencyResponse = ((r)=>(t, o, n)=>{
            if (t.length !== o.length || o.length !== n.length) throw nt1();
            return r.call(e, t, o, n);
        })(e.getFrequencyResponse);
};
var Da = {
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers"
}, Go = (e, r, t, o, n, a)=>class extends e {
        constructor(s, c){
            let i1 = o(s), p1 = n(i1), l = {
                ...Da,
                ...c
            }, m = r(i1, p1 ? null : s.baseLatency, l), f = p1 ? t(l.feedback, l.feedforward) : null;
            super(s, !1, m, f), Vo(m), this._nativeIIRFilterNode = m, a(this, 1);
        }
        getFrequencyResponse(s, c, i1) {
            return this._nativeIIRFilterNode.getFrequencyResponse(s, c, i1);
        }
    };
var Et1 = (e, r, t, o, n, a, u, s, c, i1, p1)=>{
    let l = i1.length, m = s;
    for(let f = 0; f < l; f += 1){
        let d1 = t[0] * i1[f];
        for(let h = 1; h < n; h += 1){
            let N = m - h & c - 1;
            d1 += t[h] * a[N], d1 -= e[h] * u[N];
        }
        for(let h1 = n; h1 < o; h1 += 1)d1 += t[h1] * a[m - h1 & c - 1];
        for(let h2 = n; h2 < r; h2 += 1)d1 -= e[h2] * u[m - h2 & c - 1];
        a[m] = i1[f], u[m] = d1, m = m + 1 & c - 1, p1[f] = d1;
    }
    return m;
};
var Ra = (e, r, t, o)=>{
    let n = t instanceof Float64Array ? t : new Float64Array(t), a = o instanceof Float64Array ? o : new Float64Array(o), u = n.length, s = a.length, c = Math.min(u, s);
    if (n[0] !== 1) {
        for(let d1 = 0; d1 < u; d1 += 1)a[d1] /= n[0];
        for(let d2 = 1; d2 < s; d2 += 1)n[d2] /= n[0];
    }
    let i1 = 32, p1 = new Float32Array(i1), l = new Float32Array(i1), m = r.createBuffer(e.numberOfChannels, e.length, e.sampleRate), f = e.numberOfChannels;
    for(let d3 = 0; d3 < f; d3 += 1){
        let h = e.getChannelData(d3), N = m.getChannelData(d3);
        p1.fill(0), l.fill(0), Et1(n, u, a, s, c, p1, l, 0, i1, h, N);
    }
    return m;
}, Uo = (e, r, t, o, n)=>(a, u)=>{
        let s = new WeakMap, c = null, i1 = async (p1, l)=>{
            let m = null, f = r(p1), d1 = q1(f, l);
            if (l.createIIRFilter === void 0 ? m = e(l, {
                buffer: null,
                channelCount: 2,
                channelCountMode: "max",
                channelInterpretation: "speakers",
                loop: !1,
                loopEnd: 0,
                loopStart: 0,
                playbackRate: 1
            }) : d1 || (f = l.createIIRFilter(u, a)), s.set(l, m === null ? f : m), m !== null) {
                if (c === null) {
                    if (t === null) throw new Error("Missing the native OfflineAudioContext constructor.");
                    let N = new t(p1.context.destination.channelCount, p1.context.length, l.sampleRate);
                    c = (async ()=>{
                        await o(p1, N, N.destination);
                        let C = await n(N);
                        return Ra(C, l, a, u);
                    })();
                }
                let h = await c;
                return m.buffer = h, m.start(0), m;
            }
            return await o(p1, l, f), f;
        };
        return {
            render (p1, l) {
                let m = s.get(l);
                return m !== void 0 ? Promise.resolve(m) : i1(p1, l);
            }
        };
    };
var qo = (e, r, t, o, n, a)=>(u)=>(s, c)=>{
            let i1 = e.get(s);
            if (i1 === void 0) {
                if (!u && a(s)) {
                    let p1 = o(s), { outputs: l  } = t(s);
                    for (let m of l)if (ke1(m)) {
                        let f = o(m[0]);
                        r(p1, f, m[1], m[2]);
                    } else {
                        let f1 = n(m[0]);
                        p1.disconnect(f1, m[1]);
                    }
                }
                e.set(s, c);
            } else e.set(s, i1 + c);
        };
var jo = (e, r)=>(t)=>{
        let o = e.get(t);
        return r(o) || r(t);
    };
var Zo = (e, r)=>(t)=>e.has(t) || r(t);
var Xo = (e, r)=>(t)=>e.has(t) || r(t);
var Yo = (e, r)=>(t)=>{
        let o = e.get(t);
        return r(o) || r(t);
    };
var zo = (e)=>(r)=>e !== null && r instanceof e;
var Qo = (e)=>(r)=>e !== null && typeof e.AudioNode == "function" && r instanceof e.AudioNode;
var Ho = (e)=>(r)=>e !== null && typeof e.AudioParam == "function" && r instanceof e.AudioParam;
var $o = (e, r)=>(t)=>e(t) || r(t);
var Ko = (e)=>(r)=>e !== null && r instanceof e;
var Jo = (e)=>e !== null && e.isSecureContext;
var tn = (e, r, t, o)=>class extends e {
        constructor(a, u){
            let s = t(a), c = r(s, u);
            if (o(s)) throw TypeError();
            super(a, !0, c, null), this._nativeMediaElementAudioSourceNode = c;
        }
        get mediaElement() {
            return this._nativeMediaElementAudioSourceNode.mediaElement;
        }
    };
var ka = {
    channelCount: 2,
    channelCountMode: "explicit",
    channelInterpretation: "speakers"
}, rn = (e, r, t, o)=>class extends e {
        constructor(a, u){
            let s = t(a);
            if (o(s)) throw new TypeError;
            let c = {
                ...ka,
                ...u
            }, i1 = r(s, c);
            super(a, !1, i1, null), this._nativeMediaStreamAudioDestinationNode = i1;
        }
        get stream() {
            return this._nativeMediaStreamAudioDestinationNode.stream;
        }
    };
var on = (e, r, t, o)=>class extends e {
        constructor(a, u){
            let s = t(a), c = r(s, u);
            if (o(s)) throw new TypeError;
            super(a, !0, c, null), this._nativeMediaStreamAudioSourceNode = c;
        }
        get mediaStream() {
            return this._nativeMediaStreamAudioSourceNode.mediaStream;
        }
    };
var nn = (e, r, t)=>class extends e {
        constructor(n, a){
            let u = t(n), s = r(u, a);
            super(n, !0, s, null);
        }
    };
var sn = (e, r, t, o, n)=>class extends o {
        constructor(u = {}){
            if (n === null) throw new Error("Missing the native AudioContext constructor.");
            let s;
            try {
                s = new n(u);
            } catch (p1) {
                throw p1.code === 12 && p1.message === "sampleRate is not in range" ? r() : p1;
            }
            if (s === null) throw t();
            if (!_t1(u.latencyHint)) throw new TypeError(`The provided value '${u.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
            if (u.sampleRate !== void 0 && s.sampleRate !== u.sampleRate) throw r();
            super(s, 2);
            let { latencyHint: c  } = u, { sampleRate: i1  } = s;
            if (this._baseLatency = typeof s.baseLatency == "number" ? s.baseLatency : c === "balanced" ? 512 / i1 : c === "interactive" || c === void 0 ? 256 / i1 : c === "playback" ? 1024 / i1 : Math.max(2, Math.min(128, Math.round(c * i1 / 128))) * 128 / i1, this._nativeAudioContext = s, n.name === "webkitAudioContext" ? (this._nativeGainNode = s.createGain(), this._nativeOscillatorNode = s.createOscillator(), this._nativeGainNode.gain.value = 1e-37, this._nativeOscillatorNode.connect(this._nativeGainNode).connect(s.destination), this._nativeOscillatorNode.start()) : (this._nativeGainNode = null, this._nativeOscillatorNode = null), this._state = null, s.state === "running") {
                this._state = "suspended";
                let p2 = ()=>{
                    this._state === "suspended" && (this._state = null), s.removeEventListener("statechange", p2);
                };
                s.addEventListener("statechange", p2);
            }
        }
        get baseLatency() {
            return this._baseLatency;
        }
        get state() {
            return this._state !== null ? this._state : this._nativeAudioContext.state;
        }
        close() {
            return this.state === "closed" ? this._nativeAudioContext.close().then(()=>{
                throw e();
            }) : (this._state === "suspended" && (this._state = null), this._nativeAudioContext.close().then(()=>{
                this._nativeGainNode !== null && this._nativeOscillatorNode !== null && (this._nativeOscillatorNode.stop(), this._nativeGainNode.disconnect(), this._nativeOscillatorNode.disconnect()), Re1(this);
            }));
        }
        resume() {
            return this._state === "suspended" ? new Promise((u, s)=>{
                let c = ()=>{
                    this._nativeAudioContext.removeEventListener("statechange", c), this._nativeAudioContext.state === "running" ? u() : this.resume().then(u, s);
                };
                this._nativeAudioContext.addEventListener("statechange", c);
            }) : this._nativeAudioContext.resume().catch((u)=>{
                throw u === void 0 || u.code === 15 ? e() : u;
            });
        }
        suspend() {
            return this._nativeAudioContext.suspend().catch((u)=>{
                throw u === void 0 ? e() : u;
            });
        }
    };
var an = (e, r, t, o, n, a)=>class extends t {
        constructor(s, c){
            super(s), this._nativeContext = s, Qe1.set(this, s), o(s) && n.set(s, new Set), this._destination = new e(this, c), this._listener = r(this, s), this._onstatechange = null;
        }
        get currentTime() {
            return this._nativeContext.currentTime;
        }
        get destination() {
            return this._destination;
        }
        get listener() {
            return this._listener;
        }
        get onstatechange() {
            return this._onstatechange;
        }
        set onstatechange(s) {
            let c = typeof s == "function" ? a(this, s) : null;
            this._nativeContext.onstatechange = c;
            let i1 = this._nativeContext.onstatechange;
            this._onstatechange = i1 !== null && i1 === c ? s : i1;
        }
        get sampleRate() {
            return this._nativeContext.sampleRate;
        }
        get state() {
            return this._nativeContext.state;
        }
    };
var ye1 = (e)=>{
    let r = new Uint32Array([
        1179011410,
        40,
        1163280727,
        544501094,
        16,
        131073,
        44100,
        176400,
        1048580,
        1635017060,
        4,
        0
    ]);
    try {
        let t = e.decodeAudioData(r.buffer, ()=>{});
        return t === void 0 ? !1 : (t.catch(()=>{}), !0);
    } catch  {}
    return !1;
};
var Wa = {
    numberOfChannels: 1
}, cn = (e, r, t, o, n)=>class extends o {
        constructor(u){
            let { length: s , numberOfChannels: c , sampleRate: i1  } = {
                ...Wa,
                ...u
            }, p1 = t(c, s, i1);
            e(ye1, ()=>ye1(p1)) || p1.addEventListener("statechange", (()=>{
                let l = 0, m = (f)=>{
                    this._state === "running" && (l > 0 ? (p1.removeEventListener("statechange", m), f.stopImmediatePropagation(), this._waitForThePromiseToSettle(f)) : l += 1);
                };
                return m;
            })()), super(p1, c), this._length = s, this._nativeOfflineAudioContext = p1, this._state = null;
        }
        get length() {
            return this._nativeOfflineAudioContext.length === void 0 ? this._length : this._nativeOfflineAudioContext.length;
        }
        get state() {
            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
        }
        startRendering() {
            return this._state === "running" ? Promise.reject(r()) : (this._state = "running", n(this.destination, this._nativeOfflineAudioContext).finally(()=>{
                this._state = null, Re1(this);
            }));
        }
        _waitForThePromiseToSettle(u) {
            this._state === null ? this._nativeOfflineAudioContext.dispatchEvent(u) : setTimeout(()=>this._waitForThePromiseToSettle(u));
        }
    };
var un = (e, r)=>(t, o, n)=>{
        let a = new Set;
        return t.connect = ((u)=>(s, c = 0, i1 = 0)=>{
                let p1 = a.size === 0;
                if (r(s)) return u.call(t, s, c, i1), e(a, [
                    s,
                    c,
                    i1
                ], (l)=>l[0] === s && l[1] === c && l[2] === i1, !0), p1 && o(), s;
                u.call(t, s, c), e(a, [
                    s,
                    c
                ], (l)=>l[0] === s && l[1] === c, !0), p1 && o();
            })(t.connect), t.disconnect = ((u)=>(s, c, i1)=>{
                let p1 = a.size > 0;
                if (s === void 0) u.apply(t), a.clear();
                else if (typeof s == "number") {
                    u.call(t, s);
                    for (let m of a)m[1] === s && a.delete(m);
                } else {
                    r(s) ? u.call(t, s, c, i1) : u.call(t, s, c);
                    for (let m1 of a)m1[0] === s && (c === void 0 || m1[1] === c) && (i1 === void 0 || m1[2] === i1) && a.delete(m1);
                }
                let l = a.size === 0;
                p1 && l && n();
            })(t.disconnect), t;
    };
var j1 = (e, r, t)=>{
    let o = r[t];
    o !== void 0 && o !== e[t] && (e[t] = o);
};
var G = (e, r)=>{
    j1(e, r, "channelCount"), j1(e, r, "channelCountMode"), j1(e, r, "channelInterpretation");
};
var Yt1 = (e)=>typeof e.getFloatTimeDomainData == "function";
var pn = (e)=>{
    e.getFloatTimeDomainData = (r)=>{
        let t = new Uint8Array(r.length);
        e.getByteTimeDomainData(t);
        let o = Math.max(t.length, e.fftSize);
        for(let n = 0; n < o; n += 1)r[n] = (t[n] - 128) * .0078125;
        return r;
    };
};
var ln = (e, r)=>(t, o)=>{
        let n = t.createAnalyser();
        if (G(n, o), !(o.maxDecibels > o.minDecibels)) throw r();
        return j1(n, o, "fftSize"), j1(n, o, "maxDecibels"), j1(n, o, "minDecibels"), j1(n, o, "smoothingTimeConstant"), e(Yt1, ()=>Yt1(n)) || pn(n), n;
    };
var dn = (e)=>e === null ? null : e.hasOwnProperty("AudioBuffer") ? e.AudioBuffer : null;
var X1 = (e, r, t)=>{
    let o = r[t];
    o !== void 0 && o !== e[t].value && (e[t].value = o);
};
var fn = (e)=>{
    e.start = ((r)=>{
        let t = !1;
        return (o = 0, n = 0, a)=>{
            if (t) throw K3();
            r.call(e, o, n, a), t = !0;
        };
    })(e.start);
};
var st1 = (e)=>{
    e.start = ((r)=>(t = 0, o = 0, n)=>{
            if (typeof n == "number" && n < 0 || o < 0 || t < 0) throw new RangeError("The parameters can't be negative.");
            r.call(e, t, o, n);
        })(e.start);
};
var at1 = (e)=>{
    e.stop = ((r)=>(t = 0)=>{
            if (t < 0) throw new RangeError("The parameter can't be negative.");
            r.call(e, t);
        })(e.stop);
};
var mn = (e, r, t, o, n, a, u, s, c, i1, p1)=>(l, m)=>{
        let f = l.createBufferSource();
        return G(f, m), X1(f, m, "playbackRate"), j1(f, m, "buffer"), j1(f, m, "loop"), j1(f, m, "loopEnd"), j1(f, m, "loopStart"), r(t, ()=>t(l)) || fn(f), r(o, ()=>o(l)) || c(f), r(n, ()=>n(l)) || i1(f, l), r(a, ()=>a(l)) || st1(f), r(u, ()=>u(l)) || p1(f, l), r(s, ()=>s(l)) || at1(f), e(l, f), f;
    };
var hn = (e)=>e === null ? null : e.hasOwnProperty("AudioContext") ? e.AudioContext : e.hasOwnProperty("webkitAudioContext") ? e.webkitAudioContext : null;
var xn = (e, r)=>(t, o, n)=>{
        let a = t.destination;
        if (a.channelCount !== o) try {
            a.channelCount = o;
        } catch  {}
        n && a.channelCountMode !== "explicit" && (a.channelCountMode = "explicit"), a.maxChannelCount === 0 && Object.defineProperty(a, "maxChannelCount", {
            value: o
        });
        let u = e(t, {
            channelCount: o,
            channelCountMode: a.channelCountMode,
            channelInterpretation: a.channelInterpretation,
            gain: 1
        });
        return r(u, "channelCount", (s)=>()=>s.call(u), (s)=>(c)=>{
                s.call(u, c);
                try {
                    a.channelCount = c;
                } catch (i1) {
                    if (c > a.maxChannelCount) throw i1;
                }
            }), r(u, "channelCountMode", (s)=>()=>s.call(u), (s)=>(c)=>{
                s.call(u, c), a.channelCountMode = c;
            }), r(u, "channelInterpretation", (s)=>()=>s.call(u), (s)=>(c)=>{
                s.call(u, c), a.channelInterpretation = c;
            }), Object.defineProperty(u, "maxChannelCount", {
            get: ()=>a.maxChannelCount
        }), u.connect(a), u;
    };
var Nn = (e)=>e === null ? null : e.hasOwnProperty("AudioWorkletNode") ? e.AudioWorkletNode : null;
var Cn = (e)=>{
    let { port1: r  } = new MessageChannel;
    try {
        r.postMessage(e);
    } finally{
        r.close();
    }
};
var gn = (e, r, t, o, n)=>(a, u, s, c, i1, p1)=>{
        if (s !== null) try {
            let l = new s(a, c, p1), m = new Map, f = null;
            if (Object.defineProperties(l, {
                channelCount: {
                    get: ()=>p1.channelCount,
                    set: ()=>{
                        throw e();
                    }
                },
                channelCountMode: {
                    get: ()=>"explicit",
                    set: ()=>{
                        throw e();
                    }
                },
                onprocessorerror: {
                    get: ()=>f,
                    set: (d1)=>{
                        typeof f == "function" && l.removeEventListener("processorerror", f), f = typeof d1 == "function" ? d1 : null, typeof f == "function" && l.addEventListener("processorerror", f);
                    }
                }
            }), l.addEventListener = ((d1)=>(...h)=>{
                    if (h[0] === "processorerror") {
                        let N = typeof h[1] == "function" ? h[1] : typeof h[1] == "object" && h[1] !== null && typeof h[1].handleEvent == "function" ? h[1].handleEvent : null;
                        if (N !== null) {
                            let C = m.get(h[1]);
                            C !== void 0 ? h[1] = C : (h[1] = (y)=>{
                                y.type === "error" ? (Object.defineProperties(y, {
                                    type: {
                                        value: "processorerror"
                                    }
                                }), N(y)) : N(new ErrorEvent(h[0], {
                                    ...y
                                }));
                            }, m.set(N, h[1]));
                        }
                    }
                    return d1.call(l, "error", h[1], h[2]), d1.call(l, ...h);
                })(l.addEventListener), l.removeEventListener = ((d1)=>(...h)=>{
                    if (h[0] === "processorerror") {
                        let N = m.get(h[1]);
                        N !== void 0 && (m.delete(h[1]), h[1] = N);
                    }
                    return d1.call(l, "error", h[1], h[2]), d1.call(l, h[0], h[1], h[2]);
                })(l.removeEventListener), p1.numberOfOutputs !== 0) {
                let d1 = t(a, {
                    channelCount: 1,
                    channelCountMode: "explicit",
                    channelInterpretation: "discrete",
                    gain: 0
                });
                return l.connect(d1).connect(a.destination), n(l, ()=>d1.disconnect(), ()=>d1.connect(a.destination));
            }
            return l;
        } catch (l1) {
            throw l1.code === 11 ? o() : l1;
        }
        if (i1 === void 0) throw o();
        return Cn(p1), r(a, u, i1, p1);
    };
var Tt1 = (e, r)=>e === null ? 512 : Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(e * r)))));
var vn = (e)=>new Promise((r, t)=>{
        let { port1: o , port2: n  } = new MessageChannel;
        o.onmessage = ({ data: a  })=>{
            o.close(), n.close(), r(a);
        }, o.onmessageerror = ({ data: a  })=>{
            o.close(), n.close(), t(a);
        }, n.postMessage(e);
    });
var An = async (e, r)=>{
    let t = await vn(r);
    return new e(t);
};
var yn = (e, r, t, o)=>{
    let n = Nt1.get(e);
    n === void 0 && (n = new WeakMap, Nt1.set(e, n));
    let a = An(t, o);
    return n.set(r, a), a;
};
var Sn = (e, r, t, o, n, a, u, s, c, i1, p1, l, m)=>(f, d1, h, N)=>{
        if (N.numberOfInputs === 0 && N.numberOfOutputs === 0) throw c();
        let C = Array.isArray(N.outputChannelCount) ? N.outputChannelCount : Array.from(N.outputChannelCount);
        if (C.some((T1)=>T1 < 1)) throw c();
        if (C.length !== N.numberOfOutputs) throw r();
        if (N.channelCountMode !== "explicit") throw c();
        let y = N.channelCount * N.numberOfInputs, O = C.reduce((T1, W)=>T1 + W, 0), w = h.parameterDescriptors === void 0 ? 0 : h.parameterDescriptors.length;
        if (y + w > 6 || O > 6) throw c();
        let x1 = new MessageChannel, g = [], v = [];
        for(let T1 = 0; T1 < N.numberOfInputs; T1 += 1)g.push(u(f, {
            channelCount: N.channelCount,
            channelCountMode: N.channelCountMode,
            channelInterpretation: N.channelInterpretation,
            gain: 1
        })), v.push(n(f, {
            channelCount: N.channelCount,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            numberOfOutputs: N.channelCount
        }));
        let A1 = [];
        if (h.parameterDescriptors !== void 0) for (let { defaultValue: T2 , maxValue: W , minValue: se , name: J  } of h.parameterDescriptors){
            let Z = a(f, {
                channelCount: 1,
                channelCountMode: "explicit",
                channelInterpretation: "discrete",
                offset: N.parameterData[J] !== void 0 ? N.parameterData[J] : T2 === void 0 ? 0 : T2
            });
            Object.defineProperties(Z.offset, {
                defaultValue: {
                    get: ()=>T2 === void 0 ? 0 : T2
                },
                maxValue: {
                    get: ()=>W === void 0 ? te2 : W
                },
                minValue: {
                    get: ()=>se === void 0 ? re : se
                }
            }), A1.push(Z);
        }
        let M = o(f, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "speakers",
            numberOfInputs: Math.max(1, y + w)
        }), _ = Tt1(d1, f.sampleRate), I = s(f, _, y + w, Math.max(1, O)), S1 = n(f, {
            channelCount: Math.max(1, O),
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            numberOfOutputs: Math.max(1, O)
        }), b = [];
        for(let T3 = 0; T3 < N.numberOfOutputs; T3 += 1)b.push(o(f, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "speakers",
            numberOfInputs: C[T3]
        }));
        for(let T4 = 0; T4 < N.numberOfInputs; T4 += 1){
            g[T4].connect(v[T4]);
            for(let W1 = 0; W1 < N.channelCount; W1 += 1)v[T4].connect(M, W1, T4 * N.channelCount + W1);
        }
        let E = new tt1(h.parameterDescriptors === void 0 ? [] : h.parameterDescriptors.map(({ name: T1  }, W)=>{
            let se = A1[W];
            return se.connect(M, 0, y + W), se.start(0), [
                T1,
                se.offset
            ];
        }));
        M.connect(I);
        let k = N.channelInterpretation, P = null, F = N.numberOfOutputs === 0 ? [
            I
        ] : b, V = {
            get bufferSize () {
                return _;
            },
            get channelCount () {
                return N.channelCount;
            },
            set channelCount (T){
                throw t();
            },
            get channelCountMode () {
                return N.channelCountMode;
            },
            set channelCountMode (T){
                throw t();
            },
            get channelInterpretation () {
                return k;
            },
            set channelInterpretation (T){
                for (let W2 of g)W2.channelInterpretation = T;
                k = T;
            },
            get context () {
                return I.context;
            },
            get inputs () {
                return g;
            },
            get numberOfInputs () {
                return N.numberOfInputs;
            },
            get numberOfOutputs () {
                return N.numberOfOutputs;
            },
            get onprocessorerror () {
                return P;
            },
            set onprocessorerror (T){
                typeof P == "function" && V.removeEventListener("processorerror", P), P = typeof T == "function" ? T : null, typeof P == "function" && V.addEventListener("processorerror", P);
            },
            get parameters () {
                return E;
            },
            get port () {
                return x1.port2;
            },
            addEventListener (...T1) {
                return I.addEventListener(T1[0], T1[1], T1[2]);
            },
            connect: e.bind(null, F),
            disconnect: i1.bind(null, F),
            dispatchEvent (...T1) {
                return I.dispatchEvent(T1[0]);
            },
            removeEventListener (...T1) {
                return I.removeEventListener(T1[0], T1[1], T1[2]);
            }
        }, R = new Map;
        x1.port1.addEventListener = ((T1)=>(...W)=>{
                if (W[0] === "message") {
                    let se = typeof W[1] == "function" ? W[1] : typeof W[1] == "object" && W[1] !== null && typeof W[1].handleEvent == "function" ? W[1].handleEvent : null;
                    if (se !== null) {
                        let J = R.get(W[1]);
                        J !== void 0 ? W[1] = J : (W[1] = (Z)=>{
                            p1(f.currentTime, f.sampleRate, ()=>se(Z));
                        }, R.set(se, W[1]));
                    }
                }
                return T1.call(x1.port1, W[0], W[1], W[2]);
            })(x1.port1.addEventListener), x1.port1.removeEventListener = ((T1)=>(...W)=>{
                if (W[0] === "message") {
                    let se = R.get(W[1]);
                    se !== void 0 && (R.delete(W[1]), W[1] = se);
                }
                return T1.call(x1.port1, W[0], W[1], W[2]);
            })(x1.port1.removeEventListener);
        let B = null;
        Object.defineProperty(x1.port1, "onmessage", {
            get: ()=>B,
            set: (T1)=>{
                typeof B == "function" && x1.port1.removeEventListener("message", B), B = typeof T1 == "function" ? T1 : null, typeof B == "function" && (x1.port1.addEventListener("message", B), x1.port1.start());
            }
        }), h.prototype.port = x1.port1;
        let L = null;
        yn(f, V, h, N).then((T1)=>L = T1);
        let fe = ot1(N.numberOfInputs, N.channelCount), me = ot1(N.numberOfOutputs, C), U = h.parameterDescriptors === void 0 ? [] : h.parameterDescriptors.reduce((T1, { name: W  })=>({
                ...T1,
                [W]: new Float32Array(128)
            }), {}), $ = !0, pe = ()=>{
            N.numberOfOutputs > 0 && I.disconnect(S1);
            for(let T1 = 0, W = 0; T1 < N.numberOfOutputs; T1 += 1){
                let se = b[T1];
                for(let J = 0; J < C[T1]; J += 1)S1.disconnect(se, W + J, J);
                W += C[T1];
            }
        }, D1 = new Map;
        I.onaudioprocess = ({ inputBuffer: T1 , outputBuffer: W  })=>{
            if (L !== null) {
                let se = l(V);
                for(let J = 0; J < _; J += 128){
                    for(let Z = 0; Z < N.numberOfInputs; Z += 1)for(let ee = 0; ee < N.channelCount; ee += 1)rt1(T1, fe[Z], ee, ee, J);
                    h.parameterDescriptors !== void 0 && h.parameterDescriptors.forEach(({ name: Z  }, ee)=>{
                        rt1(T1, U, Z, y + ee, J);
                    });
                    for(let Z1 = 0; Z1 < N.numberOfInputs; Z1 += 1)for(let ee1 = 0; ee1 < C[Z1]; ee1 += 1)me[Z1][ee1].byteLength === 0 && (me[Z1][ee1] = new Float32Array(128));
                    try {
                        let Z2 = fe.map((xe, Pe)=>{
                            if (se[Pe].size > 0) return D1.set(Pe, _ / 128), xe;
                            let kt = D1.get(Pe);
                            return kt === void 0 ? [] : (xe.every((da)=>da.every((fa)=>fa === 0)) && (kt === 1 ? D1.delete(Pe) : D1.set(Pe, kt - 1)), xe);
                        });
                        $ = p1(f.currentTime + J / f.sampleRate, f.sampleRate, ()=>L.process(Z2, me, U));
                        for(let xe = 0, Pe = 0; xe < N.numberOfOutputs; xe += 1){
                            for(let ft = 0; ft < C[xe]; ft += 1)It1(W, me[xe], ft, Pe + ft, J);
                            Pe += C[xe];
                        }
                    } catch (Z3) {
                        $ = !1, V.dispatchEvent(new ErrorEvent("processorerror", {
                            colno: Z3.colno,
                            filename: Z3.filename,
                            lineno: Z3.lineno,
                            message: Z3.message
                        }));
                    }
                    if (!$) {
                        for(let Z4 = 0; Z4 < N.numberOfInputs; Z4 += 1){
                            g[Z4].disconnect(v[Z4]);
                            for(let ee2 = 0; ee2 < N.channelCount; ee2 += 1)v[J].disconnect(M, ee2, Z4 * N.channelCount + ee2);
                        }
                        if (h.parameterDescriptors !== void 0) {
                            let Z5 = h.parameterDescriptors.length;
                            for(let ee3 = 0; ee3 < Z5; ee3 += 1){
                                let xe1 = A1[ee3];
                                xe1.disconnect(M, 0, y + ee3), xe1.stop();
                            }
                        }
                        M.disconnect(I), I.onaudioprocess = null, Be ? pe() : Ye();
                        break;
                    }
                }
            }
        };
        let Be = !1, Ve = u(f, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            gain: 0
        }), Xe = ()=>I.connect(Ve).connect(f.destination), Ye = ()=>{
            I.disconnect(Ve), Ve.disconnect();
        }, pa = ()=>{
            if ($) {
                Ye(), N.numberOfOutputs > 0 && I.connect(S1);
                for(let T1 = 0, W = 0; T1 < N.numberOfOutputs; T1 += 1){
                    let se = b[T1];
                    for(let J = 0; J < C[T1]; J += 1)S1.connect(se, W + J, J);
                    W += C[T1];
                }
            }
            Be = !0;
        }, la = ()=>{
            $ && (Xe(), pe()), Be = !1;
        };
        return Xe(), m(V, pa, la);
    };
var zt1 = (e, r)=>{
    let t = e.createBiquadFilter();
    return G(t, r), X1(t, r, "Q"), X1(t, r, "detune"), X1(t, r, "frequency"), X1(t, r, "gain"), j1(t, r, "type"), t;
};
var wn = (e, r)=>(t, o)=>{
        let n = t.createChannelMerger(o.numberOfInputs);
        return e !== null && e.name === "webkitAudioContext" && r(t, n), G(n, o), n;
    };
var _n = (e)=>{
    let r = e.numberOfOutputs;
    Object.defineProperty(e, "channelCount", {
        get: ()=>r,
        set: (t)=>{
            if (t !== r) throw K3();
        }
    }), Object.defineProperty(e, "channelCountMode", {
        get: ()=>"explicit",
        set: (t)=>{
            if (t !== "explicit") throw K3();
        }
    }), Object.defineProperty(e, "channelInterpretation", {
        get: ()=>"discrete",
        set: (t)=>{
            if (t !== "discrete") throw K3();
        }
    });
};
var it1 = (e, r)=>{
    let t = e.createChannelSplitter(r.numberOfOutputs);
    return G(t, r), _n(t), t;
};
var On = (e, r, t, o, n)=>(a, u)=>{
        if (a.createConstantSource === void 0) return t(a, u);
        let s = a.createConstantSource();
        return G(s, u), X1(s, u, "offset"), r(o, ()=>o(a)) || st1(s), r(n, ()=>n(a)) || at1(s), e(a, s), s;
    };
var ge1 = (e, r)=>(e.connect = r.connect.bind(r), e.disconnect = r.disconnect.bind(r), e);
var In = (e, r, t, o)=>(n, { offset: a , ...u })=>{
        let s = n.createBuffer(1, 2, 44100), c = r(n, {
            buffer: null,
            channelCount: 2,
            channelCountMode: "max",
            channelInterpretation: "speakers",
            loop: !1,
            loopEnd: 0,
            loopStart: 0,
            playbackRate: 1
        }), i1 = t(n, {
            ...u,
            gain: a
        }), p1 = s.getChannelData(0);
        p1[0] = 1, p1[1] = 1, c.buffer = s, c.loop = !0;
        let l = {
            get bufferSize () {},
            get channelCount () {
                return i1.channelCount;
            },
            set channelCount (d){
                i1.channelCount = d;
            },
            get channelCountMode () {
                return i1.channelCountMode;
            },
            set channelCountMode (d){
                i1.channelCountMode = d;
            },
            get channelInterpretation () {
                return i1.channelInterpretation;
            },
            set channelInterpretation (d){
                i1.channelInterpretation = d;
            },
            get context () {
                return i1.context;
            },
            get inputs () {
                return [];
            },
            get numberOfInputs () {
                return c.numberOfInputs;
            },
            get numberOfOutputs () {
                return i1.numberOfOutputs;
            },
            get offset () {
                return i1.gain;
            },
            get onended () {
                return c.onended;
            },
            set onended (d){
                c.onended = d;
            },
            addEventListener (...d1) {
                return c.addEventListener(d1[0], d1[1], d1[2]);
            },
            dispatchEvent (...d1) {
                return c.dispatchEvent(d1[0]);
            },
            removeEventListener (...d1) {
                return c.removeEventListener(d1[0], d1[1], d1[2]);
            },
            start (d1 = 0) {
                c.start.call(c, d1);
            },
            stop (d1 = 0) {
                c.stop.call(c, d1);
            }
        }, m = ()=>c.connect(i1), f = ()=>c.disconnect(i1);
        return e(n, c), o(ge1(l, i1), m, f);
    };
var Mn = (e, r)=>(t, o)=>{
        let n = t.createConvolver();
        if (G(n, o), o.disableNormalization === n.normalize && (n.normalize = !o.disableNormalization), j1(n, o, "buffer"), o.channelCount > 2 || (r(n, "channelCount", (a)=>()=>a.call(n), (a)=>(u)=>{
                if (u > 2) throw e();
                return a.call(n, u);
            }), o.channelCountMode === "max")) throw e();
        return r(n, "channelCountMode", (a)=>()=>a.call(n), (a)=>(u)=>{
                if (u === "max") throw e();
                return a.call(n, u);
            }), n;
    };
var Qt1 = (e, r)=>{
    let t = e.createDelay(r.maxDelayTime);
    return G(t, r), X1(t, r, "delayTime"), t;
};
var En = (e)=>(r, t)=>{
        let o = r.createDynamicsCompressor();
        if (G(o, t), t.channelCount > 2 || t.channelCountMode === "max") throw e();
        return X1(o, t, "attack"), X1(o, t, "knee"), X1(o, t, "ratio"), X1(o, t, "release"), X1(o, t, "threshold"), o;
    };
var de1 = (e, r)=>{
    let t = e.createGain();
    return G(t, r), X1(t, r, "gain"), t;
};
var Tn = (e)=>(r, t, o)=>{
        if (r.createIIRFilter === void 0) return e(r, t, o);
        let n = r.createIIRFilter(o.feedforward, o.feedback);
        return G(n, o), n;
    };
function La(e, r) {
    let t = r[0] * r[0] + r[1] * r[1];
    return [
        (e[0] * r[0] + e[1] * r[1]) / t,
        (e[1] * r[0] - e[0] * r[1]) / t
    ];
}
function Ba(e, r) {
    return [
        e[0] * r[0] - e[1] * r[1],
        e[0] * r[1] + e[1] * r[0]
    ];
}
function bn(e, r) {
    let t = [
        0,
        0
    ];
    for(let o = e.length - 1; o >= 0; o -= 1)t = Ba(t, r), t[0] += e[o];
    return t;
}
var Pn = (e, r, t, o)=>(n, a, { channelCount: u , channelCountMode: s , channelInterpretation: c , feedback: i1 , feedforward: p1  })=>{
        let l = Tt1(a, n.sampleRate), m = i1 instanceof Float64Array ? i1 : new Float64Array(i1), f = p1 instanceof Float64Array ? p1 : new Float64Array(p1), d1 = m.length, h = f.length, N = Math.min(d1, h);
        if (d1 === 0 || d1 > 20) throw o();
        if (m[0] === 0) throw r();
        if (h === 0 || h > 20) throw o();
        if (f[0] === 0) throw r();
        if (m[0] !== 1) {
            for(let A1 = 0; A1 < h; A1 += 1)f[A1] /= m[0];
            for(let A2 = 1; A2 < d1; A2 += 1)m[A2] /= m[0];
        }
        let C = t(n, l, u, u);
        C.channelCount = u, C.channelCountMode = s, C.channelInterpretation = c;
        let y = 32, O = [], w = [], x1 = [];
        for(let A3 = 0; A3 < u; A3 += 1){
            O.push(0);
            let M = new Float32Array(y), _ = new Float32Array(y);
            M.fill(0), _.fill(0), w.push(M), x1.push(_);
        }
        C.onaudioprocess = (A1)=>{
            let M = A1.inputBuffer, _ = A1.outputBuffer, I = M.numberOfChannels;
            for(let S1 = 0; S1 < I; S1 += 1){
                let b = M.getChannelData(S1), E = _.getChannelData(S1);
                O[S1] = Et1(m, d1, f, h, N, w[S1], x1[S1], O[S1], y, b, E);
            }
        };
        let g = n.sampleRate / 2;
        return ge1({
            get bufferSize () {
                return l;
            },
            get channelCount () {
                return C.channelCount;
            },
            set channelCount (A){
                C.channelCount = A;
            },
            get channelCountMode () {
                return C.channelCountMode;
            },
            set channelCountMode (A){
                C.channelCountMode = A;
            },
            get channelInterpretation () {
                return C.channelInterpretation;
            },
            set channelInterpretation (A){
                C.channelInterpretation = A;
            },
            get context () {
                return C.context;
            },
            get inputs () {
                return [
                    C
                ];
            },
            get numberOfInputs () {
                return C.numberOfInputs;
            },
            get numberOfOutputs () {
                return C.numberOfOutputs;
            },
            addEventListener (...A1) {
                return C.addEventListener(A1[0], A1[1], A1[2]);
            },
            dispatchEvent (...A1) {
                return C.dispatchEvent(A1[0]);
            },
            getFrequencyResponse (A1, M, _) {
                if (A1.length !== M.length || M.length !== _.length) throw e();
                let I = A1.length;
                for(let S1 = 0; S1 < I; S1 += 1){
                    let b = -Math.PI * (A1[S1] / g), E = [
                        Math.cos(b),
                        Math.sin(b)
                    ], k = bn(f, E), P = bn(m, E), F = La(k, P);
                    M[S1] = Math.sqrt(F[0] * F[0] + F[1] * F[1]), _[S1] = Math.atan2(F[1], F[0]);
                }
            },
            removeEventListener (...A1) {
                return C.removeEventListener(A1[0], A1[1], A1[2]);
            }
        }, C);
    };
var Fn = (e, r)=>e.createMediaElementSource(r.mediaElement);
var Dn = (e, r)=>{
    let t = e.createMediaStreamDestination();
    return G(t, r), t.numberOfOutputs === 1 && Object.defineProperty(t, "numberOfOutputs", {
        get: ()=>0
    }), t;
};
var Rn = (e, { mediaStream: r  })=>{
    let t = r.getAudioTracks();
    t.sort((a, u)=>a.id < u.id ? -1 : a.id > u.id ? 1 : 0);
    let o = t.slice(0, 1), n = e.createMediaStreamSource(new MediaStream(o));
    return Object.defineProperty(n, "mediaStream", {
        value: r
    }), n;
};
var kn = (e, r)=>(t, { mediaStreamTrack: o  })=>{
        if (typeof t.createMediaStreamTrackSource == "function") return t.createMediaStreamTrackSource(o);
        let n = new MediaStream([
            o
        ]), a = t.createMediaStreamSource(n);
        if (o.kind !== "audio") throw e();
        if (r(t)) throw new TypeError;
        return a;
    };
var Wn = (e)=>e === null ? null : e.hasOwnProperty("OfflineAudioContext") ? e.OfflineAudioContext : e.hasOwnProperty("webkitOfflineAudioContext") ? e.webkitOfflineAudioContext : null;
var Ln = (e, r, t, o, n, a)=>(u, s)=>{
        let c = u.createOscillator();
        return G(c, s), X1(c, s, "detune"), X1(c, s, "frequency"), s.periodicWave !== void 0 ? c.setPeriodicWave(s.periodicWave) : j1(c, s, "type"), r(t, ()=>t(u)) || st1(c), r(o, ()=>o(u)) || a(c, u), r(n, ()=>n(u)) || at1(c), e(u, c), c;
    };
var Bn = (e)=>(r, t)=>{
        let o = r.createPanner();
        return o.orientationX === void 0 ? e(r, t) : (G(o, t), X1(o, t, "orientationX"), X1(o, t, "orientationY"), X1(o, t, "orientationZ"), X1(o, t, "positionX"), X1(o, t, "positionY"), X1(o, t, "positionZ"), j1(o, t, "coneInnerAngle"), j1(o, t, "coneOuterAngle"), j1(o, t, "coneOuterGain"), j1(o, t, "distanceModel"), j1(o, t, "maxDistance"), j1(o, t, "panningModel"), j1(o, t, "refDistance"), j1(o, t, "rolloffFactor"), o);
    };
var Vn = (e, r, t, o, n, a, u, s, c, i1)=>(p1, { coneInnerAngle: l , coneOuterAngle: m , coneOuterGain: f , distanceModel: d1 , maxDistance: h , orientationX: N , orientationY: C , orientationZ: y , panningModel: O , positionX: w , positionY: x1 , positionZ: g , refDistance: v , rolloffFactor: A1 , ...M })=>{
        let _ = p1.createPanner();
        if (M.channelCount > 2 || M.channelCountMode === "max") throw u();
        G(_, M);
        let I = {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete"
        }, S1 = t(p1, {
            ...I,
            channelInterpretation: "speakers",
            numberOfInputs: 6
        }), b = o(p1, {
            ...M,
            gain: 1
        }), E = o(p1, {
            ...I,
            gain: 1
        }), k = o(p1, {
            ...I,
            gain: 0
        }), P = o(p1, {
            ...I,
            gain: 0
        }), F = o(p1, {
            ...I,
            gain: 0
        }), V = o(p1, {
            ...I,
            gain: 0
        }), R = o(p1, {
            ...I,
            gain: 0
        }), B = n(p1, 256, 6, 1), L = a(p1, {
            ...I,
            curve: new Float32Array([
                1,
                1
            ]),
            oversample: "none"
        }), Y = [
            N,
            C,
            y
        ], fe = [
            w,
            x1,
            g
        ], me = new Float32Array(1);
        B.onaudioprocess = ({ inputBuffer: D1  })=>{
            let Be = [
                c(D1, me, 0),
                c(D1, me, 1),
                c(D1, me, 2)
            ];
            Be.some((Xe, Ye)=>Xe !== Y[Ye]) && (_.setOrientation(...Be), Y = Be);
            let Ve = [
                c(D1, me, 3),
                c(D1, me, 4),
                c(D1, me, 5)
            ];
            Ve.some((Xe, Ye)=>Xe !== fe[Ye]) && (_.setPosition(...Ve), fe = Ve);
        }, Object.defineProperty(k.gain, "defaultValue", {
            get: ()=>0
        }), Object.defineProperty(P.gain, "defaultValue", {
            get: ()=>0
        }), Object.defineProperty(F.gain, "defaultValue", {
            get: ()=>0
        }), Object.defineProperty(V.gain, "defaultValue", {
            get: ()=>0
        }), Object.defineProperty(R.gain, "defaultValue", {
            get: ()=>0
        });
        let U = {
            get bufferSize () {},
            get channelCount () {
                return _.channelCount;
            },
            set channelCount (D){
                if (D > 2) throw u();
                b.channelCount = D, _.channelCount = D;
            },
            get channelCountMode () {
                return _.channelCountMode;
            },
            set channelCountMode (D){
                if (D === "max") throw u();
                b.channelCountMode = D, _.channelCountMode = D;
            },
            get channelInterpretation () {
                return _.channelInterpretation;
            },
            set channelInterpretation (D){
                b.channelInterpretation = D, _.channelInterpretation = D;
            },
            get coneInnerAngle () {
                return _.coneInnerAngle;
            },
            set coneInnerAngle (D){
                _.coneInnerAngle = D;
            },
            get coneOuterAngle () {
                return _.coneOuterAngle;
            },
            set coneOuterAngle (D){
                _.coneOuterAngle = D;
            },
            get coneOuterGain () {
                return _.coneOuterGain;
            },
            set coneOuterGain (D){
                if (D < 0 || D > 1) throw r();
                _.coneOuterGain = D;
            },
            get context () {
                return _.context;
            },
            get distanceModel () {
                return _.distanceModel;
            },
            set distanceModel (D){
                _.distanceModel = D;
            },
            get inputs () {
                return [
                    b
                ];
            },
            get maxDistance () {
                return _.maxDistance;
            },
            set maxDistance (D){
                if (D < 0) throw new RangeError;
                _.maxDistance = D;
            },
            get numberOfInputs () {
                return _.numberOfInputs;
            },
            get numberOfOutputs () {
                return _.numberOfOutputs;
            },
            get orientationX () {
                return E.gain;
            },
            get orientationY () {
                return k.gain;
            },
            get orientationZ () {
                return P.gain;
            },
            get panningModel () {
                return _.panningModel;
            },
            set panningModel (D){
                _.panningModel = D;
            },
            get positionX () {
                return F.gain;
            },
            get positionY () {
                return V.gain;
            },
            get positionZ () {
                return R.gain;
            },
            get refDistance () {
                return _.refDistance;
            },
            set refDistance (D){
                if (D < 0) throw new RangeError;
                _.refDistance = D;
            },
            get rolloffFactor () {
                return _.rolloffFactor;
            },
            set rolloffFactor (D){
                if (D < 0) throw new RangeError;
                _.rolloffFactor = D;
            },
            addEventListener (...D1) {
                return b.addEventListener(D1[0], D1[1], D1[2]);
            },
            dispatchEvent (...D1) {
                return b.dispatchEvent(D1[0]);
            },
            removeEventListener (...D1) {
                return b.removeEventListener(D1[0], D1[1], D1[2]);
            }
        };
        l !== U.coneInnerAngle && (U.coneInnerAngle = l), m !== U.coneOuterAngle && (U.coneOuterAngle = m), f !== U.coneOuterGain && (U.coneOuterGain = f), d1 !== U.distanceModel && (U.distanceModel = d1), h !== U.maxDistance && (U.maxDistance = h), N !== U.orientationX.value && (U.orientationX.value = N), C !== U.orientationY.value && (U.orientationY.value = C), y !== U.orientationZ.value && (U.orientationZ.value = y), O !== U.panningModel && (U.panningModel = O), w !== U.positionX.value && (U.positionX.value = w), x1 !== U.positionY.value && (U.positionY.value = x1), g !== U.positionZ.value && (U.positionZ.value = g), v !== U.refDistance && (U.refDistance = v), A1 !== U.rolloffFactor && (U.rolloffFactor = A1), (Y[0] !== 1 || Y[1] !== 0 || Y[2] !== 0) && _.setOrientation(...Y), (fe[0] !== 0 || fe[1] !== 0 || fe[2] !== 0) && _.setPosition(...fe);
        let $ = ()=>{
            b.connect(_), e(b, L, 0, 0), L.connect(E).connect(S1, 0, 0), L.connect(k).connect(S1, 0, 1), L.connect(P).connect(S1, 0, 2), L.connect(F).connect(S1, 0, 3), L.connect(V).connect(S1, 0, 4), L.connect(R).connect(S1, 0, 5), S1.connect(B).connect(p1.destination);
        }, pe = ()=>{
            b.disconnect(_), s(b, L, 0, 0), L.disconnect(E), E.disconnect(S1), L.disconnect(k), k.disconnect(S1), L.disconnect(P), P.disconnect(S1), L.disconnect(F), F.disconnect(S1), L.disconnect(V), V.disconnect(S1), L.disconnect(R), R.disconnect(S1), S1.disconnect(B), B.disconnect(p1.destination);
        };
        return i1(ge1(U, _), $, pe);
    };
var Gn = (e)=>(r, { disableNormalization: t , imag: o , real: n  })=>{
        let a = o instanceof Float32Array ? o : new Float32Array(o), u = n instanceof Float32Array ? n : new Float32Array(n), s = r.createPeriodicWave(u, a, {
            disableNormalization: t
        });
        if (Array.from(o).length < 2) throw e();
        return s;
    };
var ct1 = (e, r, t, o)=>e.createScriptProcessor(r, t, o);
var Un = (e, r)=>(t, o)=>{
        let n = o.channelCountMode;
        if (n === "clamped-max") throw r();
        if (t.createStereoPanner === void 0) return e(t, o);
        let a = t.createStereoPanner();
        return G(a, o), X1(a, o, "pan"), Object.defineProperty(a, "channelCountMode", {
            get: ()=>n,
            set: (u)=>{
                if (u !== n) throw r();
            }
        }), a;
    };
var qn = (e, r, t, o, n, a)=>{
    let s = new Float32Array([
        1,
        1
    ]), c = Math.PI / 2, i1 = {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete"
    }, p1 = {
        ...i1,
        oversample: "none"
    }, l = (d1, h, N, C)=>{
        let y = new Float32Array(16385), O = new Float32Array(16385);
        for(let M = 0; M < 16385; M += 1){
            let _ = M / 16384 * c;
            y[M] = Math.cos(_), O[M] = Math.sin(_);
        }
        let w = t(d1, {
            ...i1,
            gain: 0
        }), x1 = o(d1, {
            ...p1,
            curve: y
        }), g = o(d1, {
            ...p1,
            curve: s
        }), v = t(d1, {
            ...i1,
            gain: 0
        }), A1 = o(d1, {
            ...p1,
            curve: O
        });
        return {
            connectGraph () {
                h.connect(w), h.connect(g.inputs === void 0 ? g : g.inputs[0]), h.connect(v), g.connect(N), N.connect(x1.inputs === void 0 ? x1 : x1.inputs[0]), N.connect(A1.inputs === void 0 ? A1 : A1.inputs[0]), x1.connect(w.gain), A1.connect(v.gain), w.connect(C, 0, 0), v.connect(C, 0, 1);
            },
            disconnectGraph () {
                h.disconnect(w), h.disconnect(g.inputs === void 0 ? g : g.inputs[0]), h.disconnect(v), g.disconnect(N), N.disconnect(x1.inputs === void 0 ? x1 : x1.inputs[0]), N.disconnect(A1.inputs === void 0 ? A1 : A1.inputs[0]), x1.disconnect(w.gain), A1.disconnect(v.gain), w.disconnect(C, 0, 0), v.disconnect(C, 0, 1);
            }
        };
    }, m = (d1, h, N, C)=>{
        let y = new Float32Array(16385), O = new Float32Array(16385), w = new Float32Array(16385), x1 = new Float32Array(16385), g = Math.floor(16385 / 2);
        for(let F = 0; F < 16385; F += 1)if (F > g) {
            let V = (F - g) / (16384 - g) * c;
            y[F] = Math.cos(V), O[F] = Math.sin(V), w[F] = 0, x1[F] = 1;
        } else {
            let V1 = F / (16384 - g) * c;
            y[F] = 1, O[F] = 0, w[F] = Math.cos(V1), x1[F] = Math.sin(V1);
        }
        let v = r(d1, {
            channelCount: 2,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            numberOfOutputs: 2
        }), A1 = t(d1, {
            ...i1,
            gain: 0
        }), M = o(d1, {
            ...p1,
            curve: y
        }), _ = t(d1, {
            ...i1,
            gain: 0
        }), I = o(d1, {
            ...p1,
            curve: O
        }), S1 = o(d1, {
            ...p1,
            curve: s
        }), b = t(d1, {
            ...i1,
            gain: 0
        }), E = o(d1, {
            ...p1,
            curve: w
        }), k = t(d1, {
            ...i1,
            gain: 0
        }), P = o(d1, {
            ...p1,
            curve: x1
        });
        return {
            connectGraph () {
                h.connect(v), h.connect(S1.inputs === void 0 ? S1 : S1.inputs[0]), v.connect(A1, 0), v.connect(_, 0), v.connect(b, 1), v.connect(k, 1), S1.connect(N), N.connect(M.inputs === void 0 ? M : M.inputs[0]), N.connect(I.inputs === void 0 ? I : I.inputs[0]), N.connect(E.inputs === void 0 ? E : E.inputs[0]), N.connect(P.inputs === void 0 ? P : P.inputs[0]), M.connect(A1.gain), I.connect(_.gain), E.connect(b.gain), P.connect(k.gain), A1.connect(C, 0, 0), b.connect(C, 0, 0), _.connect(C, 0, 1), k.connect(C, 0, 1);
            },
            disconnectGraph () {
                h.disconnect(v), h.disconnect(S1.inputs === void 0 ? S1 : S1.inputs[0]), v.disconnect(A1, 0), v.disconnect(_, 0), v.disconnect(b, 1), v.disconnect(k, 1), S1.disconnect(N), N.disconnect(M.inputs === void 0 ? M : M.inputs[0]), N.disconnect(I.inputs === void 0 ? I : I.inputs[0]), N.disconnect(E.inputs === void 0 ? E : E.inputs[0]), N.disconnect(P.inputs === void 0 ? P : P.inputs[0]), M.disconnect(A1.gain), I.disconnect(_.gain), E.disconnect(b.gain), P.disconnect(k.gain), A1.disconnect(C, 0, 0), b.disconnect(C, 0, 0), _.disconnect(C, 0, 1), k.disconnect(C, 0, 1);
            }
        };
    }, f = (d1, h, N, C, y)=>{
        if (h === 1) return l(d1, N, C, y);
        if (h === 2) return m(d1, N, C, y);
        throw n();
    };
    return (d1, { channelCount: h , channelCountMode: N , pan: C , ...y })=>{
        if (N === "max") throw n();
        let O = e(d1, {
            ...y,
            channelCount: 1,
            channelCountMode: N,
            numberOfInputs: 2
        }), w = t(d1, {
            ...y,
            channelCount: h,
            channelCountMode: N,
            gain: 1
        }), x1 = t(d1, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            gain: C
        }), { connectGraph: g , disconnectGraph: v  } = f(d1, h, w, x1, O);
        Object.defineProperty(x1.gain, "defaultValue", {
            get: ()=>0
        }), Object.defineProperty(x1.gain, "maxValue", {
            get: ()=>1
        }), Object.defineProperty(x1.gain, "minValue", {
            get: ()=>-1
        });
        let A1 = {
            get bufferSize () {},
            get channelCount () {
                return w.channelCount;
            },
            set channelCount (S){
                w.channelCount !== S && (M && v(), { connectGraph: g , disconnectGraph: v  } = f(d1, S, w, x1, O), M && g()), w.channelCount = S;
            },
            get channelCountMode () {
                return w.channelCountMode;
            },
            set channelCountMode (S){
                if (S === "clamped-max" || S === "max") throw n();
                w.channelCountMode = S;
            },
            get channelInterpretation () {
                return w.channelInterpretation;
            },
            set channelInterpretation (S){
                w.channelInterpretation = S;
            },
            get context () {
                return w.context;
            },
            get inputs () {
                return [
                    w
                ];
            },
            get numberOfInputs () {
                return w.numberOfInputs;
            },
            get numberOfOutputs () {
                return w.numberOfOutputs;
            },
            get pan () {
                return x1.gain;
            },
            addEventListener (...S1) {
                return w.addEventListener(S1[0], S1[1], S1[2]);
            },
            dispatchEvent (...S1) {
                return w.dispatchEvent(S1[0]);
            },
            removeEventListener (...S1) {
                return w.removeEventListener(S1[0], S1[1], S1[2]);
            }
        }, M = !1, _ = ()=>{
            g(), M = !0;
        }, I = ()=>{
            v(), M = !1;
        };
        return a(ge1(A1, O), _, I);
    };
};
var jn = (e, r, t, o, n, a, u)=>(s, c)=>{
        let i1 = s.createWaveShaper();
        if (a !== null && a.name === "webkitAudioContext" && s.createGain().gain.automationRate === void 0) return t(s, c);
        G(i1, c);
        let p1 = c.curve === null || c.curve instanceof Float32Array ? c.curve : new Float32Array(c.curve);
        if (p1 !== null && p1.length < 2) throw r();
        j1(i1, {
            curve: p1
        }, "curve"), j1(i1, c, "oversample");
        let l = null, m = !1;
        return u(i1, "curve", (h)=>()=>h.call(i1), (h)=>(N)=>(h.call(i1, N), m && (o(N) && l === null ? l = e(s, i1) : !o(N) && l !== null && (l(), l = null)), N)), n(i1, ()=>{
            m = !0, o(i1.curve) && (l = e(s, i1));
        }, ()=>{
            m = !1, l !== null && (l(), l = null);
        });
    };
var Zn = (e, r, t, o, n)=>(a, { curve: u , oversample: s , ...c })=>{
        let i1 = a.createWaveShaper(), p1 = a.createWaveShaper();
        G(i1, c), G(p1, c);
        let l = t(a, {
            ...c,
            gain: 1
        }), m = t(a, {
            ...c,
            gain: -1
        }), f = t(a, {
            ...c,
            gain: 1
        }), d1 = t(a, {
            ...c,
            gain: -1
        }), h = null, N = !1, C = null, y = {
            get bufferSize () {},
            get channelCount () {
                return i1.channelCount;
            },
            set channelCount (x){
                l.channelCount = x, m.channelCount = x, i1.channelCount = x, f.channelCount = x, p1.channelCount = x, d1.channelCount = x;
            },
            get channelCountMode () {
                return i1.channelCountMode;
            },
            set channelCountMode (x){
                l.channelCountMode = x, m.channelCountMode = x, i1.channelCountMode = x, f.channelCountMode = x, p1.channelCountMode = x, d1.channelCountMode = x;
            },
            get channelInterpretation () {
                return i1.channelInterpretation;
            },
            set channelInterpretation (x){
                l.channelInterpretation = x, m.channelInterpretation = x, i1.channelInterpretation = x, f.channelInterpretation = x, p1.channelInterpretation = x, d1.channelInterpretation = x;
            },
            get context () {
                return i1.context;
            },
            get curve () {
                return C;
            },
            set curve (x){
                if (x !== null && x.length < 2) throw r();
                if (x === null) i1.curve = x, p1.curve = x;
                else {
                    let g = x.length, v = new Float32Array(g + 2 - g % 2), A1 = new Float32Array(g + 2 - g % 2);
                    v[0] = x[0], A1[0] = -x[g - 1];
                    let M = Math.ceil((g + 1) / 2), _ = (g + 1) / 2 - 1;
                    for(let I = 1; I < M; I += 1){
                        let S1 = I / M * _, b = Math.floor(S1), E = Math.ceil(S1);
                        v[I] = b === E ? x[b] : (1 - (S1 - b)) * x[b] + (1 - (E - S1)) * x[E], A1[I] = b === E ? -x[g - 1 - b] : -((1 - (S1 - b)) * x[g - 1 - b]) - (1 - (E - S1)) * x[g - 1 - E];
                    }
                    v[M] = g % 2 === 1 ? x[M - 1] : (x[M - 2] + x[M - 1]) / 2, i1.curve = v, p1.curve = A1;
                }
                C = x, N && (o(C) && h === null ? h = e(a, l) : h !== null && (h(), h = null));
            },
            get inputs () {
                return [
                    l
                ];
            },
            get numberOfInputs () {
                return i1.numberOfInputs;
            },
            get numberOfOutputs () {
                return i1.numberOfOutputs;
            },
            get oversample () {
                return i1.oversample;
            },
            set oversample (x){
                i1.oversample = x, p1.oversample = x;
            },
            addEventListener (...x1) {
                return l.addEventListener(x1[0], x1[1], x1[2]);
            },
            dispatchEvent (...x1) {
                return l.dispatchEvent(x1[0]);
            },
            removeEventListener (...x1) {
                return l.removeEventListener(x1[0], x1[1], x1[2]);
            }
        };
        u !== null && (y.curve = u instanceof Float32Array ? u : new Float32Array(u)), s !== y.oversample && (y.oversample = s);
        let O = ()=>{
            l.connect(i1).connect(f), l.connect(m).connect(p1).connect(d1).connect(f), N = !0, o(C) && (h = e(a, l));
        }, w = ()=>{
            l.disconnect(i1), i1.disconnect(f), l.disconnect(m), m.disconnect(p1), p1.disconnect(d1), d1.disconnect(f), N = !1, h !== null && (h(), h = null);
        };
        return n(ge1(y, f), O, w);
    };
var ce2 = ()=>new DOMException("", "NotSupportedError");
var Va = {
    numberOfChannels: 1
}, Xn = (e, r, t, o, n)=>class extends e {
        constructor(u, s, c){
            let i1;
            if (typeof u == "number" && s !== void 0 && c !== void 0) i1 = {
                length: s,
                numberOfChannels: u,
                sampleRate: c
            };
            else if (typeof u == "object") i1 = u;
            else throw new Error("The given parameters are not valid.");
            let { length: p1 , numberOfChannels: l , sampleRate: m  } = {
                ...Va,
                ...i1
            }, f = o(l, p1, m);
            r(ye1, ()=>ye1(f)) || f.addEventListener("statechange", (()=>{
                let d1 = 0, h = (N)=>{
                    this._state === "running" && (d1 > 0 ? (f.removeEventListener("statechange", h), N.stopImmediatePropagation(), this._waitForThePromiseToSettle(N)) : d1 += 1);
                };
                return h;
            })()), super(f, l), this._length = p1, this._nativeOfflineAudioContext = f, this._state = null;
        }
        get length() {
            return this._nativeOfflineAudioContext.length === void 0 ? this._length : this._nativeOfflineAudioContext.length;
        }
        get state() {
            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
        }
        startRendering() {
            return this._state === "running" ? Promise.reject(t()) : (this._state = "running", n(this.destination, this._nativeOfflineAudioContext).finally(()=>{
                this._state = null, Re1(this);
            }));
        }
        _waitForThePromiseToSettle(u) {
            this._state === null ? this._nativeOfflineAudioContext.dispatchEvent(u) : setTimeout(()=>this._waitForThePromiseToSettle(u));
        }
    };
var Ga = {
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    detune: 0,
    frequency: 440,
    periodicWave: void 0,
    type: "sine"
}, Yn = (e, r, t, o, n, a, u)=>class extends e {
        constructor(c, i1){
            let p1 = n(c), l = {
                ...Ga,
                ...i1
            }, m = t(p1, l), f = a(p1), d1 = f ? o() : null, h = c.sampleRate / 2;
            super(c, !1, m, d1), this._detune = r(this, f, m.detune, 153600, -153600), this._frequency = r(this, f, m.frequency, h, -h), this._nativeOscillatorNode = m, this._onended = null, this._oscillatorNodeRenderer = d1, this._oscillatorNodeRenderer !== null && l.periodicWave !== void 0 && (this._oscillatorNodeRenderer.periodicWave = l.periodicWave);
        }
        get detune() {
            return this._detune;
        }
        get frequency() {
            return this._frequency;
        }
        get onended() {
            return this._onended;
        }
        set onended(c) {
            let i1 = typeof c == "function" ? u(this, c) : null;
            this._nativeOscillatorNode.onended = i1;
            let p1 = this._nativeOscillatorNode.onended;
            this._onended = p1 !== null && p1 === i1 ? c : p1;
        }
        get type() {
            return this._nativeOscillatorNode.type;
        }
        set type(c) {
            this._nativeOscillatorNode.type = c, this._oscillatorNodeRenderer !== null && (this._oscillatorNodeRenderer.periodicWave = null);
        }
        setPeriodicWave(c) {
            this._nativeOscillatorNode.setPeriodicWave(c), this._oscillatorNodeRenderer !== null && (this._oscillatorNodeRenderer.periodicWave = c);
        }
        start(c = 0) {
            if (this._nativeOscillatorNode.start(c), this._oscillatorNodeRenderer !== null && (this._oscillatorNodeRenderer.start = c), this.context.state !== "closed") {
                ve1(this);
                let i1 = ()=>{
                    this._nativeOscillatorNode.removeEventListener("ended", i1), le2(this) && Ie1(this);
                };
                this._nativeOscillatorNode.addEventListener("ended", i1);
            }
        }
        stop(c = 0) {
            this._nativeOscillatorNode.stop(c), this._oscillatorNodeRenderer !== null && (this._oscillatorNodeRenderer.stop = c);
        }
    };
var zn = (e, r, t, o, n)=>()=>{
        let a = new WeakMap, u = null, s = null, c = null, i1 = async (p1, l)=>{
            let m = t(p1), f = q1(m, l);
            if (!f) {
                let d1 = {
                    channelCount: m.channelCount,
                    channelCountMode: m.channelCountMode,
                    channelInterpretation: m.channelInterpretation,
                    detune: m.detune.value,
                    frequency: m.frequency.value,
                    periodicWave: u === null ? void 0 : u,
                    type: m.type
                };
                m = r(l, d1), s !== null && m.start(s), c !== null && m.stop(c);
            }
            return a.set(l, m), f ? (await e(l, p1.detune, m.detune), await e(l, p1.frequency, m.frequency)) : (await o(l, p1.detune, m.detune), await o(l, p1.frequency, m.frequency)), await n(p1, l, m), m;
        };
        return {
            set periodicWave (p){
                u = p;
            },
            set start (p){
                s = p;
            },
            set stop (p){
                c = p;
            },
            render (p1, l) {
                let m = a.get(l);
                return m !== void 0 ? Promise.resolve(m) : i1(p1, l);
            }
        };
    };
var Ua = {
    channelCount: 2,
    channelCountMode: "clamped-max",
    channelInterpretation: "speakers",
    coneInnerAngle: 360,
    coneOuterAngle: 360,
    coneOuterGain: 0,
    distanceModel: "inverse",
    maxDistance: 1e4,
    orientationX: 1,
    orientationY: 0,
    orientationZ: 0,
    panningModel: "equalpower",
    positionX: 0,
    positionY: 0,
    positionZ: 0,
    refDistance: 1,
    rolloffFactor: 1
}, Qn = (e, r, t, o, n, a, u)=>class extends e {
        constructor(c, i1){
            let p1 = n(c), l = {
                ...Ua,
                ...i1
            }, m = t(p1, l), f = a(p1), d1 = f ? o() : null;
            super(c, !1, m, d1), this._nativePannerNode = m, this._orientationX = r(this, f, m.orientationX, te2, re), this._orientationY = r(this, f, m.orientationY, te2, re), this._orientationZ = r(this, f, m.orientationZ, te2, re), this._positionX = r(this, f, m.positionX, te2, re), this._positionY = r(this, f, m.positionY, te2, re), this._positionZ = r(this, f, m.positionZ, te2, re), u(this, 1);
        }
        get coneInnerAngle() {
            return this._nativePannerNode.coneInnerAngle;
        }
        set coneInnerAngle(c) {
            this._nativePannerNode.coneInnerAngle = c;
        }
        get coneOuterAngle() {
            return this._nativePannerNode.coneOuterAngle;
        }
        set coneOuterAngle(c) {
            this._nativePannerNode.coneOuterAngle = c;
        }
        get coneOuterGain() {
            return this._nativePannerNode.coneOuterGain;
        }
        set coneOuterGain(c) {
            this._nativePannerNode.coneOuterGain = c;
        }
        get distanceModel() {
            return this._nativePannerNode.distanceModel;
        }
        set distanceModel(c) {
            this._nativePannerNode.distanceModel = c;
        }
        get maxDistance() {
            return this._nativePannerNode.maxDistance;
        }
        set maxDistance(c) {
            this._nativePannerNode.maxDistance = c;
        }
        get orientationX() {
            return this._orientationX;
        }
        get orientationY() {
            return this._orientationY;
        }
        get orientationZ() {
            return this._orientationZ;
        }
        get panningModel() {
            return this._nativePannerNode.panningModel;
        }
        set panningModel(c) {
            this._nativePannerNode.panningModel = c;
        }
        get positionX() {
            return this._positionX;
        }
        get positionY() {
            return this._positionY;
        }
        get positionZ() {
            return this._positionZ;
        }
        get refDistance() {
            return this._nativePannerNode.refDistance;
        }
        set refDistance(c) {
            this._nativePannerNode.refDistance = c;
        }
        get rolloffFactor() {
            return this._nativePannerNode.rolloffFactor;
        }
        set rolloffFactor(c) {
            this._nativePannerNode.rolloffFactor = c;
        }
    };
var Hn = (e, r, t, o, n, a, u, s, c, i1)=>()=>{
        let p1 = new WeakMap, l = null, m = async (f, d1)=>{
            let h = null, N = a(f), C = {
                channelCount: N.channelCount,
                channelCountMode: N.channelCountMode,
                channelInterpretation: N.channelInterpretation
            }, y = {
                ...C,
                coneInnerAngle: N.coneInnerAngle,
                coneOuterAngle: N.coneOuterAngle,
                coneOuterGain: N.coneOuterGain,
                distanceModel: N.distanceModel,
                maxDistance: N.maxDistance,
                panningModel: N.panningModel,
                refDistance: N.refDistance,
                rolloffFactor: N.rolloffFactor
            }, O = q1(N, d1);
            if ("bufferSize" in N) h = o(d1, {
                ...C,
                gain: 1
            });
            else if (!O) {
                let w = {
                    ...y,
                    orientationX: N.orientationX.value,
                    orientationY: N.orientationY.value,
                    orientationZ: N.orientationZ.value,
                    positionX: N.positionX.value,
                    positionY: N.positionY.value,
                    positionZ: N.positionZ.value
                };
                N = n(d1, w);
            }
            if (p1.set(d1, h === null ? N : h), h !== null) {
                if (l === null) {
                    if (u === null) throw new Error("Missing the native OfflineAudioContext constructor.");
                    let I = new u(6, f.context.length, d1.sampleRate), S1 = r(I, {
                        channelCount: 1,
                        channelCountMode: "explicit",
                        channelInterpretation: "speakers",
                        numberOfInputs: 6
                    });
                    S1.connect(I.destination), l = (async ()=>{
                        let b = await Promise.all([
                            f.orientationX,
                            f.orientationY,
                            f.orientationZ,
                            f.positionX,
                            f.positionY,
                            f.positionZ
                        ].map(async (E, k)=>{
                            let P = t(I, {
                                channelCount: 1,
                                channelCountMode: "explicit",
                                channelInterpretation: "discrete",
                                offset: k === 0 ? 1 : 0
                            });
                            return await s(I, E, P.offset), P;
                        }));
                        for(let E = 0; E < 6; E += 1)b[E].connect(S1, 0, E), b[E].start(0);
                        return i1(I);
                    })();
                }
                let w1 = await l, x1 = o(d1, {
                    ...C,
                    gain: 1
                });
                await c(f, d1, x1);
                let g = [];
                for(let I1 = 0; I1 < w1.numberOfChannels; I1 += 1)g.push(w1.getChannelData(I1));
                let v = [
                    g[0][0],
                    g[1][0],
                    g[2][0]
                ], A1 = [
                    g[3][0],
                    g[4][0],
                    g[5][0]
                ], M = o(d1, {
                    ...C,
                    gain: 1
                }), _ = n(d1, {
                    ...y,
                    orientationX: v[0],
                    orientationY: v[1],
                    orientationZ: v[2],
                    positionX: A1[0],
                    positionY: A1[1],
                    positionZ: A1[2]
                });
                x1.connect(M).connect(_.inputs[0]), _.connect(h);
                for(let I2 = 128; I2 < w1.length; I2 += 128){
                    let S2 = [
                        g[0][I2],
                        g[1][I2],
                        g[2][I2]
                    ], b = [
                        g[3][I2],
                        g[4][I2],
                        g[5][I2]
                    ];
                    if (S2.some((E, k)=>E !== v[k]) || b.some((E, k)=>E !== A1[k])) {
                        v = S2, A1 = b;
                        let E = I2 / d1.sampleRate;
                        M.gain.setValueAtTime(0, E), M = o(d1, {
                            ...C,
                            gain: 0
                        }), _ = n(d1, {
                            ...y,
                            orientationX: v[0],
                            orientationY: v[1],
                            orientationZ: v[2],
                            positionX: A1[0],
                            positionY: A1[1],
                            positionZ: A1[2]
                        }), M.gain.setValueAtTime(1, E), x1.connect(M).connect(_.inputs[0]), _.connect(h);
                    }
                }
                return h;
            }
            return O ? (await e(d1, f.orientationX, N.orientationX), await e(d1, f.orientationY, N.orientationY), await e(d1, f.orientationZ, N.orientationZ), await e(d1, f.positionX, N.positionX), await e(d1, f.positionY, N.positionY), await e(d1, f.positionZ, N.positionZ)) : (await s(d1, f.orientationX, N.orientationX), await s(d1, f.orientationY, N.orientationY), await s(d1, f.orientationZ, N.orientationZ), await s(d1, f.positionX, N.positionX), await s(d1, f.positionY, N.positionY), await s(d1, f.positionZ, N.positionZ)), Ce1(N) ? await c(f, d1, N.inputs[0]) : await c(f, d1, N), N;
        };
        return {
            render (f, d1) {
                let h = p1.get(d1);
                return h !== void 0 ? Promise.resolve(h) : m(f, d1);
            }
        };
    };
var qa = {
    disableNormalization: !1
}, $n = (e, r, t, o)=>class Kn {
        constructor(a, u){
            let s = r(a), c = o({
                ...qa,
                ...u
            }), i1 = e(s, c);
            return t.add(i1), i1;
        }
        static [Symbol.hasInstance](a) {
            return a !== null && typeof a == "object" && Object.getPrototypeOf(a) === Kn.prototype || t.has(a);
        }
    };
var Jn = (e, r)=>(t, o, n)=>(e(o).replay(n), r(o, t, n));
var es = (e, r, t)=>async (o, n, a)=>{
        let u = e(o);
        await Promise.all(u.activeInputs.map((s, c)=>Array.from(s).map(async ([i1, p1])=>{
                let m = await r(i1).render(i1, n), f = o.context.destination;
                !t(i1) && (o !== f || !t(o)) && m.connect(a, p1, c);
            })).reduce((s, c)=>[
                ...s,
                ...c
            ], []));
    };
var ts = (e, r, t)=>async (o, n, a)=>{
        let u = r(o);
        await Promise.all(Array.from(u.activeInputs).map(async ([s, c])=>{
            let p1 = await e(s).render(s, n);
            t(s) || p1.connect(a, c);
        }));
    };
var rs = (e, r, t, o)=>(n)=>e(ye1, ()=>ye1(n)) ? Promise.resolve(e(o, o)).then((a)=>{
            if (!a) {
                let u = t(n, 512, 0, 1);
                n.oncomplete = ()=>{
                    u.onaudioprocess = null, u.disconnect();
                }, u.onaudioprocess = ()=>n.currentTime, u.connect(n.destination);
            }
            return n.startRendering();
        }) : new Promise((a)=>{
            let u = r(n, {
                channelCount: 1,
                channelCountMode: "explicit",
                channelInterpretation: "discrete",
                gain: 0
            });
            n.oncomplete = (s)=>{
                u.disconnect(), a(s.renderedBuffer);
            }, u.connect(n.destination), n.startRendering();
        });
var os = (e)=>(r, t)=>{
        e.set(r, t);
    };
var ns = (e)=>(r, t)=>e.set(r, t);
var ss = (e, r, t, o, n, a, u, s)=>(c, i1)=>t(c).render(c, i1).then(()=>Promise.all(Array.from(o(i1)).map((p1)=>t(p1).render(p1, i1)))).then(()=>n(i1)).then((p1)=>(typeof p1.copyFromChannel != "function" ? (u(p1), $e1(p1)) : r(a, ()=>a(p1)) || s(p1), e.add(p1), p1));
var ja = {
    channelCount: 2,
    channelCountMode: "explicit",
    channelInterpretation: "speakers",
    pan: 0
}, as = (e, r, t, o, n, a)=>class extends e {
        constructor(s, c){
            let i1 = n(s), p1 = {
                ...ja,
                ...c
            }, l = t(i1, p1), m = a(i1), f = m ? o() : null;
            super(s, !1, l, f), this._pan = r(this, m, l.pan);
        }
        get pan() {
            return this._pan;
        }
    };
var is = (e, r, t, o, n)=>()=>{
        let a = new WeakMap, u = async (s, c)=>{
            let i1 = t(s), p1 = q1(i1, c);
            if (!p1) {
                let l = {
                    channelCount: i1.channelCount,
                    channelCountMode: i1.channelCountMode,
                    channelInterpretation: i1.channelInterpretation,
                    pan: i1.pan.value
                };
                i1 = r(c, l);
            }
            return a.set(c, i1), p1 ? await e(c, s.pan, i1.pan) : await o(c, s.pan, i1.pan), Ce1(i1) ? await n(s, c, i1.inputs[0]) : await n(s, c, i1), i1;
        };
        return {
            render (s, c) {
                let i1 = a.get(c);
                return i1 !== void 0 ? Promise.resolve(i1) : u(s, c);
            }
        };
    };
var cs = (e)=>()=>{
        if (e === null) return !1;
        try {
            new e({
                length: 1,
                sampleRate: 44100
            });
        } catch  {
            return !1;
        }
        return !0;
    };
var hs = (e, r)=>async ()=>{
        if (e === null) return !0;
        if (r === null) return !1;
        let t = new Blob([
            'class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'
        ], {
            type: "application/javascript; charset=utf-8"
        }), o = new r(1, 128, 44100), n = URL.createObjectURL(t), a = !1, u = !1;
        try {
            await o.audioWorklet.addModule(n);
            let s = new e(o, "a", {
                numberOfOutputs: 0
            }), c = o.createOscillator();
            s.port.onmessage = ()=>a = !0, s.onprocessorerror = ()=>u = !0, c.connect(s), c.start(0), await o.startRendering();
        } catch  {} finally{
            URL.revokeObjectURL(n);
        }
        return a && !u;
    };
var ys = (e, r)=>()=>{
        if (r === null) return Promise.resolve(!1);
        let t = new r(1, 1, 44100), o = e(t, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            gain: 0
        });
        return new Promise((n)=>{
            t.oncomplete = ()=>{
                o.disconnect(), n(t.currentTime !== 0);
            }, t.startRendering();
        });
    };
var Ht1 = ()=>new DOMException("", "UnknownError");
var Za = {
    channelCount: 2,
    channelCountMode: "max",
    channelInterpretation: "speakers",
    curve: null,
    oversample: "none"
}, ws = (e, r, t, o, n, a, u)=>class extends e {
        constructor(c, i1){
            let p1 = n(c), l = {
                ...Za,
                ...i1
            }, m = t(p1, l), d1 = a(p1) ? o() : null;
            super(c, !0, m, d1), this._isCurveNullified = !1, this._nativeWaveShaperNode = m, u(this, 1);
        }
        get curve() {
            return this._isCurveNullified ? null : this._nativeWaveShaperNode.curve;
        }
        set curve(c) {
            if (c === null) this._isCurveNullified = !0, this._nativeWaveShaperNode.curve = new Float32Array([
                0,
                0
            ]);
            else {
                if (c.length < 2) throw r();
                this._isCurveNullified = !1, this._nativeWaveShaperNode.curve = c;
            }
        }
        get oversample() {
            return this._nativeWaveShaperNode.oversample;
        }
        set oversample(c) {
            this._nativeWaveShaperNode.oversample = c;
        }
    };
var _s = (e, r, t)=>()=>{
        let o = new WeakMap, n = async (a, u)=>{
            let s = r(a);
            if (!q1(s, u)) {
                let i1 = {
                    channelCount: s.channelCount,
                    channelCountMode: s.channelCountMode,
                    channelInterpretation: s.channelInterpretation,
                    curve: s.curve,
                    oversample: s.oversample
                };
                s = e(u, i1);
            }
            return o.set(u, s), Ce1(s) ? await t(a, u, s.inputs[0]) : await t(a, u, s), s;
        };
        return {
            render (a, u) {
                let s = o.get(u);
                return s !== void 0 ? Promise.resolve(s) : n(a, u);
            }
        };
    };
var Os = ()=>typeof window > "u" ? null : window;
var Is = (e, r)=>(t)=>{
        t.copyFromChannel = (o, n, a = 0)=>{
            let u = e(a), s = e(n);
            if (s >= t.numberOfChannels) throw r();
            let c = t.length, i1 = t.getChannelData(s), p1 = o.length;
            for(let l = u < 0 ? -u : 0; l + u < c && l < p1; l += 1)o[l] = i1[l + u];
        }, t.copyToChannel = (o, n, a = 0)=>{
            let u = e(a), s = e(n);
            if (s >= t.numberOfChannels) throw r();
            let c = t.length, i1 = t.getChannelData(s), p1 = o.length;
            for(let l = u < 0 ? -u : 0; l + u < c && l < p1; l += 1)i1[l + u] = o[l];
        };
    };
var Ms = (e)=>(r)=>{
        r.copyFromChannel = ((t)=>(o, n, a = 0)=>{
                let u = e(a), s = e(n);
                if (u < r.length) return t.call(r, o, s, u);
            })(r.copyFromChannel), r.copyToChannel = ((t)=>(o, n, a = 0)=>{
                let u = e(a), s = e(n);
                if (u < r.length) return t.call(r, o, s, u);
            })(r.copyToChannel);
    };
var Es = (e)=>(r, t)=>{
        let o = t.createBuffer(1, 1, 44100);
        r.buffer === null && (r.buffer = o), e(r, "buffer", (n)=>()=>{
                let a = n.call(r);
                return a === o ? null : a;
            }, (n)=>(a)=>n.call(r, a === null ? o : a));
    };
var Ts = (e, r)=>(t, o)=>{
        o.channelCount = 1, o.channelCountMode = "explicit", Object.defineProperty(o, "channelCount", {
            get: ()=>1,
            set: ()=>{
                throw e();
            }
        }), Object.defineProperty(o, "channelCountMode", {
            get: ()=>"explicit",
            set: ()=>{
                throw e();
            }
        });
        let n = t.createBufferSource();
        r(o, ()=>{
            let s = o.numberOfInputs;
            for(let c = 0; c < s; c += 1)n.connect(o, 0, c);
        }, ()=>n.disconnect(o));
    };
var $t1 = (e, r, t)=>e.copyFromChannel === void 0 ? e.getChannelData(t)[0] : (e.copyFromChannel(r, t), r[0]);
var Kt1 = (e)=>{
    if (e === null) return !1;
    let r = e.length;
    return r % 2 !== 0 ? e[Math.floor(r / 2)] !== 0 : e[r / 2 - 1] + e[r / 2] !== 0;
};
var ut1 = (e, r, t, o)=>{
    let n = e;
    for(; !n.hasOwnProperty(r);)n = Object.getPrototypeOf(n);
    let { get: a , set: u  } = Object.getOwnPropertyDescriptor(n, r);
    Object.defineProperty(e, r, {
        get: t(a),
        set: o(u)
    });
};
var bs = (e)=>({
        ...e,
        outputChannelCount: e.outputChannelCount !== void 0 ? e.outputChannelCount : e.numberOfInputs === 1 && e.numberOfOutputs === 1 ? [
            e.channelCount
        ] : Array.from({
            length: e.numberOfOutputs
        }, ()=>1)
    });
var Ps = (e)=>({
        ...e,
        channelCount: e.numberOfOutputs
    });
var Fs = (e)=>{
    let { imag: r , real: t  } = e;
    return r === void 0 ? t === void 0 ? {
        ...e,
        imag: [
            0,
            0
        ],
        real: [
            0,
            0
        ]
    } : {
        ...e,
        imag: Array.from(t, ()=>0),
        real: t
    } : t === void 0 ? {
        ...e,
        imag: r,
        real: Array.from(r, ()=>0)
    } : {
        ...e,
        imag: r,
        real: t
    };
};
var Jt1 = (e, r, t)=>{
    try {
        e.setValueAtTime(r, t);
    } catch (o) {
        if (o.code !== 9) throw o;
        Jt1(e, r, t + 1e-7);
    }
};
var Ds = (e)=>{
    let r = e.createBufferSource();
    r.start();
    try {
        r.start();
    } catch  {
        return !0;
    }
    return !1;
};
var Rs = (e)=>{
    let r = e.createBufferSource(), t = e.createBuffer(1, 1, 44100);
    r.buffer = t;
    try {
        r.start(0, 1);
    } catch  {
        return !1;
    }
    return !0;
};
var ks = (e)=>{
    let r = e.createBufferSource();
    r.start();
    try {
        r.stop();
    } catch  {
        return !1;
    }
    return !0;
};
var bt1 = (e)=>{
    let r = e.createOscillator();
    try {
        r.start(-1);
    } catch (t) {
        return t instanceof RangeError;
    }
    return !1;
};
var er1 = (e)=>{
    let r = e.createBuffer(1, 1, 44100), t = e.createBufferSource();
    t.buffer = r, t.start(), t.stop();
    try {
        return t.stop(), !0;
    } catch  {
        return !1;
    }
};
var Pt1 = (e)=>{
    let r = e.createOscillator();
    try {
        r.stop(-1);
    } catch (t) {
        return t instanceof RangeError;
    }
    return !1;
};
var Ws = (e)=>{
    let { port1: r , port2: t  } = new MessageChannel;
    try {
        r.postMessage(e);
    } finally{
        r.close(), t.close();
    }
};
var Vs = (e)=>{
    e.start = ((r)=>(t = 0, o = 0, n)=>{
            let a = e.buffer, u = a === null ? o : Math.min(a.duration, o);
            a !== null && u > a.duration - .5 / e.context.sampleRate ? r.call(e, t, 0, 0) : r.call(e, t, u, n);
        })(e.start);
};
var tr1 = (e, r)=>{
    let t = r.createGain();
    e.connect(t);
    let o = ((n)=>()=>{
            n.call(e, t), e.removeEventListener("ended", o);
        })(e.disconnect);
    e.addEventListener("ended", o), ge1(e, t), e.stop = ((n)=>{
        let a = !1;
        return (u = 0)=>{
            if (a) try {
                n.call(e, u);
            } catch  {
                t.gain.setValueAtTime(0, u);
            }
            else n.call(e, u), a = !0;
        };
    })(e.stop);
};
var je = (e, r)=>(t)=>{
        let o = {
            value: e
        };
        return Object.defineProperties(t, {
            currentTarget: o,
            target: o
        }), typeof r == "function" ? r.call(e, t) : r.handleEvent.call(e, t);
    };
var Ja = dr1(Ae1), ei = yr1(Ae1), ti = Co(Fe), Us = new WeakMap, ri = Do(Us), he2 = Kr(new Map, new WeakMap), Se1 = Os(), qs = ln(he2, Ne1), rr1 = Fo(ae1), ue2 = es(ae1, rr1, Te1), oi = Or(qs, z1, ue2), H1 = Wo(Qe1), ie2 = Wn(Se1), Q3 = Ko(ie2), js = new WeakMap, Zs = Io(je), be1 = hn(Se1), or1 = zo(be1), nr1 = Qo(Se1), Xs = Ho(Se1), pt1 = Nn(Se1), oe2 = qr(fr1(gt1), Ar(Ja, ei, Ke1, ti, Je, ae1, ri, Oe1, z1, Ae1, le2, Te1, et1), he2, qo(ht1, Je, ae1, z1, Ue1, le2), Ne1, nt1, ce2, ho(Ke1, ht1, ae1, z1, Ue1, H1, le2, Q3), Ao(js, ae1, ne1), Zs, H1, or1, nr1, Xs, Q3, pt1), ni = _r1(oe2, oi, Ne1, qs, H1, Q3);
var sr1 = new WeakSet, Gs = dn(Se1), Ys = co(new Uint32Array(1)), ar1 = Is(Ys, Ne1), ir1 = Ms(Ys), si = Ir(sr1, he2, ce2, Gs, ie2, cs(Gs), ar1, ir1);
var Ft1 = Sr1(de1), zs = ts(rr1, De1, Te1), Me1 = oo(zs), lt1 = mn(Ft1, he2, Ds, Rs, ks, bt1, er1, Pt1, Vs, Es(ut1), tr1), Ee1 = Jn(Ro(De1), zs), ai = Tr(Me1, lt1, z1, Ee1, ue2), we1 = jr(mr1(vt1), js, mt2, Zr, O1, w1, M2, b, P1, V1, _1, be1, Jt1), ii = Er1(oe2, ai, we1, K3, lt1, H1, Q3, je);
var ci = Lr1(oe2, Br1, Ne1, K3, xn(de1, ut1), H1, Q3, ue2), ui = $r1(Me1, zt1, z1, Ee1, ue2), Ze2 = ns(Us), pi = Hr(oe2, we1, ui, nt1, zt1, H1, Q3, Ze2), We1 = un(Ae1, nr1), li = Ts(K3, We1), Le1 = wn(be1, li), di = eo(Le1, z1, ue2), fi = Jr(oe2, di, Le1, H1, Q3), mi = ro(it1, z1, ue2), hi = to(oe2, mi, it1, H1, Q3, Ps), xi = In(Ft1, lt1, de1, We1), dt2 = On(Ft1, he2, xi, bt1, Pt1), Ni = io(Me1, dt2, z1, Ee1, ue2), Ci = ao(oe2, we1, Ni, dt2, H1, Q3, je), Qs = Mn(ce2, ut1), gi = po(Qs, z1, ue2), vi = uo(oe2, gi, Qs, H1, Q3, Ze2), Ai = No(Me1, Qt1, z1, Ee1, ue2), yi = xo(oe2, we1, Ai, Qt1, H1, Q3, Ze2), Hs = En(ce2), Si = wo(Me1, Hs, z1, Ee1, ue2), wi = So(oe2, we1, Si, Hs, ce2, H1, Q3, Ze2), _i = bo(Me1, de1, z1, Ee1, ue2), Oi = To(oe2, we1, _i, de1, H1, Q3), Ii = Pn(nt1, K3, ct1, ce2), Dt1 = rs(he2, de1, ct1, ys(de1, ie2)), Mi = Uo(lt1, z1, ie2, ue2, Dt1), Ei = Tn(Ii), Ti = Go(oe2, Ei, Mi, H1, Q3, Ze2), bi = Vr(we1, Le1, dt2, ct1, ce2, $t1, Q3, ut1), $s = new WeakMap, cr1 = an(ci, bi, Zs, Q3, $s, je), Ks = Ln(Ft1, he2, bt1, er1, Pt1, tr1), Pi = zn(Me1, Ks, z1, Ee1, ue2), Fi = Yn(oe2, we1, Ks, Pi, H1, Q3, je), Js = so(lt1), Di = Zn(Js, K3, de1, Kt1, We1), Rt1 = jn(Js, K3, Di, Kt1, We1, be1, ut1), Ri = Vn(Ke1, K3, Le1, de1, ct1, Rt1, ce2, Je, $t1, We1), ea = Bn(Ri), ki = Hn(Me1, Le1, dt2, de1, ea, z1, ie2, Ee1, ue2, Dt1), Wi = Qn(oe2, we1, ea, ki, H1, Q3, Ze2), Li = Gn(Ne1), Bi = $n(Li, H1, new WeakSet, Fs), Vi = qn(Le1, it1, de1, Rt1, ce2, We1), ta = Un(Vi, ce2), Gi = is(Me1, ta, z1, Ee1, ue2), Ui = as(oe2, we1, ta, Gi, H1, Q3), qi = _s(Rt1, z1, ue2), ji = ws(oe2, K3, Rt1, qi, H1, Q3, Ze2), ra = Jo(Se1), ur1 = Mo(Se1), oa = new WeakMap, Zi = Lo(oa, ie2), Xi = ra ? vr(he2, ce2, Oo(Se1), ur1, Eo(lr1), H1, Zi, Q3, pt1, new WeakMap, new WeakMap, hs(pt1, ie2), Se1) : void 0, Yi = $o(or1, Q3), zi = mo(sr1, he2, fo, _o, new WeakSet, H1, Yi, He, ye1, ar1, ir1), na = Qr(Xi, ni, si, ii, pi, fi, hi, Ci, vi, zi, yi, wi, Oi, Ti, cr1, Fi, Wi, Bi, Ui, ji), Qi = tn(oe2, Fn, H1, Q3), Hi = rn(oe2, Dn, H1, Q3), $i = on(oe2, Rn, H1, Q3), Ki = kn(K3, Q3), Ji = nn(oe2, Ki, H1), KM = Wr(na, K3, ce2, Ht1, Qi, Hi, $i, Ji, be1);
var pr1 = Bo($s), ec = wr1(pr1), sa = no(Ne1), tc = go(pr1), aa = yo(Ne1), ia = new WeakMap, rc = Po(ia, ne1), oc = Sn(sa, Ne1, K3, Le1, it1, dt2, de1, ct1, ce2, aa, ur1, rc, We1), nc = gn(K3, oc, de1, ce2, We1), sc = zr1(Me1, sa, lt1, Le1, it1, dt2, de1, tc, aa, ur1, z1, pt1, ie2, Ee1, ue2, Dt1), ac = ko(oa), ic = os(ia), JM = ra ? Xr(ec, oe2, we1, sc, nc, ae1, ac, H1, Q3, pt1, bs, ic, Ws, je) : void 0;
sn(K3, ce2, Ht1, cr1, be1);
var ca = lo(ce2, ie2), ua = ss(sr1, he2, rr1, pr1, Dt1, He, ar1, ir1), t11 = cn(he2, K3, ca, cr1, ua);
var r1 = Xn(na, he2, K3, ca, ua);
var o1 = jo(Qe1, or1), n1 = Zo(ze, nr1), s1 = Xo(mt2, Xs), a1 = Yo(Qe1, Q3);
var v3 = function(e, t) {
    return v3 = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(r, n) {
        r.__proto__ = n;
    } || function(r, n) {
        for(var a in n)Object.prototype.hasOwnProperty.call(n, a) && (r[a] = n[a]);
    }, v3(e, t);
};
var g3 = function() {
    return g3 = Object.assign || function(t) {
        for(var r, n = 1, a = arguments.length; n < a; n++){
            r = arguments[n];
            for(var o in r)Object.prototype.hasOwnProperty.call(r, o) && (t[o] = r[o]);
        }
        return t;
    }, g3.apply(this, arguments);
};
function E4(e, t, r, n) {
    var a = arguments.length, o = a < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, r) : n, i1;
    if (typeof Reflect == "object" && typeof Reflect.decorate == "function") o = Reflect.decorate(e, t, r, n);
    else for(var c = e.length - 1; c >= 0; c--)(i1 = e[c]) && (o = (a < 3 ? i1(o) : a > 3 ? i1(t, r, o) : i1(t, r)) || o);
    return a > 3 && o && Object.defineProperty(t, r, o), o;
}
function M3(e, t, r, n) {
    function a(o) {
        return o instanceof r ? o : new r(function(i1) {
            i1(o);
        });
    }
    return new (r || (r = Promise))(function(o, i1) {
        function c(f) {
            try {
                u(n.next(f));
            } catch (s) {
                i1(s);
            }
        }
        function p1(f) {
            try {
                u(n.throw(f));
            } catch (s) {
                i1(s);
            }
        }
        function u(f) {
            f.done ? o(f.value) : a(f.value).then(c, p1);
        }
        u((n = n.apply(e, t || [])).next());
    });
}
Object.create ? function(e, t, r, n) {
    n === void 0 && (n = r);
    var a = Object.getOwnPropertyDescriptor(t, r);
    (!a || ("get" in a ? !t.__esModule : a.writable || a.configurable)) && (a = {
        enumerable: !0,
        get: function() {
            return t[r];
        }
    }), Object.defineProperty(e, n, a);
} : function(e, t, r, n) {
    n === void 0 && (n = r), e[n] = t[r];
};
Object.create ? function(e, t) {
    Object.defineProperty(e, "default", {
        enumerable: !0,
        value: t
    });
} : function(e, t) {
    e.default = t;
};
var Ji1 = Object.defineProperty;
var Ki1 = (n, t)=>{
    for(var e in t)Ji1(n, e, {
        get: t[e],
        enumerable: !0
    });
};
var $e2 = "14.8.49";
var bi1 = {};
Ki1(bi1, {
    assert: ()=>m3,
    assertContextRunning: ()=>Xe1,
    assertRange: ()=>q2,
    assertUsedScheduleTime: ()=>oi1,
    enterScheduledCallback: ()=>zs1,
    log: ()=>ni1,
    setLogger: ()=>to1,
    warn: ()=>Nt2
});
function N1(n) {
    return typeof n > "u";
}
function g4(n) {
    return !N1(n);
}
function xi1(n) {
    return typeof n == "function";
}
function W1(n) {
    return typeof n == "number";
}
function dt3(n) {
    return Object.prototype.toString.call(n) === "[object Object]" && n.constructor === Object;
}
function Ls(n) {
    return typeof n == "boolean";
}
function F2(n) {
    return Array.isArray(n);
}
function Z1(n) {
    return typeof n == "string";
}
function He1(n) {
    return Z1(n) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(n);
}
function m3(n, t) {
    if (!n) throw new Error(t);
}
function q2(n, t, e = 1 / 0) {
    if (!(t <= n && n <= e)) throw new RangeError(`Value must be within [${t}, ${e}], got: ${n}`);
}
function Xe1(n) {
    !n.isOffline && n.state !== "running" && Nt2('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.');
}
var vi1 = !1, yi1 = !1;
function zs1(n) {
    vi1 = n;
}
function oi1(n) {
    N1(n) && vi1 && !yi1 && (yi1 = !0, Nt2("Events scheduled inside of scheduled callbacks should use the passed in scheduling time. See https://github.com/Tonejs/Tone.js/wiki/Accurate-Timing"));
}
var ri1 = console;
function to1(n) {
    ri1 = n;
}
function ni1(...n) {
    ri1.log(...n);
}
function Nt2(...n) {
    ri1.warn(...n);
}
function wi1(n) {
    return new KM(n);
}
function Si1(n, t, e) {
    return new r1(n, t, e);
}
var _t2 = typeof self == "object" ? self : null, ki1 = _t2 && (_t2.hasOwnProperty("AudioContext") || _t2.hasOwnProperty("webkitAudioContext"));
function Ai1(n, t, e) {
    return m3(g4(JM), "This node only works in a secure context (https or localhost)"), new JM(n, t, e);
}
var Gs1 = class {
    constructor(t, e, s, i1){
        this._callback = t, this._type = e, this._minimumUpdateInterval = Math.max(128 / (i1 || 44100), .001), this.updateInterval = s, this._createClock();
    }
    _createWorker() {
        let t = new Blob([
            `
			// the initial timeout time
			let timeoutTime =  ${(this._updateInterval * 1e3).toFixed(1)};
			// onmessage callback
			self.onmessage = function(msg){
				timeoutTime = parseInt(msg.data);
			};
			// the tick function which posts a message
			// and schedules a new tick
			function tick(){
				setTimeout(tick, timeoutTime);
				self.postMessage('tick');
			}
			// call tick initially
			tick();
			`
        ], {
            type: "text/javascript"
        }), e = URL.createObjectURL(t), s = new Worker(e);
        s.onmessage = this._callback.bind(this), this._worker = s;
    }
    _createTimeout() {
        this._timeout = setTimeout(()=>{
            this._createTimeout(), this._callback();
        }, this._updateInterval * 1e3);
    }
    _createClock() {
        if (this._type === "worker") try {
            this._createWorker();
        } catch  {
            this._type = "timeout", this._createClock();
        }
        else this._type === "timeout" && this._createTimeout();
    }
    _disposeClock() {
        this._timeout && clearTimeout(this._timeout), this._worker && (this._worker.terminate(), this._worker.onmessage = null);
    }
    get updateInterval() {
        return this._updateInterval;
    }
    set updateInterval(t) {
        var e;
        this._updateInterval = Math.max(t, this._minimumUpdateInterval), this._type === "worker" && ((e = this._worker) === null || e === void 0 || e.postMessage(this._updateInterval * 1e3));
    }
    get type() {
        return this._type;
    }
    set type(t) {
        this._disposeClock(), this._type = t, this._createClock();
    }
    dispose() {
        this._disposeClock();
    }
};
function Tt2(n) {
    return s1(n);
}
function Dt2(n) {
    return n1(n);
}
function Me2(n) {
    return a1(n);
}
function se2(n) {
    return o1(n);
}
function Di1(n) {
    return n instanceof si;
}
function co1(n, t) {
    return n === "value" || Tt2(t) || Dt2(t) || Di1(t);
}
function J2(n, ...t) {
    if (!t.length) return n;
    let e = t.shift();
    if (dt3(n) && dt3(e)) for(let s in e)co1(s, e[s]) ? n[s] = e[s] : dt3(e[s]) ? (n[s] || Object.assign(n, {
        [s]: {}
    }), J2(n[s], e[s])) : Object.assign(n, {
        [s]: e[s]
    });
    return J2(n, ...t);
}
function Oi1(n, t) {
    return n.length === t.length && n.every((e, s)=>t[s] === e);
}
function o2(n, t, e = [], s) {
    let i1 = {}, r = Array.from(t);
    if (dt3(r[0]) && s && !Reflect.has(r[0], s) && (Object.keys(r[0]).some((c)=>Reflect.has(n, c)) || (J2(i1, {
        [s]: r[0]
    }), e.splice(e.indexOf(s), 1), r.shift())), r.length === 1 && dt3(r[0])) J2(i1, r[0]);
    else for(let a = 0; a < e.length; a++)g4(r[a]) && (i1[e[a]] = r[a]);
    return J2(n, i1);
}
function qi1(n) {
    return n.constructor.getDefaults();
}
function X2(n, t) {
    return N1(n) ? t : n;
}
function V2(n, t) {
    return t.forEach((e)=>{
        Reflect.has(n, e) && delete n[e];
    }), n;
}
var H2 = class {
    constructor(){
        this.debug = !1, this._wasDisposed = !1;
    }
    static getDefaults() {
        return {};
    }
    log(...t) {
        (this.debug || _t2 && this.toString() === _t2.TONE_DEBUG_CLASS) && ni1(this, ...t);
    }
    dispose() {
        return this._wasDisposed = !0, this;
    }
    get disposed() {
        return this._wasDisposed;
    }
    toString() {
        return this.name;
    }
};
H2.version = $e2;
function Pt2(n, t) {
    return n > t + 1e-6;
}
function Ye1(n, t) {
    return Pt2(n, t) || it2(n, t);
}
function ve2(n, t) {
    return n + 1e-6 < t;
}
function it2(n, t) {
    return Math.abs(n - t) < 1e-6;
}
function Lt2(n, t, e) {
    return Math.max(Math.min(n, e), t);
}
var L2 = class extends H2 {
    constructor(){
        super(), this.name = "Timeline", this._timeline = [];
        let t = o2(L2.getDefaults(), arguments, [
            "memory"
        ]);
        this.memory = t.memory, this.increasing = t.increasing;
    }
    static getDefaults() {
        return {
            memory: 1 / 0,
            increasing: !1
        };
    }
    get length() {
        return this._timeline.length;
    }
    add(t) {
        if (m3(Reflect.has(t, "time"), "Timeline: events must have a time attribute"), t.time = t.time.valueOf(), this.increasing && this.length) {
            let e = this._timeline[this.length - 1];
            m3(Ye1(t.time, e.time), "The time must be greater than or equal to the last scheduled time"), this._timeline.push(t);
        } else {
            let e1 = this._search(t.time);
            this._timeline.splice(e1 + 1, 0, t);
        }
        if (this.length > this.memory) {
            let e2 = this.length - this.memory;
            this._timeline.splice(0, e2);
        }
        return this;
    }
    remove(t) {
        let e = this._timeline.indexOf(t);
        return e !== -1 && this._timeline.splice(e, 1), this;
    }
    get(t, e = "time") {
        let s = this._search(t, e);
        return s !== -1 ? this._timeline[s] : null;
    }
    peek() {
        return this._timeline[0];
    }
    shift() {
        return this._timeline.shift();
    }
    getAfter(t, e = "time") {
        let s = this._search(t, e);
        return s + 1 < this._timeline.length ? this._timeline[s + 1] : null;
    }
    getBefore(t) {
        let e = this._timeline.length;
        if (e > 0 && this._timeline[e - 1].time < t) return this._timeline[e - 1];
        let s = this._search(t);
        return s - 1 >= 0 ? this._timeline[s - 1] : null;
    }
    cancel(t) {
        if (this._timeline.length > 1) {
            let e = this._search(t);
            if (e >= 0) if (it2(this._timeline[e].time, t)) {
                for(let s = e; s >= 0 && it2(this._timeline[s].time, t); s--)e = s;
                this._timeline = this._timeline.slice(0, e);
            } else this._timeline = this._timeline.slice(0, e + 1);
            else this._timeline = [];
        } else this._timeline.length === 1 && Ye1(this._timeline[0].time, t) && (this._timeline = []);
        return this;
    }
    cancelBefore(t) {
        let e = this._search(t);
        return e >= 0 && (this._timeline = this._timeline.slice(e + 1)), this;
    }
    previousEvent(t) {
        let e = this._timeline.indexOf(t);
        return e > 0 ? this._timeline[e - 1] : null;
    }
    _search(t, e = "time") {
        if (this._timeline.length === 0) return -1;
        let s = 0, i1 = this._timeline.length, r = i1;
        if (i1 > 0 && this._timeline[i1 - 1][e] <= t) return i1 - 1;
        for(; s < r;){
            let a = Math.floor(s + (r - s) / 2), c = this._timeline[a], p1 = this._timeline[a + 1];
            if (it2(c[e], t)) {
                for(let x1 = a; x1 < this._timeline.length; x1++){
                    let y = this._timeline[x1];
                    if (it2(y[e], t)) a = x1;
                    else break;
                }
                return a;
            } else {
                if (ve2(c[e], t) && Pt2(p1[e], t)) return a;
                Pt2(c[e], t) ? r = a : s = a + 1;
            }
        }
        return -1;
    }
    _iterate(t, e = 0, s = this._timeline.length - 1) {
        this._timeline.slice(e, s + 1).forEach(t);
    }
    forEach(t) {
        return this._iterate(t), this;
    }
    forEachBefore(t, e) {
        let s = this._search(t);
        return s !== -1 && this._iterate(e, 0, s), this;
    }
    forEachAfter(t, e) {
        let s = this._search(t);
        return this._iterate(e, s + 1), this;
    }
    forEachBetween(t, e, s) {
        let i1 = this._search(t), r = this._search(e);
        return i1 !== -1 && r !== -1 ? (this._timeline[i1].time !== t && (i1 += 1), this._timeline[r].time === e && (r -= 1), this._iterate(s, i1, r)) : i1 === -1 && this._iterate(s, 0, r), this;
    }
    forEachFrom(t, e) {
        let s = this._search(t);
        for(; s >= 0 && this._timeline[s].time >= t;)s--;
        return this._iterate(e, s + 1), this;
    }
    forEachAtTime(t, e) {
        let s = this._search(t);
        if (s !== -1 && it2(this._timeline[s].time, t)) {
            let i1 = s;
            for(let r = s; r >= 0 && it2(this._timeline[r].time, t); r--)i1 = r;
            this._iterate((r)=>{
                e(r);
            }, i1, s);
        }
        return this;
    }
    dispose() {
        return super.dispose(), this._timeline = [], this;
    }
};
var Ri1 = [];
function ie3(n) {
    Ri1.push(n);
}
function Fi1(n) {
    Ri1.forEach((t)=>t(n));
}
var Ei1 = [];
function oe3(n) {
    Ei1.push(n);
}
function Ci1(n) {
    Ei1.forEach((t)=>t(n));
}
var Ot2 = class extends H2 {
    constructor(){
        super(...arguments), this.name = "Emitter";
    }
    on(t, e) {
        return t.split(/\W+/).forEach((i1)=>{
            N1(this._events) && (this._events = {}), this._events.hasOwnProperty(i1) || (this._events[i1] = []), this._events[i1].push(e);
        }), this;
    }
    once(t, e) {
        let s = (...i1)=>{
            e(...i1), this.off(t, s);
        };
        return this.on(t, s), this;
    }
    off(t, e) {
        return t.split(/\W+/).forEach((i1)=>{
            if (N1(this._events) && (this._events = {}), this._events.hasOwnProperty(i1)) if (N1(e)) this._events[i1] = [];
            else {
                let r = this._events[i1];
                for(let a = r.length - 1; a >= 0; a--)r[a] === e && r.splice(a, 1);
            }
        }), this;
    }
    emit(t, ...e) {
        if (this._events && this._events.hasOwnProperty(t)) {
            let s = this._events[t].slice(0);
            for(let i1 = 0, r = s.length; i1 < r; i1++)s[i1].apply(this, e);
        }
        return this;
    }
    static mixin(t) {
        [
            "on",
            "once",
            "off",
            "emit"
        ].forEach((e)=>{
            let s = Object.getOwnPropertyDescriptor(Ot2.prototype, e);
            Object.defineProperty(t.prototype, e, s);
        });
    }
    dispose() {
        return super.dispose(), this._events = void 0, this;
    }
};
var Ie2 = class extends Ot2 {
    constructor(){
        super(...arguments), this.isOffline = !1;
    }
    toJSON() {
        return {};
    }
};
var zt2 = class extends Ie2 {
    constructor(){
        var t, e;
        super(), this.name = "Context", this._constants = new Map, this._timeouts = new L2, this._timeoutIds = 0, this._initialized = !1, this._closeStarted = !1, this.isOffline = !1, this._workletPromise = null;
        let s = o2(zt2.getDefaults(), arguments, [
            "context"
        ]);
        s.context ? (this._context = s.context, this._latencyHint = ((t = arguments[0]) === null || t === void 0 ? void 0 : t.latencyHint) || "") : (this._context = wi1({
            latencyHint: s.latencyHint
        }), this._latencyHint = s.latencyHint), this._ticker = new Gs1(this.emit.bind(this, "tick"), s.clockSource, s.updateInterval, this._context.sampleRate), this.on("tick", this._timeoutLoop.bind(this)), this._context.onstatechange = ()=>{
            this.emit("statechange", this.state);
        }, this[!((e = arguments[0]) === null || e === void 0) && e.hasOwnProperty("updateInterval") ? "_lookAhead" : "lookAhead"] = s.lookAhead;
    }
    static getDefaults() {
        return {
            clockSource: "worker",
            latencyHint: "interactive",
            lookAhead: .1,
            updateInterval: .05
        };
    }
    initialize() {
        return this._initialized || (Fi1(this), this._initialized = !0), this;
    }
    createAnalyser() {
        return this._context.createAnalyser();
    }
    createOscillator() {
        return this._context.createOscillator();
    }
    createBufferSource() {
        return this._context.createBufferSource();
    }
    createBiquadFilter() {
        return this._context.createBiquadFilter();
    }
    createBuffer(t, e, s) {
        return this._context.createBuffer(t, e, s);
    }
    createChannelMerger(t) {
        return this._context.createChannelMerger(t);
    }
    createChannelSplitter(t) {
        return this._context.createChannelSplitter(t);
    }
    createConstantSource() {
        return this._context.createConstantSource();
    }
    createConvolver() {
        return this._context.createConvolver();
    }
    createDelay(t) {
        return this._context.createDelay(t);
    }
    createDynamicsCompressor() {
        return this._context.createDynamicsCompressor();
    }
    createGain() {
        return this._context.createGain();
    }
    createIIRFilter(t, e) {
        return this._context.createIIRFilter(t, e);
    }
    createPanner() {
        return this._context.createPanner();
    }
    createPeriodicWave(t, e, s) {
        return this._context.createPeriodicWave(t, e, s);
    }
    createStereoPanner() {
        return this._context.createStereoPanner();
    }
    createWaveShaper() {
        return this._context.createWaveShaper();
    }
    createMediaStreamSource(t) {
        return m3(se2(this._context), "Not available if OfflineAudioContext"), this._context.createMediaStreamSource(t);
    }
    createMediaElementSource(t) {
        return m3(se2(this._context), "Not available if OfflineAudioContext"), this._context.createMediaElementSource(t);
    }
    createMediaStreamDestination() {
        return m3(se2(this._context), "Not available if OfflineAudioContext"), this._context.createMediaStreamDestination();
    }
    decodeAudioData(t) {
        return this._context.decodeAudioData(t);
    }
    get currentTime() {
        return this._context.currentTime;
    }
    get state() {
        return this._context.state;
    }
    get sampleRate() {
        return this._context.sampleRate;
    }
    get listener() {
        return this.initialize(), this._listener;
    }
    set listener(t) {
        m3(!this._initialized, "The listener cannot be set after initialization."), this._listener = t;
    }
    get transport() {
        return this.initialize(), this._transport;
    }
    set transport(t) {
        m3(!this._initialized, "The transport cannot be set after initialization."), this._transport = t;
    }
    get draw() {
        return this.initialize(), this._draw;
    }
    set draw(t) {
        m3(!this._initialized, "Draw cannot be set after initialization."), this._draw = t;
    }
    get destination() {
        return this.initialize(), this._destination;
    }
    set destination(t) {
        m3(!this._initialized, "The destination cannot be set after initialization."), this._destination = t;
    }
    createAudioWorkletNode(t, e) {
        return Ai1(this.rawContext, t, e);
    }
    addAudioWorkletModule(t) {
        return M3(this, void 0, void 0, function*() {
            m3(g4(this.rawContext.audioWorklet), "AudioWorkletNode is only available in a secure context (https or localhost)"), this._workletPromise || (this._workletPromise = this.rawContext.audioWorklet.addModule(t)), yield this._workletPromise;
        });
    }
    workletsAreReady() {
        return M3(this, void 0, void 0, function*() {
            (yield this._workletPromise) ? this._workletPromise : Promise.resolve();
        });
    }
    get updateInterval() {
        return this._ticker.updateInterval;
    }
    set updateInterval(t) {
        this._ticker.updateInterval = t;
    }
    get clockSource() {
        return this._ticker.type;
    }
    set clockSource(t) {
        this._ticker.type = t;
    }
    get lookAhead() {
        return this._lookAhead;
    }
    set lookAhead(t) {
        this._lookAhead = t, this.updateInterval = t ? t / 2 : .01;
    }
    get latencyHint() {
        return this._latencyHint;
    }
    get rawContext() {
        return this._context;
    }
    now() {
        return this._context.currentTime + this._lookAhead;
    }
    immediate() {
        return this._context.currentTime;
    }
    resume() {
        return se2(this._context) ? this._context.resume() : Promise.resolve();
    }
    close() {
        return M3(this, void 0, void 0, function*() {
            se2(this._context) && this.state !== "closed" && !this._closeStarted && (this._closeStarted = !0, yield this._context.close()), this._initialized && Ci1(this);
        });
    }
    getConstant(t) {
        if (this._constants.has(t)) return this._constants.get(t);
        {
            let e = this._context.createBuffer(1, 128, this._context.sampleRate), s = e.getChannelData(0);
            for(let r = 0; r < s.length; r++)s[r] = t;
            let i1 = this._context.createBufferSource();
            return i1.channelCount = 1, i1.channelCountMode = "explicit", i1.buffer = e, i1.loop = !0, i1.start(0), this._constants.set(t, i1), i1;
        }
    }
    dispose() {
        return super.dispose(), this._ticker.dispose(), this._timeouts.dispose(), Object.keys(this._constants).map((t)=>this._constants[t].disconnect()), this.close(), this;
    }
    _timeoutLoop() {
        let t = this.now(), e = this._timeouts.peek();
        for(; this._timeouts.length && e && e.time <= t;)e.callback(), this._timeouts.shift(), e = this._timeouts.peek();
    }
    setTimeout(t, e) {
        this._timeoutIds++;
        let s = this.now();
        return this._timeouts.add({
            callback: t,
            id: this._timeoutIds,
            time: s + e
        }), this._timeoutIds;
    }
    clearTimeout(t) {
        return this._timeouts.forEach((e)=>{
            e.id === t && this._timeouts.remove(e);
        }), this;
    }
    clearInterval(t) {
        return this.clearTimeout(t);
    }
    setInterval(t, e) {
        let s = ++this._timeoutIds, i1 = ()=>{
            let r = this.now();
            this._timeouts.add({
                callback: ()=>{
                    t(), i1();
                },
                id: s,
                time: r + e
            });
        };
        return i1(), s;
    }
};
var Ws1 = class extends Ie2 {
    constructor(){
        super(...arguments), this.lookAhead = 0, this.latencyHint = 0, this.isOffline = !1;
    }
    createAnalyser() {
        return {};
    }
    createOscillator() {
        return {};
    }
    createBufferSource() {
        return {};
    }
    createBiquadFilter() {
        return {};
    }
    createBuffer(t, e, s) {
        return {};
    }
    createChannelMerger(t) {
        return {};
    }
    createChannelSplitter(t) {
        return {};
    }
    createConstantSource() {
        return {};
    }
    createConvolver() {
        return {};
    }
    createDelay(t) {
        return {};
    }
    createDynamicsCompressor() {
        return {};
    }
    createGain() {
        return {};
    }
    createIIRFilter(t, e) {
        return {};
    }
    createPanner() {
        return {};
    }
    createPeriodicWave(t, e, s) {
        return {};
    }
    createStereoPanner() {
        return {};
    }
    createWaveShaper() {
        return {};
    }
    createMediaStreamSource(t) {
        return {};
    }
    createMediaElementSource(t) {
        return {};
    }
    createMediaStreamDestination() {
        return {};
    }
    decodeAudioData(t) {
        return Promise.resolve({});
    }
    createAudioWorkletNode(t, e) {
        return {};
    }
    get rawContext() {
        return {};
    }
    addAudioWorkletModule(t) {
        return M3(this, void 0, void 0, function*() {
            return Promise.resolve();
        });
    }
    resume() {
        return Promise.resolve();
    }
    setTimeout(t, e) {
        return 0;
    }
    clearTimeout(t) {
        return this;
    }
    setInterval(t, e) {
        return 0;
    }
    clearInterval(t) {
        return this;
    }
    getConstant(t) {
        return {};
    }
    get currentTime() {
        return 0;
    }
    get state() {
        return {};
    }
    get sampleRate() {
        return 0;
    }
    get listener() {
        return {};
    }
    get transport() {
        return {};
    }
    get draw() {
        return {};
    }
    set draw(t) {}
    get destination() {
        return {};
    }
    set destination(t) {}
    now() {
        return 0;
    }
    immediate() {
        return 0;
    }
};
function u1(n, t) {
    F2(t) ? t.forEach((e)=>u1(n, e)) : Object.defineProperty(n, t, {
        enumerable: !0,
        writable: !1
    });
}
function Gt2(n, t) {
    F2(t) ? t.forEach((e)=>Gt2(n, e)) : Object.defineProperty(n, t, {
        writable: !0
    });
}
var _2 = ()=>{};
var v4 = class extends H2 {
    constructor(){
        super(), this.name = "ToneAudioBuffer", this.onload = _2;
        let t = o2(v4.getDefaults(), arguments, [
            "url",
            "onload",
            "onerror"
        ]);
        this.reverse = t.reverse, this.onload = t.onload, Z1(t.url) ? this.load(t.url).catch(t.onerror) : t.url && this.set(t.url);
    }
    static getDefaults() {
        return {
            onerror: _2,
            onload: _2,
            reverse: !1
        };
    }
    get sampleRate() {
        return this._buffer ? this._buffer.sampleRate : w2().sampleRate;
    }
    set(t) {
        return t instanceof v4 ? t.loaded ? this._buffer = t.get() : t.onload = ()=>{
            this.set(t), this.onload(this);
        } : this._buffer = t, this._reversed && this._reverse(), this;
    }
    get() {
        return this._buffer;
    }
    load(t) {
        return M3(this, void 0, void 0, function*() {
            let e = v4.load(t).then((s)=>{
                this.set(s), this.onload(this);
            });
            v4.downloads.push(e);
            try {
                yield e;
            } finally{
                let s = v4.downloads.indexOf(e);
                v4.downloads.splice(s, 1);
            }
            return this;
        });
    }
    dispose() {
        return super.dispose(), this._buffer = void 0, this;
    }
    fromArray(t) {
        let e = F2(t) && t[0].length > 0, s = e ? t.length : 1, i1 = e ? t[0].length : t.length, r = w2(), a = r.createBuffer(s, i1, r.sampleRate), c = !e && s === 1 ? [
            t
        ] : t;
        for(let p1 = 0; p1 < s; p1++)a.copyToChannel(c[p1], p1);
        return this._buffer = a, this;
    }
    toMono(t) {
        if (W1(t)) this.fromArray(this.toArray(t));
        else {
            let e = new Float32Array(this.length), s = this.numberOfChannels;
            for(let i1 = 0; i1 < s; i1++){
                let r = this.toArray(i1);
                for(let a = 0; a < r.length; a++)e[a] += r[a];
            }
            e = e.map((i1)=>i1 / s), this.fromArray(e);
        }
        return this;
    }
    toArray(t) {
        if (W1(t)) return this.getChannelData(t);
        if (this.numberOfChannels === 1) return this.toArray(0);
        {
            let e = [];
            for(let s = 0; s < this.numberOfChannels; s++)e[s] = this.getChannelData(s);
            return e;
        }
    }
    getChannelData(t) {
        return this._buffer ? this._buffer.getChannelData(t) : new Float32Array(0);
    }
    slice(t, e = this.duration) {
        m3(this.loaded, "Buffer is not loaded");
        let s = Math.floor(t * this.sampleRate), i1 = Math.floor(e * this.sampleRate);
        m3(s < i1, "The start time must be less than the end time");
        let r = i1 - s, a = w2().createBuffer(this.numberOfChannels, r, this.sampleRate);
        for(let c = 0; c < this.numberOfChannels; c++)a.copyToChannel(this.getChannelData(c).subarray(s, i1), c);
        return new v4(a);
    }
    _reverse() {
        if (this.loaded) for(let t = 0; t < this.numberOfChannels; t++)this.getChannelData(t).reverse();
        return this;
    }
    get loaded() {
        return this.length > 0;
    }
    get duration() {
        return this._buffer ? this._buffer.duration : 0;
    }
    get length() {
        return this._buffer ? this._buffer.length : 0;
    }
    get numberOfChannels() {
        return this._buffer ? this._buffer.numberOfChannels : 0;
    }
    get reverse() {
        return this._reversed;
    }
    set reverse(t) {
        this._reversed !== t && (this._reversed = t, this._reverse());
    }
    static fromArray(t) {
        return new v4().fromArray(t);
    }
    static fromUrl(t) {
        return M3(this, void 0, void 0, function*() {
            return yield new v4().load(t);
        });
    }
    static load(t) {
        return M3(this, void 0, void 0, function*() {
            let e = t.match(/\[([^\]\[]+\|.+)\]$/);
            if (e) {
                let p1 = e[1].split("|"), x1 = p1[0];
                for (let y of p1)if (v4.supportsType(y)) {
                    x1 = y;
                    break;
                }
                t = t.replace(e[0], x1);
            }
            let s = v4.baseUrl === "" || v4.baseUrl.endsWith("/") ? v4.baseUrl : v4.baseUrl + "/", i1 = document.createElement("a");
            i1.href = s + t, i1.pathname = (i1.pathname + i1.hash).split("/").map(encodeURIComponent).join("/");
            let r = yield fetch(i1.href);
            if (!r.ok) throw new Error(`could not load url: ${t}`);
            let a = yield r.arrayBuffer();
            return yield w2().decodeAudioData(a);
        });
    }
    static supportsType(t) {
        let e = t.split("."), s = e[e.length - 1];
        return document.createElement("audio").canPlayType("audio/" + s) !== "";
    }
    static loaded() {
        return M3(this, void 0, void 0, function*() {
            for(yield Promise.resolve(); v4.downloads.length;)yield v4.downloads[0];
        });
    }
};
v4.baseUrl = "";
v4.downloads = [];
var gt2 = class extends zt2 {
    constructor(){
        super({
            clockSource: "offline",
            context: Me2(arguments[0]) ? arguments[0] : Si1(arguments[0], arguments[1] * arguments[2], arguments[2]),
            lookAhead: 0,
            updateInterval: Me2(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]
        }), this.name = "OfflineContext", this._currentTime = 0, this.isOffline = !0, this._duration = Me2(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];
    }
    now() {
        return this._currentTime;
    }
    get currentTime() {
        return this._currentTime;
    }
    _renderClock(t) {
        return M3(this, void 0, void 0, function*() {
            let e = 0;
            for(; this._duration - this._currentTime >= 0;){
                this.emit("tick"), this._currentTime += 128 / this.sampleRate, e++;
                let s = Math.floor(this.sampleRate / 128);
                t && e % s === 0 && (yield new Promise((i1)=>setTimeout(i1, 1)));
            }
        });
    }
    render(t = !0) {
        return M3(this, void 0, void 0, function*() {
            yield this.workletsAreReady(), yield this._renderClock(t);
            let e = yield this._context.startRendering();
            return new v4(e);
        });
    }
    close() {
        return Promise.resolve();
    }
};
var Mi1 = new Ws1, be2 = Mi1;
function w2() {
    return be2 === Mi1 && ki1 && Ze3(new zt2), be2;
}
function Ze3(n, t = !1) {
    t && be2.dispose(), se2(n) ? be2 = new zt2(n) : Me2(n) ? be2 = new gt2(n) : be2 = n;
}
if (_t2 && !_t2.TONE_SILENCE_LOGGING) {
    let n2 = "v";
    $e2 === "dev" && (n2 = "");
    let t3 = ` * Tone.js ${n2}${$e2} * `;
    console.log(`%c${t3}`, "background: #000; color: #fff");
}
function qt2(n) {
    return Math.pow(10, n / 20);
}
function Wt2(n) {
    return 20 * (Math.log(n) / Math.LN10);
}
function Rt2(n) {
    return Math.pow(2, n / 12);
}
var Bs = 440;
function Ii1() {
    return Bs;
}
function ji1(n) {
    Bs = n;
}
function wt2(n) {
    return Math.round(hi1(n));
}
function hi1(n) {
    return 69 + 12 * Math.log2(n / Bs);
}
function Je1(n) {
    return Bs * Math.pow(2, (n - 69) / 12);
}
var je1 = class extends H2 {
    constructor(t, e, s){
        super(), this.defaultUnits = "s", this._val = e, this._units = s, this.context = t, this._expressions = this._getExpressions();
    }
    _getExpressions() {
        return {
            hz: {
                method: (t)=>this._frequencyToUnits(parseFloat(t)),
                regexp: /^(\d+(?:\.\d+)?)hz$/i
            },
            i: {
                method: (t)=>this._ticksToUnits(parseInt(t, 10)),
                regexp: /^(\d+)i$/i
            },
            m: {
                method: (t)=>this._beatsToUnits(parseInt(t, 10) * this._getTimeSignature()),
                regexp: /^(\d+)m$/i
            },
            n: {
                method: (t, e)=>{
                    let s = parseInt(t, 10), i1 = e === "." ? 1.5 : 1;
                    return s === 1 ? this._beatsToUnits(this._getTimeSignature()) * i1 : this._beatsToUnits(4 / s) * i1;
                },
                regexp: /^(\d+)n(\.?)$/i
            },
            number: {
                method: (t)=>this._expressions[this.defaultUnits].method.call(this, t),
                regexp: /^(\d+(?:\.\d+)?)$/
            },
            s: {
                method: (t)=>this._secondsToUnits(parseFloat(t)),
                regexp: /^(\d+(?:\.\d+)?)s$/
            },
            samples: {
                method: (t)=>parseInt(t, 10) / this.context.sampleRate,
                regexp: /^(\d+)samples$/
            },
            t: {
                method: (t)=>{
                    let e = parseInt(t, 10);
                    return this._beatsToUnits(8 / (Math.floor(e) * 3));
                },
                regexp: /^(\d+)t$/i
            },
            tr: {
                method: (t, e, s)=>{
                    let i1 = 0;
                    return t && t !== "0" && (i1 += this._beatsToUnits(this._getTimeSignature() * parseFloat(t))), e && e !== "0" && (i1 += this._beatsToUnits(parseFloat(e))), s && s !== "0" && (i1 += this._beatsToUnits(parseFloat(s) / 4)), i1;
                },
                regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/
            }
        };
    }
    valueOf() {
        if (this._val instanceof je1 && this.fromType(this._val), N1(this._val)) return this._noArg();
        if (Z1(this._val) && N1(this._units)) {
            for(let t in this._expressions)if (this._expressions[t].regexp.test(this._val.trim())) {
                this._units = t;
                break;
            }
        } else if (dt3(this._val)) {
            let t1 = 0;
            for(let e in this._val)if (g4(this._val[e])) {
                let s = this._val[e], i1 = new this.constructor(this.context, e).valueOf() * s;
                t1 += i1;
            }
            return t1;
        }
        if (g4(this._units)) {
            let t2 = this._expressions[this._units], e1 = this._val.toString().trim().match(t2.regexp);
            return e1 ? t2.method.apply(this, e1.slice(1)) : t2.method.call(this, this._val);
        } else return Z1(this._val) ? parseFloat(this._val) : this._val;
    }
    _frequencyToUnits(t) {
        return 1 / t;
    }
    _beatsToUnits(t) {
        return 60 / this._getBpm() * t;
    }
    _secondsToUnits(t) {
        return t;
    }
    _ticksToUnits(t) {
        return t * this._beatsToUnits(1) / this._getPPQ();
    }
    _noArg() {
        return this._now();
    }
    _getBpm() {
        return this.context.transport.bpm.value;
    }
    _getTimeSignature() {
        return this.context.transport.timeSignature;
    }
    _getPPQ() {
        return this.context.transport.PPQ;
    }
    fromType(t) {
        switch(this._units = void 0, this.defaultUnits){
            case "s":
                this._val = t.toSeconds();
                break;
            case "i":
                this._val = t.toTicks();
                break;
            case "hz":
                this._val = t.toFrequency();
                break;
            case "midi":
                this._val = t.toMidi();
                break;
        }
        return this;
    }
    toFrequency() {
        return 1 / this.toSeconds();
    }
    toSamples() {
        return this.toSeconds() * this.context.sampleRate;
    }
    toMilliseconds() {
        return this.toSeconds() * 1e3;
    }
};
var Y1 = class extends je1 {
    constructor(){
        super(...arguments), this.name = "TimeClass";
    }
    _getExpressions() {
        return Object.assign(super._getExpressions(), {
            now: {
                method: (t)=>this._now() + new this.constructor(this.context, t).valueOf(),
                regexp: /^\+(.+)/
            },
            quantize: {
                method: (t)=>{
                    let e = new Y1(this.context, t).valueOf();
                    return this._secondsToUnits(this.context.transport.nextSubdivision(e));
                },
                regexp: /^@(.+)/
            }
        });
    }
    quantize(t, e = 1) {
        let s = new this.constructor(this.context, t).valueOf(), i1 = this.valueOf(), c = Math.round(i1 / s) * s - i1;
        return i1 + c * e;
    }
    toNotation() {
        let t = this.toSeconds(), e = [
            "1m"
        ];
        for(let r = 1; r < 9; r++){
            let a = Math.pow(2, r);
            e.push(a + "n."), e.push(a + "n"), e.push(a + "t");
        }
        e.push("0");
        let s = e[0], i1 = new Y1(this.context, e[0]).toSeconds();
        return e.forEach((r)=>{
            let a = new Y1(this.context, r).toSeconds();
            Math.abs(a - t) < Math.abs(i1 - t) && (s = r, i1 = a);
        }), s;
    }
    toBarsBeatsSixteenths() {
        let t = this._beatsToUnits(1), e = this.valueOf() / t;
        e = parseFloat(e.toFixed(4));
        let s = Math.floor(e / this._getTimeSignature()), i1 = e % 1 * 4;
        e = Math.floor(e) % this._getTimeSignature();
        let r = i1.toString();
        return r.length > 3 && (i1 = parseFloat(parseFloat(r).toFixed(3))), [
            s,
            e,
            i1
        ].join(":");
    }
    toTicks() {
        let t = this._beatsToUnits(1);
        return this.valueOf() / t * this._getPPQ();
    }
    toSeconds() {
        return this.valueOf();
    }
    toMidi() {
        return wt2(this.toFrequency());
    }
    _now() {
        return this.context.now();
    }
};
var z2 = class extends Y1 {
    constructor(){
        super(...arguments), this.name = "Frequency", this.defaultUnits = "hz";
    }
    static get A4() {
        return Ii1();
    }
    static set A4(t) {
        ji1(t);
    }
    _getExpressions() {
        return Object.assign({}, super._getExpressions(), {
            midi: {
                regexp: /^(\d+(?:\.\d+)?midi)/,
                method (t) {
                    return this.defaultUnits === "midi" ? t : z2.mtof(t);
                }
            },
            note: {
                regexp: /^([a-g]{1}(?:b|#|##|x|bb|###|#x|x#|bbb)?)(-?[0-9]+)/i,
                method (t, e) {
                    let i1 = po1[t.toLowerCase()] + (parseInt(e, 10) + 1) * 12;
                    return this.defaultUnits === "midi" ? i1 : z2.mtof(i1);
                }
            },
            tr: {
                regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
                method (t, e, s) {
                    let i1 = 1;
                    return t && t !== "0" && (i1 *= this._beatsToUnits(this._getTimeSignature() * parseFloat(t))), e && e !== "0" && (i1 *= this._beatsToUnits(parseFloat(e))), s && s !== "0" && (i1 *= this._beatsToUnits(parseFloat(s) / 4)), i1;
                }
            }
        });
    }
    transpose(t) {
        return new z2(this.context, this.valueOf() * Rt2(t));
    }
    harmonize(t) {
        return t.map((e)=>this.transpose(e));
    }
    toMidi() {
        return wt2(this.valueOf());
    }
    toNote() {
        let t = this.toFrequency(), e = Math.log2(t / z2.A4), s = Math.round(12 * e) + 57, i1 = Math.floor(s / 12);
        return i1 < 0 && (s += -12 * i1), mo1[s % 12] + i1.toString();
    }
    toSeconds() {
        return 1 / super.toSeconds();
    }
    toTicks() {
        let t = this._beatsToUnits(1), e = this.valueOf() / t;
        return Math.floor(e * this._getPPQ());
    }
    _noArg() {
        return 0;
    }
    _frequencyToUnits(t) {
        return t;
    }
    _ticksToUnits(t) {
        return 1 / (t * 60 / (this._getBpm() * this._getPPQ()));
    }
    _beatsToUnits(t) {
        return 1 / super._beatsToUnits(t);
    }
    _secondsToUnits(t) {
        return 1 / t;
    }
    static mtof(t) {
        return Je1(t);
    }
    static ftom(t) {
        return wt2(t);
    }
}, po1 = {
    cbbb: -3,
    cbb: -2,
    cb: -1,
    c: 0,
    "c#": 1,
    cx: 2,
    "c##": 2,
    "c###": 3,
    "cx#": 3,
    "c#x": 3,
    dbbb: -1,
    dbb: 0,
    db: 1,
    d: 2,
    "d#": 3,
    dx: 4,
    "d##": 4,
    "d###": 5,
    "dx#": 5,
    "d#x": 5,
    ebbb: 1,
    ebb: 2,
    eb: 3,
    e: 4,
    "e#": 5,
    ex: 6,
    "e##": 6,
    "e###": 7,
    "ex#": 7,
    "e#x": 7,
    fbbb: 2,
    fbb: 3,
    fb: 4,
    f: 5,
    "f#": 6,
    fx: 7,
    "f##": 7,
    "f###": 8,
    "fx#": 8,
    "f#x": 8,
    gbbb: 4,
    gbb: 5,
    gb: 6,
    g: 7,
    "g#": 8,
    gx: 9,
    "g##": 9,
    "g###": 10,
    "gx#": 10,
    "g#x": 10,
    abbb: 6,
    abb: 7,
    ab: 8,
    a: 9,
    "a#": 10,
    ax: 11,
    "a##": 11,
    "a###": 12,
    "ax#": 12,
    "a#x": 12,
    bbbb: 8,
    bbb: 9,
    bb: 10,
    b: 11,
    "b#": 12,
    bx: 13,
    "b##": 13,
    "b###": 14,
    "bx#": 14,
    "b#x": 14
}, mo1 = [
    "C",
    "C#",
    "D",
    "D#",
    "E",
    "F",
    "F#",
    "G",
    "G#",
    "A",
    "A#",
    "B"
];
var E5 = class extends Y1 {
    constructor(){
        super(...arguments), this.name = "TransportTime";
    }
    _now() {
        return this.context.transport.seconds;
    }
};
var O2 = class extends H2 {
    constructor(){
        super();
        let t = o2(O2.getDefaults(), arguments, [
            "context"
        ]);
        this.defaultContext ? this.context = this.defaultContext : this.context = t.context;
    }
    static getDefaults() {
        return {
            context: w2()
        };
    }
    now() {
        return this.context.currentTime + this.context.lookAhead;
    }
    immediate() {
        return this.context.currentTime;
    }
    get sampleTime() {
        return 1 / this.context.sampleRate;
    }
    get blockTime() {
        return 128 / this.context.sampleRate;
    }
    toSeconds(t) {
        return oi1(t), new Y1(this.context, t).toSeconds();
    }
    toFrequency(t) {
        return new z2(this.context, t).toFrequency();
    }
    toTicks(t) {
        return new E5(this.context, t).toTicks();
    }
    _getPartialProperties(t) {
        let e = this.get();
        return Object.keys(e).forEach((s)=>{
            N1(t[s]) && delete e[s];
        }), e;
    }
    get() {
        let t = qi1(this);
        return Object.keys(t).forEach((e)=>{
            if (Reflect.has(this, e)) {
                let s = this[e];
                g4(s) && g4(s.value) && g4(s.setValueAtTime) ? t[e] = s.value : s instanceof O2 ? t[e] = s._getPartialProperties(t[e]) : F2(s) || W1(s) || Z1(s) || Ls(s) ? t[e] = s : delete t[e];
            }
        }), t;
    }
    set(t) {
        return Object.keys(t).forEach((e)=>{
            Reflect.has(this, e) && g4(this[e]) && (this[e] && g4(this[e].value) && g4(this[e].setValueAtTime) ? this[e].value !== t[e] && (this[e].value = t[e]) : this[e] instanceof O2 ? this[e].set(t[e]) : this[e] = t[e]);
        }), this;
    }
};
var xt2 = class extends L2 {
    constructor(t = "stopped"){
        super(), this.name = "StateTimeline", this._initial = t, this.setStateAtTime(this._initial, 0);
    }
    getValueAtTime(t) {
        let e = this.get(t);
        return e !== null ? e.state : this._initial;
    }
    setStateAtTime(t, e, s) {
        return q2(e, 0), this.add(Object.assign({}, s, {
            state: t,
            time: e
        })), this;
    }
    getLastState(t, e) {
        let s = this._search(e);
        for(let i1 = s; i1 >= 0; i1--){
            let r = this._timeline[i1];
            if (r.state === t) return r;
        }
    }
    getNextState(t, e) {
        let s = this._search(e);
        if (s !== -1) for(let i1 = s; i1 < this._timeline.length; i1++){
            let r = this._timeline[i1];
            if (r.state === t) return r;
        }
    }
};
var d2 = class extends O2 {
    constructor(){
        super(o2(d2.getDefaults(), arguments, [
            "param",
            "units",
            "convert"
        ])), this.name = "Param", this.overridden = !1, this._minOutput = 1e-7;
        let t = o2(d2.getDefaults(), arguments, [
            "param",
            "units",
            "convert"
        ]);
        for(m3(g4(t.param) && (Tt2(t.param) || t.param instanceof d2), "param must be an AudioParam"); !Tt2(t.param);)t.param = t.param._param;
        this._swappable = g4(t.swappable) ? t.swappable : !1, this._swappable ? (this.input = this.context.createGain(), this._param = t.param, this.input.connect(this._param)) : this._param = this.input = t.param, this._events = new L2(1e3), this._initialValue = this._param.defaultValue, this.units = t.units, this.convert = t.convert, this._minValue = t.minValue, this._maxValue = t.maxValue, g4(t.value) && t.value !== this._toType(this._initialValue) && this.setValueAtTime(t.value, 0);
    }
    static getDefaults() {
        return Object.assign(O2.getDefaults(), {
            convert: !0,
            units: "number"
        });
    }
    get value() {
        let t = this.now();
        return this.getValueAtTime(t);
    }
    set value(t) {
        this.cancelScheduledValues(this.now()), this.setValueAtTime(t, this.now());
    }
    get minValue() {
        return g4(this._minValue) ? this._minValue : this.units === "time" || this.units === "frequency" || this.units === "normalRange" || this.units === "positive" || this.units === "transportTime" || this.units === "ticks" || this.units === "bpm" || this.units === "hertz" || this.units === "samples" ? 0 : this.units === "audioRange" ? -1 : this.units === "decibels" ? -1 / 0 : this._param.minValue;
    }
    get maxValue() {
        return g4(this._maxValue) ? this._maxValue : this.units === "normalRange" || this.units === "audioRange" ? 1 : this._param.maxValue;
    }
    _is(t, e) {
        return this.units === e;
    }
    _assertRange(t) {
        return g4(this.maxValue) && g4(this.minValue) && q2(t, this._fromType(this.minValue), this._fromType(this.maxValue)), t;
    }
    _fromType(t) {
        return this.convert && !this.overridden ? this._is(t, "time") ? this.toSeconds(t) : this._is(t, "decibels") ? qt2(t) : this._is(t, "frequency") ? this.toFrequency(t) : t : this.overridden ? 0 : t;
    }
    _toType(t) {
        return this.convert && this.units === "decibels" ? Wt2(t) : t;
    }
    setValueAtTime(t, e) {
        let s = this.toSeconds(e), i1 = this._fromType(t);
        return m3(isFinite(i1) && isFinite(s), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._assertRange(i1), this.log(this.units, "setValueAtTime", t, s), this._events.add({
            time: s,
            type: "setValueAtTime",
            value: i1
        }), this._param.setValueAtTime(i1, s), this;
    }
    getValueAtTime(t) {
        let e = Math.max(this.toSeconds(t), 0), s = this._events.getAfter(e), i1 = this._events.get(e), r = this._initialValue;
        if (i1 === null) r = this._initialValue;
        else if (i1.type === "setTargetAtTime" && (s === null || s.type === "setValueAtTime")) {
            let a = this._events.getBefore(i1.time), c;
            a === null ? c = this._initialValue : c = a.value, i1.type === "setTargetAtTime" && (r = this._exponentialApproach(i1.time, c, i1.value, i1.constant, e));
        } else if (s === null) r = i1.value;
        else if (s.type === "linearRampToValueAtTime" || s.type === "exponentialRampToValueAtTime") {
            let a1 = i1.value;
            if (i1.type === "setTargetAtTime") {
                let c1 = this._events.getBefore(i1.time);
                c1 === null ? a1 = this._initialValue : a1 = c1.value;
            }
            s.type === "linearRampToValueAtTime" ? r = this._linearInterpolate(i1.time, a1, s.time, s.value, e) : r = this._exponentialInterpolate(i1.time, a1, s.time, s.value, e);
        } else r = i1.value;
        return this._toType(r);
    }
    setRampPoint(t) {
        t = this.toSeconds(t);
        let e = this.getValueAtTime(t);
        return this.cancelAndHoldAtTime(t), this._fromType(e) === 0 && (e = this._toType(this._minOutput)), this.setValueAtTime(e, t), this;
    }
    linearRampToValueAtTime(t, e) {
        let s = this._fromType(t), i1 = this.toSeconds(e);
        return m3(isFinite(s) && isFinite(i1), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._assertRange(s), this._events.add({
            time: i1,
            type: "linearRampToValueAtTime",
            value: s
        }), this.log(this.units, "linearRampToValueAtTime", t, i1), this._param.linearRampToValueAtTime(s, i1), this;
    }
    exponentialRampToValueAtTime(t, e) {
        let s = this._fromType(t);
        s = it2(s, 0) ? this._minOutput : s, this._assertRange(s);
        let i1 = this.toSeconds(e);
        return m3(isFinite(s) && isFinite(i1), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._events.add({
            time: i1,
            type: "exponentialRampToValueAtTime",
            value: s
        }), this.log(this.units, "exponentialRampToValueAtTime", t, i1), this._param.exponentialRampToValueAtTime(s, i1), this;
    }
    exponentialRampTo(t, e, s) {
        return s = this.toSeconds(s), this.setRampPoint(s), this.exponentialRampToValueAtTime(t, s + this.toSeconds(e)), this;
    }
    linearRampTo(t, e, s) {
        return s = this.toSeconds(s), this.setRampPoint(s), this.linearRampToValueAtTime(t, s + this.toSeconds(e)), this;
    }
    targetRampTo(t, e, s) {
        return s = this.toSeconds(s), this.setRampPoint(s), this.exponentialApproachValueAtTime(t, s, e), this;
    }
    exponentialApproachValueAtTime(t, e, s) {
        e = this.toSeconds(e), s = this.toSeconds(s);
        let i1 = Math.log(s + 1) / Math.log(200);
        return this.setTargetAtTime(t, e, i1), this.cancelAndHoldAtTime(e + s * .9), this.linearRampToValueAtTime(t, e + s), this;
    }
    setTargetAtTime(t, e, s) {
        let i1 = this._fromType(t);
        m3(isFinite(s) && s > 0, "timeConstant must be a number greater than 0");
        let r = this.toSeconds(e);
        return this._assertRange(i1), m3(isFinite(i1) && isFinite(r), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._events.add({
            constant: s,
            time: r,
            type: "setTargetAtTime",
            value: i1
        }), this.log(this.units, "setTargetAtTime", t, r, s), this._param.setTargetAtTime(i1, r, s), this;
    }
    setValueCurveAtTime(t, e, s, i1 = 1) {
        s = this.toSeconds(s), e = this.toSeconds(e);
        let r = this._fromType(t[0]) * i1;
        this.setValueAtTime(this._toType(r), e);
        let a = s / (t.length - 1);
        for(let c = 1; c < t.length; c++){
            let p1 = this._fromType(t[c]) * i1;
            this.linearRampToValueAtTime(this._toType(p1), e + c * a);
        }
        return this;
    }
    cancelScheduledValues(t) {
        let e = this.toSeconds(t);
        return m3(isFinite(e), `Invalid argument to cancelScheduledValues: ${JSON.stringify(t)}`), this._events.cancel(e), this._param.cancelScheduledValues(e), this.log(this.units, "cancelScheduledValues", e), this;
    }
    cancelAndHoldAtTime(t) {
        let e = this.toSeconds(t), s = this._fromType(this.getValueAtTime(e));
        m3(isFinite(e), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(t)}`), this.log(this.units, "cancelAndHoldAtTime", e, "value=" + s);
        let i1 = this._events.get(e), r = this._events.getAfter(e);
        return i1 && it2(i1.time, e) ? r ? (this._param.cancelScheduledValues(r.time), this._events.cancel(r.time)) : (this._param.cancelAndHoldAtTime(e), this._events.cancel(e + this.sampleTime)) : r && (this._param.cancelScheduledValues(r.time), this._events.cancel(r.time), r.type === "linearRampToValueAtTime" ? this.linearRampToValueAtTime(this._toType(s), e) : r.type === "exponentialRampToValueAtTime" && this.exponentialRampToValueAtTime(this._toType(s), e)), this._events.add({
            time: e,
            type: "setValueAtTime",
            value: s
        }), this._param.setValueAtTime(s, e), this;
    }
    rampTo(t, e = .1, s) {
        return this.units === "frequency" || this.units === "bpm" || this.units === "decibels" ? this.exponentialRampTo(t, e, s) : this.linearRampTo(t, e, s), this;
    }
    apply(t) {
        let e = this.context.currentTime;
        t.setValueAtTime(this.getValueAtTime(e), e);
        let s = this._events.get(e);
        if (s && s.type === "setTargetAtTime") {
            let i1 = this._events.getAfter(s.time), r = i1 ? i1.time : e + 2, a = (r - e) / 10;
            for(let c = e; c < r; c += a)t.linearRampToValueAtTime(this.getValueAtTime(c), c);
        }
        return this._events.forEachAfter(this.context.currentTime, (i1)=>{
            i1.type === "cancelScheduledValues" ? t.cancelScheduledValues(i1.time) : i1.type === "setTargetAtTime" ? t.setTargetAtTime(i1.value, i1.time, i1.constant) : t[i1.type](i1.value, i1.time);
        }), this;
    }
    setParam(t) {
        m3(this._swappable, "The Param must be assigned as 'swappable' in the constructor");
        let e = this.input;
        return e.disconnect(this._param), this.apply(t), this._param = t, e.connect(this._param), this;
    }
    dispose() {
        return super.dispose(), this._events.dispose(), this;
    }
    get defaultValue() {
        return this._toType(this._param.defaultValue);
    }
    _exponentialApproach(t, e, s, i1, r) {
        return s + (e - s) * Math.exp(-(r - t) / i1);
    }
    _linearInterpolate(t, e, s, i1, r) {
        return e + (i1 - e) * ((r - t) / (s - t));
    }
    _exponentialInterpolate(t, e, s, i1, r) {
        return e * Math.pow(i1 / e, (r - t) / (s - t));
    }
};
var h1 = class extends O2 {
    constructor(){
        super(...arguments), this._internalChannels = [];
    }
    get numberOfInputs() {
        return g4(this.input) ? Tt2(this.input) || this.input instanceof d2 ? 1 : this.input.numberOfInputs : 0;
    }
    get numberOfOutputs() {
        return g4(this.output) ? this.output.numberOfOutputs : 0;
    }
    _isAudioNode(t) {
        return g4(t) && (t instanceof h1 || Dt2(t));
    }
    _getInternalNodes() {
        let t = this._internalChannels.slice(0);
        return this._isAudioNode(this.input) && t.push(this.input), this._isAudioNode(this.output) && this.input !== this.output && t.push(this.output), t;
    }
    _setChannelProperties(t) {
        this._getInternalNodes().forEach((s)=>{
            s.channelCount = t.channelCount, s.channelCountMode = t.channelCountMode, s.channelInterpretation = t.channelInterpretation;
        });
    }
    _getChannelProperties() {
        let t = this._getInternalNodes();
        m3(t.length > 0, "ToneAudioNode does not have any internal nodes");
        let e = t[0];
        return {
            channelCount: e.channelCount,
            channelCountMode: e.channelCountMode,
            channelInterpretation: e.channelInterpretation
        };
    }
    get channelCount() {
        return this._getChannelProperties().channelCount;
    }
    set channelCount(t) {
        let e = this._getChannelProperties();
        this._setChannelProperties(Object.assign(e, {
            channelCount: t
        }));
    }
    get channelCountMode() {
        return this._getChannelProperties().channelCountMode;
    }
    set channelCountMode(t) {
        let e = this._getChannelProperties();
        this._setChannelProperties(Object.assign(e, {
            channelCountMode: t
        }));
    }
    get channelInterpretation() {
        return this._getChannelProperties().channelInterpretation;
    }
    set channelInterpretation(t) {
        let e = this._getChannelProperties();
        this._setChannelProperties(Object.assign(e, {
            channelInterpretation: t
        }));
    }
    connect(t, e = 0, s = 0) {
        return P2(this, t, e, s), this;
    }
    toDestination() {
        return this.connect(this.context.destination), this;
    }
    toMaster() {
        return Nt2("toMaster() has been renamed toDestination()"), this.toDestination();
    }
    disconnect(t, e = 0, s = 0) {
        return ci1(this, t, e, s), this;
    }
    chain(...t) {
        return U1(this, ...t), this;
    }
    fan(...t) {
        return t.forEach((e)=>this.connect(e)), this;
    }
    dispose() {
        return super.dispose(), g4(this.input) && (this.input instanceof h1 ? this.input.dispose() : Dt2(this.input) && this.input.disconnect()), g4(this.output) && (this.output instanceof h1 ? this.output.dispose() : Dt2(this.output) && this.output.disconnect()), this._internalChannels = [], this;
    }
};
function U1(...n) {
    let t = n.shift();
    n.reduce((e, s)=>(e instanceof h1 ? e.connect(s) : Dt2(e) && P2(e, s), s), t);
}
function P2(n, t, e = 0, s = 0) {
    for(m3(g4(n), "Cannot connect from undefined node"), m3(g4(t), "Cannot connect to undefined node"), (t instanceof h1 || Dt2(t)) && m3(t.numberOfInputs > 0, "Cannot connect to node with no inputs"), m3(n.numberOfOutputs > 0, "Cannot connect from node with no outputs"); t instanceof h1 || t instanceof d2;)g4(t.input) && (t = t.input);
    for(; n instanceof h1;)g4(n.output) && (n = n.output);
    Tt2(t) ? n.connect(t, e) : n.connect(t, e, s);
}
function ci1(n, t, e = 0, s = 0) {
    if (g4(t)) for(; t instanceof h1;)t = t.input;
    for(; !Dt2(n);)g4(n.output) && (n = n.output);
    Tt2(t) ? n.disconnect(t, e) : Dt2(t) ? n.disconnect(t, e, s) : n.disconnect();
}
var l1 = class extends h1 {
    constructor(){
        super(o2(l1.getDefaults(), arguments, [
            "gain",
            "units"
        ])), this.name = "Gain", this._gainNode = this.context.createGain(), this.input = this._gainNode, this.output = this._gainNode;
        let t = o2(l1.getDefaults(), arguments, [
            "gain",
            "units"
        ]);
        this.gain = new d2({
            context: this.context,
            convert: t.convert,
            param: this._gainNode.gain,
            units: t.units,
            value: t.gain,
            minValue: t.minValue,
            maxValue: t.maxValue
        }), u1(this, "gain");
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            convert: !0,
            gain: 1,
            units: "gain"
        });
    }
    dispose() {
        return super.dispose(), this._gainNode.disconnect(), this.gain.dispose(), this;
    }
};
var St2 = class extends h1 {
    constructor(t){
        super(t), this.onended = _2, this._startTime = -1, this._stopTime = -1, this._timeout = -1, this.output = new l1({
            context: this.context,
            gain: 0
        }), this._gainNode = this.output, this.getStateAtTime = function(e) {
            let s = this.toSeconds(e);
            return this._startTime !== -1 && s >= this._startTime && (this._stopTime === -1 || s <= this._stopTime) ? "started" : "stopped";
        }, this._fadeIn = t.fadeIn, this._fadeOut = t.fadeOut, this._curve = t.curve, this.onended = t.onended;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            curve: "linear",
            fadeIn: 0,
            fadeOut: 0,
            onended: _2
        });
    }
    _startGain(t, e = 1) {
        m3(this._startTime === -1, "Source cannot be started more than once");
        let s = this.toSeconds(this._fadeIn);
        return this._startTime = t + s, this._startTime = Math.max(this._startTime, this.context.currentTime), s > 0 ? (this._gainNode.gain.setValueAtTime(0, t), this._curve === "linear" ? this._gainNode.gain.linearRampToValueAtTime(e, t + s) : this._gainNode.gain.exponentialApproachValueAtTime(e, t, s)) : this._gainNode.gain.setValueAtTime(e, t), this;
    }
    stop(t) {
        return this.log("stop", t), this._stopGain(this.toSeconds(t)), this;
    }
    _stopGain(t) {
        m3(this._startTime !== -1, "'start' must be called before 'stop'"), this.cancelStop();
        let e = this.toSeconds(this._fadeOut);
        return this._stopTime = this.toSeconds(t) + e, this._stopTime = Math.max(this._stopTime, this.now()), e > 0 ? this._curve === "linear" ? this._gainNode.gain.linearRampTo(0, e, t) : this._gainNode.gain.targetRampTo(0, e, t) : (this._gainNode.gain.cancelAndHoldAtTime(t), this._gainNode.gain.setValueAtTime(0, t)), this.context.clearTimeout(this._timeout), this._timeout = this.context.setTimeout(()=>{
            let s = this._curve === "exponential" ? e * 2 : 0;
            this._stopSource(this.now() + s), this._onended();
        }, this._stopTime - this.context.currentTime), this;
    }
    _onended() {
        if (this.onended !== _2 && (this.onended(this), this.onended = _2, !this.context.isOffline)) {
            let t = ()=>this.dispose();
            typeof window.requestIdleCallback < "u" ? window.requestIdleCallback(t) : setTimeout(t, 1e3);
        }
    }
    get state() {
        return this.getStateAtTime(this.now());
    }
    cancelStop() {
        return this.log("cancelStop"), m3(this._startTime !== -1, "Source is not started"), this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime), this.context.clearTimeout(this._timeout), this._stopTime = -1, this;
    }
    dispose() {
        return super.dispose(), this._gainNode.dispose(), this.onended = _2, this;
    }
};
var Ut2 = class extends St2 {
    constructor(){
        super(o2(Ut2.getDefaults(), arguments, [
            "offset"
        ])), this.name = "ToneConstantSource", this._source = this.context.createConstantSource();
        let t = o2(Ut2.getDefaults(), arguments, [
            "offset"
        ]);
        P2(this._source, this._gainNode), this.offset = new d2({
            context: this.context,
            convert: t.convert,
            param: this._source.offset,
            units: t.units,
            value: t.offset,
            minValue: t.minValue,
            maxValue: t.maxValue
        });
    }
    static getDefaults() {
        return Object.assign(St2.getDefaults(), {
            convert: !0,
            offset: 1,
            units: "number"
        });
    }
    start(t) {
        let e = this.toSeconds(t);
        return this.log("start", e), this._startGain(e), this._source.start(e), this;
    }
    _stopSource(t) {
        this._source.stop(t);
    }
    dispose() {
        return super.dispose(), this.state === "started" && this.stop(), this._source.disconnect(), this.offset.dispose(), this;
    }
};
var f = class extends h1 {
    constructor(){
        super(o2(f.getDefaults(), arguments, [
            "value",
            "units"
        ])), this.name = "Signal", this.override = !0;
        let t = o2(f.getDefaults(), arguments, [
            "value",
            "units"
        ]);
        this.output = this._constantSource = new Ut2({
            context: this.context,
            convert: t.convert,
            offset: t.value,
            units: t.units,
            minValue: t.minValue,
            maxValue: t.maxValue
        }), this._constantSource.start(0), this.input = this._param = this._constantSource.offset;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            convert: !0,
            units: "number",
            value: 0
        });
    }
    connect(t, e = 0, s = 0) {
        return Te2(this, t, e, s), this;
    }
    dispose() {
        return super.dispose(), this._param.dispose(), this._constantSource.dispose(), this;
    }
    setValueAtTime(t, e) {
        return this._param.setValueAtTime(t, e), this;
    }
    getValueAtTime(t) {
        return this._param.getValueAtTime(t);
    }
    setRampPoint(t) {
        return this._param.setRampPoint(t), this;
    }
    linearRampToValueAtTime(t, e) {
        return this._param.linearRampToValueAtTime(t, e), this;
    }
    exponentialRampToValueAtTime(t, e) {
        return this._param.exponentialRampToValueAtTime(t, e), this;
    }
    exponentialRampTo(t, e, s) {
        return this._param.exponentialRampTo(t, e, s), this;
    }
    linearRampTo(t, e, s) {
        return this._param.linearRampTo(t, e, s), this;
    }
    targetRampTo(t, e, s) {
        return this._param.targetRampTo(t, e, s), this;
    }
    exponentialApproachValueAtTime(t, e, s) {
        return this._param.exponentialApproachValueAtTime(t, e, s), this;
    }
    setTargetAtTime(t, e, s) {
        return this._param.setTargetAtTime(t, e, s), this;
    }
    setValueCurveAtTime(t, e, s, i1) {
        return this._param.setValueCurveAtTime(t, e, s, i1), this;
    }
    cancelScheduledValues(t) {
        return this._param.cancelScheduledValues(t), this;
    }
    cancelAndHoldAtTime(t) {
        return this._param.cancelAndHoldAtTime(t), this;
    }
    rampTo(t, e, s) {
        return this._param.rampTo(t, e, s), this;
    }
    get value() {
        return this._param.value;
    }
    set value(t) {
        this._param.value = t;
    }
    get convert() {
        return this._param.convert;
    }
    set convert(t) {
        this._param.convert = t;
    }
    get units() {
        return this._param.units;
    }
    get overridden() {
        return this._param.overridden;
    }
    set overridden(t) {
        this._param.overridden = t;
    }
    get maxValue() {
        return this._param.maxValue;
    }
    get minValue() {
        return this._param.minValue;
    }
    apply(t) {
        return this._param.apply(t), this;
    }
};
function Te2(n, t, e, s) {
    (t instanceof d2 || Tt2(t) || t instanceof f && t.override) && (t.cancelScheduledValues(0), t.setValueAtTime(0, 0), t instanceof f && (t.overridden = !0)), P2(n, t, e, s);
}
var we2 = class extends d2 {
    constructor(){
        super(o2(we2.getDefaults(), arguments, [
            "value"
        ])), this.name = "TickParam", this._events = new L2(1 / 0), this._multiplier = 1;
        let t = o2(we2.getDefaults(), arguments, [
            "value"
        ]);
        this._multiplier = t.multiplier, this._events.cancel(0), this._events.add({
            ticks: 0,
            time: 0,
            type: "setValueAtTime",
            value: this._fromType(t.value)
        }), this.setValueAtTime(t.value, 0);
    }
    static getDefaults() {
        return Object.assign(d2.getDefaults(), {
            multiplier: 1,
            units: "hertz",
            value: 1
        });
    }
    setTargetAtTime(t, e, s) {
        e = this.toSeconds(e), this.setRampPoint(e);
        let i1 = this._fromType(t), r = this._events.get(e), a = Math.round(Math.max(1 / s, 1));
        for(let c = 0; c <= a; c++){
            let p1 = s * c + e, x1 = this._exponentialApproach(r.time, r.value, i1, s, p1);
            this.linearRampToValueAtTime(this._toType(x1), p1);
        }
        return this;
    }
    setValueAtTime(t, e) {
        let s = this.toSeconds(e);
        super.setValueAtTime(t, e);
        let i1 = this._events.get(s), r = this._events.previousEvent(i1), a = this._getTicksUntilEvent(r, s);
        return i1.ticks = Math.max(a, 0), this;
    }
    linearRampToValueAtTime(t, e) {
        let s = this.toSeconds(e);
        super.linearRampToValueAtTime(t, e);
        let i1 = this._events.get(s), r = this._events.previousEvent(i1), a = this._getTicksUntilEvent(r, s);
        return i1.ticks = Math.max(a, 0), this;
    }
    exponentialRampToValueAtTime(t, e) {
        e = this.toSeconds(e);
        let s = this._fromType(t), i1 = this._events.get(e), r = Math.round(Math.max((e - i1.time) * 10, 1)), a = (e - i1.time) / r;
        for(let c = 0; c <= r; c++){
            let p1 = a * c + i1.time, x1 = this._exponentialInterpolate(i1.time, i1.value, e, s, p1);
            this.linearRampToValueAtTime(this._toType(x1), p1);
        }
        return this;
    }
    _getTicksUntilEvent(t, e) {
        if (t === null) t = {
            ticks: 0,
            time: 0,
            type: "setValueAtTime",
            value: 0
        };
        else if (N1(t.ticks)) {
            let a = this._events.previousEvent(t);
            t.ticks = this._getTicksUntilEvent(a, t.time);
        }
        let s = this._fromType(this.getValueAtTime(t.time)), i1 = this._fromType(this.getValueAtTime(e)), r = this._events.get(e);
        return r && r.time === e && r.type === "setValueAtTime" && (i1 = this._fromType(this.getValueAtTime(e - this.sampleTime))), .5 * (e - t.time) * (s + i1) + t.ticks;
    }
    getTicksAtTime(t) {
        let e = this.toSeconds(t), s = this._events.get(e);
        return Math.max(this._getTicksUntilEvent(s, e), 0);
    }
    getDurationOfTicks(t, e) {
        let s = this.toSeconds(e), i1 = this.getTicksAtTime(e);
        return this.getTimeOfTick(i1 + t) - s;
    }
    getTimeOfTick(t) {
        let e = this._events.get(t, "ticks"), s = this._events.getAfter(t, "ticks");
        if (e && e.ticks === t) return e.time;
        if (e && s && s.type === "linearRampToValueAtTime" && e.value !== s.value) {
            let i1 = this._fromType(this.getValueAtTime(e.time)), a = (this._fromType(this.getValueAtTime(s.time)) - i1) / (s.time - e.time), c = Math.sqrt(Math.pow(i1, 2) - 2 * a * (e.ticks - t)), p1 = (-i1 + c) / a, x1 = (-i1 - c) / a;
            return (p1 > 0 ? p1 : x1) + e.time;
        } else return e ? e.value === 0 ? 1 / 0 : e.time + (t - e.ticks) / e.value : t / this._initialValue;
    }
    ticksToTime(t, e) {
        return this.getDurationOfTicks(t, e);
    }
    timeToTicks(t, e) {
        let s = this.toSeconds(e), i1 = this.toSeconds(t), r = this.getTicksAtTime(s);
        return this.getTicksAtTime(s + i1) - r;
    }
    _fromType(t) {
        return this.units === "bpm" && this.multiplier ? 1 / (60 / t / this.multiplier) : super._fromType(t);
    }
    _toType(t) {
        return this.units === "bpm" && this.multiplier ? t / this.multiplier * 60 : super._toType(t);
    }
    get multiplier() {
        return this._multiplier;
    }
    set multiplier(t) {
        let e = this.value;
        this._multiplier = t, this.cancelScheduledValues(0), this.setValueAtTime(e, 0);
    }
};
var Se2 = class extends f {
    constructor(){
        super(o2(Se2.getDefaults(), arguments, [
            "value"
        ])), this.name = "TickSignal";
        let t = o2(Se2.getDefaults(), arguments, [
            "value"
        ]);
        this.input = this._param = new we2({
            context: this.context,
            convert: t.convert,
            multiplier: t.multiplier,
            param: this._constantSource.offset,
            units: t.units,
            value: t.value
        });
    }
    static getDefaults() {
        return Object.assign(f.getDefaults(), {
            multiplier: 1,
            units: "hertz",
            value: 1
        });
    }
    ticksToTime(t, e) {
        return this._param.ticksToTime(t, e);
    }
    timeToTicks(t, e) {
        return this._param.timeToTicks(t, e);
    }
    getTimeOfTick(t) {
        return this._param.getTimeOfTick(t);
    }
    getDurationOfTicks(t, e) {
        return this._param.getDurationOfTicks(t, e);
    }
    getTicksAtTime(t) {
        return this._param.getTicksAtTime(t);
    }
    get multiplier() {
        return this._param.multiplier;
    }
    set multiplier(t) {
        this._param.multiplier = t;
    }
    dispose() {
        return super.dispose(), this._param.dispose(), this;
    }
};
var ke2 = class extends O2 {
    constructor(){
        super(o2(ke2.getDefaults(), arguments, [
            "frequency"
        ])), this.name = "TickSource", this._state = new xt2, this._tickOffset = new L2, this._ticksAtTime = new L2, this._secondsAtTime = new L2;
        let t = o2(ke2.getDefaults(), arguments, [
            "frequency"
        ]);
        this.frequency = new Se2({
            context: this.context,
            units: t.units,
            value: t.frequency
        }), u1(this, "frequency"), this._state.setStateAtTime("stopped", 0), this.setTicksAtTime(0, 0);
    }
    static getDefaults() {
        return Object.assign({
            frequency: 1,
            units: "hertz"
        }, O2.getDefaults());
    }
    get state() {
        return this.getStateAtTime(this.now());
    }
    start(t, e) {
        let s = this.toSeconds(t);
        return this._state.getValueAtTime(s) !== "started" && (this._state.setStateAtTime("started", s), g4(e) && this.setTicksAtTime(e, s), this._ticksAtTime.cancel(s), this._secondsAtTime.cancel(s)), this;
    }
    stop(t) {
        let e = this.toSeconds(t);
        if (this._state.getValueAtTime(e) === "stopped") {
            let s = this._state.get(e);
            s && s.time > 0 && (this._tickOffset.cancel(s.time), this._state.cancel(s.time));
        }
        return this._state.cancel(e), this._state.setStateAtTime("stopped", e), this.setTicksAtTime(0, e), this._ticksAtTime.cancel(e), this._secondsAtTime.cancel(e), this;
    }
    pause(t) {
        let e = this.toSeconds(t);
        return this._state.getValueAtTime(e) === "started" && (this._state.setStateAtTime("paused", e), this._ticksAtTime.cancel(e), this._secondsAtTime.cancel(e)), this;
    }
    cancel(t) {
        return t = this.toSeconds(t), this._state.cancel(t), this._tickOffset.cancel(t), this._ticksAtTime.cancel(t), this._secondsAtTime.cancel(t), this;
    }
    getTicksAtTime(t) {
        let e = this.toSeconds(t), s = this._state.getLastState("stopped", e), i1 = this._ticksAtTime.get(e), r = {
            state: "paused",
            time: e
        };
        this._state.add(r);
        let a = i1 || s, c = i1 ? i1.ticks : 0, p1 = null;
        return this._state.forEachBetween(a.time, e + this.sampleTime, (x1)=>{
            let y = a.time, D1 = this._tickOffset.get(x1.time);
            D1 && D1.time >= a.time && (c = D1.ticks, y = D1.time), a.state === "started" && x1.state !== "started" && (c += this.frequency.getTicksAtTime(x1.time) - this.frequency.getTicksAtTime(y), x1.time != r.time && (p1 = {
                state: x1.state,
                time: x1.time,
                ticks: c
            })), a = x1;
        }), this._state.remove(r), p1 && this._ticksAtTime.add(p1), c;
    }
    get ticks() {
        return this.getTicksAtTime(this.now());
    }
    set ticks(t) {
        this.setTicksAtTime(t, this.now());
    }
    get seconds() {
        return this.getSecondsAtTime(this.now());
    }
    set seconds(t) {
        let e = this.now(), s = this.frequency.timeToTicks(t, e);
        this.setTicksAtTime(s, e);
    }
    getSecondsAtTime(t) {
        t = this.toSeconds(t);
        let e = this._state.getLastState("stopped", t), s = {
            state: "paused",
            time: t
        };
        this._state.add(s);
        let i1 = this._secondsAtTime.get(t), r = i1 || e, a = i1 ? i1.seconds : 0, c = null;
        return this._state.forEachBetween(r.time, t + this.sampleTime, (p1)=>{
            let x1 = r.time, y = this._tickOffset.get(p1.time);
            y && y.time >= r.time && (a = y.seconds, x1 = y.time), r.state === "started" && p1.state !== "started" && (a += p1.time - x1, p1.time != s.time && (c = {
                state: p1.state,
                time: p1.time,
                seconds: a
            })), r = p1;
        }), this._state.remove(s), c && this._secondsAtTime.add(c), a;
    }
    setTicksAtTime(t, e) {
        return e = this.toSeconds(e), this._tickOffset.cancel(e), this._tickOffset.add({
            seconds: this.frequency.getDurationOfTicks(t, e),
            ticks: t,
            time: e
        }), this._ticksAtTime.cancel(e), this._secondsAtTime.cancel(e), this;
    }
    getStateAtTime(t) {
        return t = this.toSeconds(t), this._state.getValueAtTime(t);
    }
    getTimeOfTick(t, e = this.now()) {
        let s = this._tickOffset.get(e), i1 = this._state.get(e), r = Math.max(s.time, i1.time), a = this.frequency.getTicksAtTime(r) + t - s.ticks;
        return this.frequency.getTimeOfTick(a);
    }
    forEachTickBetween(t, e, s) {
        let i1 = this._state.get(t);
        this._state.forEachBetween(t, e, (a)=>{
            i1 && i1.state === "started" && a.state !== "started" && this.forEachTickBetween(Math.max(i1.time, t), a.time - this.sampleTime, s), i1 = a;
        });
        let r = null;
        if (i1 && i1.state === "started") {
            let a = Math.max(i1.time, t), c = this.frequency.getTicksAtTime(a), p1 = this.frequency.getTicksAtTime(i1.time), x1 = c - p1, y = Math.ceil(x1) - x1;
            y = it2(y, 1) ? 0 : y;
            let D1 = this.frequency.getTimeOfTick(c + y);
            for(; D1 < e;){
                try {
                    s(D1, Math.round(this.getTicksAtTime(D1)));
                } catch (et) {
                    r = et;
                    break;
                }
                D1 += this.frequency.getDurationOfTicks(1, D1);
            }
        }
        if (r) throw r;
        return this;
    }
    dispose() {
        return super.dispose(), this._state.dispose(), this._tickOffset.dispose(), this._ticksAtTime.dispose(), this._secondsAtTime.dispose(), this.frequency.dispose(), this;
    }
};
var Ft2 = class extends O2 {
    constructor(){
        super(o2(Ft2.getDefaults(), arguments, [
            "callback",
            "frequency"
        ])), this.name = "Clock", this.callback = _2, this._lastUpdate = 0, this._state = new xt2("stopped"), this._boundLoop = this._loop.bind(this);
        let t = o2(Ft2.getDefaults(), arguments, [
            "callback",
            "frequency"
        ]);
        this.callback = t.callback, this._tickSource = new ke2({
            context: this.context,
            frequency: t.frequency,
            units: t.units
        }), this._lastUpdate = 0, this.frequency = this._tickSource.frequency, u1(this, "frequency"), this._state.setStateAtTime("stopped", 0), this.context.on("tick", this._boundLoop);
    }
    static getDefaults() {
        return Object.assign(O2.getDefaults(), {
            callback: _2,
            frequency: 1,
            units: "hertz"
        });
    }
    get state() {
        return this._state.getValueAtTime(this.now());
    }
    start(t, e) {
        Xe1(this.context);
        let s = this.toSeconds(t);
        return this.log("start", s), this._state.getValueAtTime(s) !== "started" && (this._state.setStateAtTime("started", s), this._tickSource.start(s, e), s < this._lastUpdate && this.emit("start", s, e)), this;
    }
    stop(t) {
        let e = this.toSeconds(t);
        return this.log("stop", e), this._state.cancel(e), this._state.setStateAtTime("stopped", e), this._tickSource.stop(e), e < this._lastUpdate && this.emit("stop", e), this;
    }
    pause(t) {
        let e = this.toSeconds(t);
        return this._state.getValueAtTime(e) === "started" && (this._state.setStateAtTime("paused", e), this._tickSource.pause(e), e < this._lastUpdate && this.emit("pause", e)), this;
    }
    get ticks() {
        return Math.ceil(this.getTicksAtTime(this.now()));
    }
    set ticks(t) {
        this._tickSource.ticks = t;
    }
    get seconds() {
        return this._tickSource.seconds;
    }
    set seconds(t) {
        this._tickSource.seconds = t;
    }
    getSecondsAtTime(t) {
        return this._tickSource.getSecondsAtTime(t);
    }
    setTicksAtTime(t, e) {
        return this._tickSource.setTicksAtTime(t, e), this;
    }
    getTimeOfTick(t, e = this.now()) {
        return this._tickSource.getTimeOfTick(t, e);
    }
    getTicksAtTime(t) {
        return this._tickSource.getTicksAtTime(t);
    }
    nextTickTime(t, e) {
        let s = this.toSeconds(e), i1 = this.getTicksAtTime(s);
        return this._tickSource.getTimeOfTick(i1 + t, s);
    }
    _loop() {
        let t = this._lastUpdate, e = this.now();
        this._lastUpdate = e, this.log("loop", t, e), t !== e && (this._state.forEachBetween(t, e, (s)=>{
            switch(s.state){
                case "started":
                    let i1 = this._tickSource.getTicksAtTime(s.time);
                    this.emit("start", s.time, i1);
                    break;
                case "stopped":
                    s.time !== 0 && this.emit("stop", s.time);
                    break;
                case "paused":
                    this.emit("pause", s.time);
                    break;
            }
        }), this._tickSource.forEachTickBetween(t, e, (s, i1)=>{
            this.callback(s, i1);
        }));
    }
    getStateAtTime(t) {
        let e = this.toSeconds(t);
        return this._state.getValueAtTime(e);
    }
    dispose() {
        return super.dispose(), this.context.off("tick", this._boundLoop), this._tickSource.dispose(), this._state.dispose(), this;
    }
};
Ot2.mixin(Ft2);
var B2 = class extends h1 {
    constructor(){
        super(o2(B2.getDefaults(), arguments, [
            "delayTime",
            "maxDelay"
        ])), this.name = "Delay";
        let t = o2(B2.getDefaults(), arguments, [
            "delayTime",
            "maxDelay"
        ]), e = this.toSeconds(t.maxDelay);
        this._maxDelay = Math.max(e, this.toSeconds(t.delayTime)), this._delayNode = this.input = this.output = this.context.createDelay(e), this.delayTime = new d2({
            context: this.context,
            param: this._delayNode.delayTime,
            units: "time",
            value: t.delayTime,
            minValue: 0,
            maxValue: this.maxDelay
        }), u1(this, "delayTime");
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            delayTime: 0,
            maxDelay: 1
        });
    }
    get maxDelay() {
        return this._maxDelay;
    }
    dispose() {
        return super.dispose(), this._delayNode.disconnect(), this.delayTime.dispose(), this;
    }
};
var Et2 = class extends H2 {
    constructor(){
        super(), this.name = "ToneAudioBuffers", this._buffers = new Map, this._loadingCount = 0;
        let t = o2(Et2.getDefaults(), arguments, [
            "urls",
            "onload",
            "baseUrl"
        ], "urls");
        this.baseUrl = t.baseUrl, Object.keys(t.urls).forEach((e)=>{
            this._loadingCount++;
            let s = t.urls[e];
            this.add(e, s, this._bufferLoaded.bind(this, t.onload), t.onerror);
        });
    }
    static getDefaults() {
        return {
            baseUrl: "",
            onerror: _2,
            onload: _2,
            urls: {}
        };
    }
    has(t) {
        return this._buffers.has(t.toString());
    }
    get(t) {
        return m3(this.has(t), `ToneAudioBuffers has no buffer named: ${t}`), this._buffers.get(t.toString());
    }
    _bufferLoaded(t) {
        this._loadingCount--, this._loadingCount === 0 && t && t();
    }
    get loaded() {
        return Array.from(this._buffers).every(([t, e])=>e.loaded);
    }
    add(t, e, s = _2, i1 = _2) {
        return Z1(e) ? (this.baseUrl && e.trim().substring(0, 11).toLowerCase() === "data:audio/" && (this.baseUrl = ""), this._buffers.set(t.toString(), new v4(this.baseUrl + e, s, i1))) : this._buffers.set(t.toString(), new v4(e, s, i1)), this;
    }
    dispose() {
        return super.dispose(), this._buffers.forEach((t)=>t.dispose()), this._buffers.clear(), this;
    }
};
var re1 = class extends z2 {
    constructor(){
        super(...arguments), this.name = "MidiClass", this.defaultUnits = "midi";
    }
    _frequencyToUnits(t) {
        return wt2(super._frequencyToUnits(t));
    }
    _ticksToUnits(t) {
        return wt2(super._ticksToUnits(t));
    }
    _beatsToUnits(t) {
        return wt2(super._beatsToUnits(t));
    }
    _secondsToUnits(t) {
        return wt2(super._secondsToUnits(t));
    }
    toMidi() {
        return this.valueOf();
    }
    toFrequency() {
        return Je1(this.toMidi());
    }
    transpose(t) {
        return new re1(this.context, this.toMidi() + t);
    }
};
var A2 = class extends E5 {
    constructor(){
        super(...arguments), this.name = "Ticks", this.defaultUnits = "i";
    }
    _now() {
        return this.context.transport.ticks;
    }
    _beatsToUnits(t) {
        return this._getPPQ() * t;
    }
    _secondsToUnits(t) {
        return Math.floor(t / (60 / this._getBpm()) * this._getPPQ());
    }
    _ticksToUnits(t) {
        return t;
    }
    toTicks() {
        return this.valueOf();
    }
    toSeconds() {
        return this.valueOf() / this._getPPQ() * (60 / this._getBpm());
    }
};
var ui1 = class extends O2 {
    constructor(){
        super(...arguments), this.name = "Draw", this.expiration = .25, this.anticipation = .008, this._events = new L2, this._boundDrawLoop = this._drawLoop.bind(this), this._animationFrame = -1;
    }
    schedule(t, e) {
        return this._events.add({
            callback: t,
            time: this.toSeconds(e)
        }), this._events.length === 1 && (this._animationFrame = requestAnimationFrame(this._boundDrawLoop)), this;
    }
    cancel(t) {
        return this._events.cancel(this.toSeconds(t)), this;
    }
    _drawLoop() {
        let t = this.context.currentTime;
        for(; this._events.length && this._events.peek().time - this.anticipation <= t;){
            let e = this._events.shift();
            e && t - e.time <= this.expiration && e.callback();
        }
        this._events.length > 0 && (this._animationFrame = requestAnimationFrame(this._boundDrawLoop));
    }
    dispose() {
        return super.dispose(), this._events.dispose(), cancelAnimationFrame(this._animationFrame), this;
    }
};
ie3((n)=>{
    n.draw = new ui1({
        context: n
    });
});
oe3((n)=>{
    n.draw.dispose();
});
var Qs1 = class extends H2 {
    constructor(){
        super(...arguments), this.name = "IntervalTimeline", this._root = null, this._length = 0;
    }
    add(t) {
        m3(g4(t.time), "Events must have a time property"), m3(g4(t.duration), "Events must have a duration parameter"), t.time = t.time.valueOf();
        let e = new li1(t.time, t.time + t.duration, t);
        for(this._root === null ? this._root = e : this._root.insert(e), this._length++; e !== null;)e.updateHeight(), e.updateMax(), this._rebalance(e), e = e.parent;
        return this;
    }
    remove(t) {
        if (this._root !== null) {
            let e = [];
            this._root.search(t.time, e);
            for (let s of e)if (s.event === t) {
                this._removeNode(s), this._length--;
                break;
            }
        }
        return this;
    }
    get length() {
        return this._length;
    }
    cancel(t) {
        return this.forEachFrom(t, (e)=>this.remove(e)), this;
    }
    _setRoot(t) {
        this._root = t, this._root !== null && (this._root.parent = null);
    }
    _replaceNodeInParent(t, e) {
        t.parent !== null ? (t.isLeftChild() ? t.parent.left = e : t.parent.right = e, this._rebalance(t.parent)) : this._setRoot(e);
    }
    _removeNode(t) {
        if (t.left === null && t.right === null) this._replaceNodeInParent(t, null);
        else if (t.right === null) this._replaceNodeInParent(t, t.left);
        else if (t.left === null) this._replaceNodeInParent(t, t.right);
        else {
            let e = t.getBalance(), s, i1 = null;
            if (e > 0) if (t.left.right === null) s = t.left, s.right = t.right, i1 = s;
            else {
                for(s = t.left.right; s.right !== null;)s = s.right;
                s.parent && (s.parent.right = s.left, i1 = s.parent, s.left = t.left, s.right = t.right);
            }
            else if (t.right.left === null) s = t.right, s.left = t.left, i1 = s;
            else {
                for(s = t.right.left; s.left !== null;)s = s.left;
                s.parent && (s.parent.left = s.right, i1 = s.parent, s.left = t.left, s.right = t.right);
            }
            t.parent !== null ? t.isLeftChild() ? t.parent.left = s : t.parent.right = s : this._setRoot(s), i1 && this._rebalance(i1);
        }
        t.dispose();
    }
    _rotateLeft(t) {
        let e = t.parent, s = t.isLeftChild(), i1 = t.right;
        i1 && (t.right = i1.left, i1.left = t), e !== null ? s ? e.left = i1 : e.right = i1 : this._setRoot(i1);
    }
    _rotateRight(t) {
        let e = t.parent, s = t.isLeftChild(), i1 = t.left;
        i1 && (t.left = i1.right, i1.right = t), e !== null ? s ? e.left = i1 : e.right = i1 : this._setRoot(i1);
    }
    _rebalance(t) {
        let e = t.getBalance();
        e > 1 && t.left ? t.left.getBalance() < 0 ? this._rotateLeft(t.left) : this._rotateRight(t) : e < -1 && t.right && (t.right.getBalance() > 0 ? this._rotateRight(t.right) : this._rotateLeft(t));
    }
    get(t) {
        if (this._root !== null) {
            let e = [];
            if (this._root.search(t, e), e.length > 0) {
                let s = e[0];
                for(let i1 = 1; i1 < e.length; i1++)e[i1].low > s.low && (s = e[i1]);
                return s.event;
            }
        }
        return null;
    }
    forEach(t) {
        if (this._root !== null) {
            let e = [];
            this._root.traverse((s)=>e.push(s)), e.forEach((s)=>{
                s.event && t(s.event);
            });
        }
        return this;
    }
    forEachAtTime(t, e) {
        if (this._root !== null) {
            let s = [];
            this._root.search(t, s), s.forEach((i1)=>{
                i1.event && e(i1.event);
            });
        }
        return this;
    }
    forEachFrom(t, e) {
        if (this._root !== null) {
            let s = [];
            this._root.searchAfter(t, s), s.forEach((i1)=>{
                i1.event && e(i1.event);
            });
        }
        return this;
    }
    dispose() {
        return super.dispose(), this._root !== null && this._root.traverse((t)=>t.dispose()), this._root = null, this;
    }
}, li1 = class {
    constructor(t, e, s){
        this._left = null, this._right = null, this.parent = null, this.height = 0, this.event = s, this.low = t, this.high = e, this.max = this.high;
    }
    insert(t) {
        t.low <= this.low ? this.left === null ? this.left = t : this.left.insert(t) : this.right === null ? this.right = t : this.right.insert(t);
    }
    search(t, e) {
        t > this.max || (this.left !== null && this.left.search(t, e), this.low <= t && this.high > t && e.push(this), !(this.low > t) && this.right !== null && this.right.search(t, e));
    }
    searchAfter(t, e) {
        this.low >= t && (e.push(this), this.left !== null && this.left.searchAfter(t, e)), this.right !== null && this.right.searchAfter(t, e);
    }
    traverse(t) {
        t(this), this.left !== null && this.left.traverse(t), this.right !== null && this.right.traverse(t);
    }
    updateHeight() {
        this.left !== null && this.right !== null ? this.height = Math.max(this.left.height, this.right.height) + 1 : this.right !== null ? this.height = this.right.height + 1 : this.left !== null ? this.height = this.left.height + 1 : this.height = 0;
    }
    updateMax() {
        this.max = this.high, this.left !== null && (this.max = Math.max(this.max, this.left.max)), this.right !== null && (this.max = Math.max(this.max, this.right.max));
    }
    getBalance() {
        let t = 0;
        return this.left !== null && this.right !== null ? t = this.left.height - this.right.height : this.left !== null ? t = this.left.height + 1 : this.right !== null && (t = -(this.right.height + 1)), t;
    }
    isLeftChild() {
        return this.parent !== null && this.parent.left === this;
    }
    get left() {
        return this._left;
    }
    set left(t) {
        this._left = t, t !== null && (t.parent = this), this.updateHeight(), this.updateMax();
    }
    get right() {
        return this._right;
    }
    set right(t) {
        this._right = t, t !== null && (t.parent = this), this.updateHeight(), this.updateMax();
    }
    dispose() {
        this.parent = null, this._left = null, this._right = null, this.event = null;
    }
};
var K4 = class extends h1 {
    constructor(){
        super(o2(K4.getDefaults(), arguments, [
            "volume"
        ])), this.name = "Volume";
        let t = o2(K4.getDefaults(), arguments, [
            "volume"
        ]);
        this.input = this.output = new l1({
            context: this.context,
            gain: t.volume,
            units: "decibels"
        }), this.volume = this.output.gain, u1(this, "volume"), this._unmutedVolume = t.volume, this.mute = t.mute;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            mute: !1,
            volume: 0
        });
    }
    get mute() {
        return this.volume.value === -1 / 0;
    }
    set mute(t) {
        !this.mute && t ? (this._unmutedVolume = this.volume.value, this.volume.value = -1 / 0) : this.mute && !t && (this.volume.value = this._unmutedVolume);
    }
    dispose() {
        return super.dispose(), this.input.dispose(), this.volume.dispose(), this;
    }
};
var Ne2 = class extends h1 {
    constructor(){
        super(o2(Ne2.getDefaults(), arguments)), this.name = "Destination", this.input = new K4({
            context: this.context
        }), this.output = new l1({
            context: this.context
        }), this.volume = this.input.volume;
        let t = o2(Ne2.getDefaults(), arguments);
        U1(this.input, this.output, this.context.rawContext.destination), this.mute = t.mute, this._internalChannels = [
            this.input,
            this.context.rawContext.destination,
            this.output
        ];
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            mute: !1,
            volume: 0
        });
    }
    get mute() {
        return this.input.mute;
    }
    set mute(t) {
        this.input.mute = t;
    }
    chain(...t) {
        return this.input.disconnect(), t.unshift(this.input), t.push(this.output), U1(...t), this;
    }
    get maxChannelCount() {
        return this.context.rawContext.destination.maxChannelCount;
    }
    dispose() {
        return super.dispose(), this.volume.dispose(), this;
    }
};
ie3((n)=>{
    n.destination = new Ne2({
        context: n
    });
});
oe3((n)=>{
    n.destination.dispose();
});
var $s1 = class extends H2 {
    constructor(t){
        super(), this.name = "TimelineValue", this._timeline = new L2({
            memory: 10
        }), this._initialValue = t;
    }
    set(t, e) {
        return this._timeline.add({
            value: t,
            time: e
        }), this;
    }
    get(t) {
        let e = this._timeline.get(t);
        return e ? e.value : this._initialValue;
    }
};
var M4 = class extends h1 {
    constructor(){
        super(Object.assign(o2(M4.getDefaults(), arguments, [
            "context"
        ])));
    }
    connect(t, e = 0, s = 0) {
        return Te2(this, t, e, s), this;
    }
};
var G1 = class extends M4 {
    constructor(){
        super(Object.assign(o2(G1.getDefaults(), arguments, [
            "mapping",
            "length"
        ]))), this.name = "WaveShaper", this._shaper = this.context.createWaveShaper(), this.input = this._shaper, this.output = this._shaper;
        let t = o2(G1.getDefaults(), arguments, [
            "mapping",
            "length"
        ]);
        F2(t.mapping) || t.mapping instanceof Float32Array ? this.curve = Float32Array.from(t.mapping) : xi1(t.mapping) && this.setMap(t.mapping, t.length);
    }
    static getDefaults() {
        return Object.assign(f.getDefaults(), {
            length: 1024
        });
    }
    setMap(t, e = 1024) {
        let s = new Float32Array(e);
        for(let i1 = 0, r = e; i1 < r; i1++){
            let a = i1 / (r - 1) * 2 - 1;
            s[i1] = t(a, i1);
        }
        return this.curve = s, this;
    }
    get curve() {
        return this._shaper.curve;
    }
    set curve(t) {
        this._shaper.curve = t;
    }
    get oversample() {
        return this._shaper.oversample;
    }
    set oversample(t) {
        let e = [
            "none",
            "2x",
            "4x"
        ].some((s)=>s.includes(t));
        m3(e, "oversampling must be either 'none', '2x', or '4x'"), this._shaper.oversample = t;
    }
    dispose() {
        return super.dispose(), this._shaper.disconnect(), this;
    }
};
var kt1 = class extends M4 {
    constructor(){
        super(Object.assign(o2(kt1.getDefaults(), arguments, [
            "value"
        ]))), this.name = "Pow";
        let t = o2(kt1.getDefaults(), arguments, [
            "value"
        ]);
        this._exponentScaler = this.input = this.output = new G1({
            context: this.context,
            mapping: this._expFunc(t.value),
            length: 8192
        }), this._exponent = t.value;
    }
    static getDefaults() {
        return Object.assign(M4.getDefaults(), {
            value: 1
        });
    }
    _expFunc(t) {
        return (e)=>Math.pow(Math.abs(e), t);
    }
    get value() {
        return this._exponent;
    }
    set value(t) {
        this._exponent = t, this._exponentScaler.setMap(this._expFunc(this._exponent));
    }
    dispose() {
        return super.dispose(), this._exponentScaler.dispose(), this;
    }
};
var yt2 = class {
    constructor(t, e){
        this.id = yt2._eventId++, this._remainderTime = 0;
        let s = Object.assign(yt2.getDefaults(), e);
        this.transport = t, this.callback = s.callback, this._once = s.once, this.time = Math.floor(s.time), this._remainderTime = s.time - this.time;
    }
    static getDefaults() {
        return {
            callback: _2,
            once: !1,
            time: 0
        };
    }
    get floatTime() {
        return this.time + this._remainderTime;
    }
    invoke(t) {
        if (this.callback) {
            let e = this.transport.bpm.getDurationOfTicks(1, t);
            this.callback(t + this._remainderTime * e), this._once && this.transport.clear(this.id);
        }
    }
    dispose() {
        return this.callback = void 0, this;
    }
};
yt2._eventId = 0;
var Pe1 = class extends yt2 {
    constructor(t, e){
        super(t, e), this._currentId = -1, this._nextId = -1, this._nextTick = this.time, this._boundRestart = this._restart.bind(this);
        let s = Object.assign(Pe1.getDefaults(), e);
        this.duration = s.duration, this._interval = s.interval, this._nextTick = s.time, this.transport.on("start", this._boundRestart), this.transport.on("loopStart", this._boundRestart), this.transport.on("ticks", this._boundRestart), this.context = this.transport.context, this._restart();
    }
    static getDefaults() {
        return Object.assign({}, yt2.getDefaults(), {
            duration: 1 / 0,
            interval: 1,
            once: !1
        });
    }
    invoke(t) {
        this._createEvents(t), super.invoke(t);
    }
    _createEvent() {
        return ve2(this._nextTick, this.floatTime + this.duration) ? this.transport.scheduleOnce(this.invoke.bind(this), new A2(this.context, this._nextTick).toSeconds()) : -1;
    }
    _createEvents(t) {
        ve2(this._nextTick + this._interval, this.floatTime + this.duration) && (this._nextTick += this._interval, this._currentId = this._nextId, this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new A2(this.context, this._nextTick).toSeconds()));
    }
    _restart(t) {
        this.transport.clear(this._currentId), this.transport.clear(this._nextId), this._nextTick = this.floatTime;
        let e = this.transport.getTicksAtTime(t);
        Pt2(e, this.time) && (this._nextTick = this.floatTime + Math.ceil((e - this.floatTime) / this._interval) * this._interval), this._currentId = this._createEvent(), this._nextTick += this._interval, this._nextId = this._createEvent();
    }
    dispose() {
        return super.dispose(), this.transport.clear(this._currentId), this.transport.clear(this._nextId), this.transport.off("start", this._boundRestart), this.transport.off("loopStart", this._boundRestart), this.transport.off("ticks", this._boundRestart), this;
    }
};
var Ae2 = class extends O2 {
    constructor(){
        super(o2(Ae2.getDefaults(), arguments)), this.name = "Transport", this._loop = new $s1(!1), this._loopStart = 0, this._loopEnd = 0, this._scheduledEvents = {}, this._timeline = new L2, this._repeatedEvents = new Qs1, this._syncedSignals = [], this._swingAmount = 0;
        let t = o2(Ae2.getDefaults(), arguments);
        this._ppq = t.ppq, this._clock = new Ft2({
            callback: this._processTick.bind(this),
            context: this.context,
            frequency: 0,
            units: "bpm"
        }), this._bindClockEvents(), this.bpm = this._clock.frequency, this._clock.frequency.multiplier = t.ppq, this.bpm.setValueAtTime(t.bpm, 0), u1(this, "bpm"), this._timeSignature = t.timeSignature, this._swingTicks = t.ppq / 2;
    }
    static getDefaults() {
        return Object.assign(O2.getDefaults(), {
            bpm: 120,
            loopEnd: "4m",
            loopStart: 0,
            ppq: 192,
            swing: 0,
            swingSubdivision: "8n",
            timeSignature: 4
        });
    }
    _processTick(t, e) {
        if (this._loop.get(t) && e >= this._loopEnd && (this.emit("loopEnd", t), this._clock.setTicksAtTime(this._loopStart, t), e = this._loopStart, this.emit("loopStart", t, this._clock.getSecondsAtTime(t)), this.emit("loop", t)), this._swingAmount > 0 && e % this._ppq !== 0 && e % (this._swingTicks * 2) !== 0) {
            let s = e % (this._swingTicks * 2) / (this._swingTicks * 2), i1 = Math.sin(s * Math.PI) * this._swingAmount;
            t += new A2(this.context, this._swingTicks * 2 / 3).toSeconds() * i1;
        }
        zs1(!0), this._timeline.forEachAtTime(e, (s)=>s.invoke(t)), zs1(!1);
    }
    schedule(t, e) {
        let s = new yt2(this, {
            callback: t,
            time: new E5(this.context, e).toTicks()
        });
        return this._addEvent(s, this._timeline);
    }
    scheduleRepeat(t, e, s, i1 = 1 / 0) {
        let r = new Pe1(this, {
            callback: t,
            duration: new Y1(this.context, i1).toTicks(),
            interval: new Y1(this.context, e).toTicks(),
            time: new E5(this.context, s).toTicks()
        });
        return this._addEvent(r, this._repeatedEvents);
    }
    scheduleOnce(t, e) {
        let s = new yt2(this, {
            callback: t,
            once: !0,
            time: new E5(this.context, e).toTicks()
        });
        return this._addEvent(s, this._timeline);
    }
    clear(t) {
        if (this._scheduledEvents.hasOwnProperty(t)) {
            let e = this._scheduledEvents[t.toString()];
            e.timeline.remove(e.event), e.event.dispose(), delete this._scheduledEvents[t.toString()];
        }
        return this;
    }
    _addEvent(t, e) {
        return this._scheduledEvents[t.id.toString()] = {
            event: t,
            timeline: e
        }, e.add(t), t.id;
    }
    cancel(t = 0) {
        let e = this.toTicks(t);
        return this._timeline.forEachFrom(e, (s)=>this.clear(s.id)), this._repeatedEvents.forEachFrom(e, (s)=>this.clear(s.id)), this;
    }
    _bindClockEvents() {
        this._clock.on("start", (t, e)=>{
            e = new A2(this.context, e).toSeconds(), this.emit("start", t, e);
        }), this._clock.on("stop", (t)=>{
            this.emit("stop", t);
        }), this._clock.on("pause", (t)=>{
            this.emit("pause", t);
        });
    }
    get state() {
        return this._clock.getStateAtTime(this.now());
    }
    start(t, e) {
        this.context.resume();
        let s;
        return g4(e) && (s = this.toTicks(e)), this._clock.start(t, s), this;
    }
    stop(t) {
        return this._clock.stop(t), this;
    }
    pause(t) {
        return this._clock.pause(t), this;
    }
    toggle(t) {
        return t = this.toSeconds(t), this._clock.getStateAtTime(t) !== "started" ? this.start(t) : this.stop(t), this;
    }
    get timeSignature() {
        return this._timeSignature;
    }
    set timeSignature(t) {
        F2(t) && (t = t[0] / t[1] * 4), this._timeSignature = t;
    }
    get loopStart() {
        return new Y1(this.context, this._loopStart, "i").toSeconds();
    }
    set loopStart(t) {
        this._loopStart = this.toTicks(t);
    }
    get loopEnd() {
        return new Y1(this.context, this._loopEnd, "i").toSeconds();
    }
    set loopEnd(t) {
        this._loopEnd = this.toTicks(t);
    }
    get loop() {
        return this._loop.get(this.now());
    }
    set loop(t) {
        this._loop.set(t, this.now());
    }
    setLoopPoints(t, e) {
        return this.loopStart = t, this.loopEnd = e, this;
    }
    get swing() {
        return this._swingAmount;
    }
    set swing(t) {
        this._swingAmount = t;
    }
    get swingSubdivision() {
        return new A2(this.context, this._swingTicks).toNotation();
    }
    set swingSubdivision(t) {
        this._swingTicks = this.toTicks(t);
    }
    get position() {
        let t = this.now(), e = this._clock.getTicksAtTime(t);
        return new A2(this.context, e).toBarsBeatsSixteenths();
    }
    set position(t) {
        let e = this.toTicks(t);
        this.ticks = e;
    }
    get seconds() {
        return this._clock.seconds;
    }
    set seconds(t) {
        let e = this.now(), s = this._clock.frequency.timeToTicks(t, e);
        this.ticks = s;
    }
    get progress() {
        if (this.loop) {
            let t = this.now();
            return (this._clock.getTicksAtTime(t) - this._loopStart) / (this._loopEnd - this._loopStart);
        } else return 0;
    }
    get ticks() {
        return this._clock.ticks;
    }
    set ticks(t) {
        if (this._clock.ticks !== t) {
            let e = this.now();
            if (this.state === "started") {
                let s = this._clock.getTicksAtTime(e), i1 = this._clock.frequency.getDurationOfTicks(Math.ceil(s) - s, e), r = e + i1;
                this.emit("stop", r), this._clock.setTicksAtTime(t, r), this.emit("start", r, this._clock.getSecondsAtTime(r));
            } else this.emit("ticks", e), this._clock.setTicksAtTime(t, e);
        }
    }
    getTicksAtTime(t) {
        return this._clock.getTicksAtTime(t);
    }
    getSecondsAtTime(t) {
        return this._clock.getSecondsAtTime(t);
    }
    get PPQ() {
        return this._clock.frequency.multiplier;
    }
    set PPQ(t) {
        this._clock.frequency.multiplier = t;
    }
    nextSubdivision(t) {
        if (t = this.toTicks(t), this.state !== "started") return 0;
        {
            let e = this.now(), s = this.getTicksAtTime(e), i1 = t - s % t;
            return this._clock.nextTickTime(i1, e);
        }
    }
    syncSignal(t, e) {
        let s = this.now(), i1 = this.bpm, r = 1 / (60 / i1.getValueAtTime(s) / this.PPQ), a = [];
        if (t.units === "time") {
            let p1 = .015625 / r, x1 = new l1(p1), y = new kt1(-1), D1 = new l1(p1);
            i1.chain(x1, y, D1), i1 = D1, r = 1 / r, a = [
                x1,
                y,
                D1
            ];
        }
        e || (t.getValueAtTime(s) !== 0 ? e = t.getValueAtTime(s) / r : e = 0);
        let c = new l1(e);
        return i1.connect(c), c.connect(t._param), a.push(c), this._syncedSignals.push({
            initial: t.value,
            nodes: a,
            signal: t
        }), t.value = 0, this;
    }
    unsyncSignal(t) {
        for(let e = this._syncedSignals.length - 1; e >= 0; e--){
            let s = this._syncedSignals[e];
            s.signal === t && (s.nodes.forEach((i1)=>i1.dispose()), s.signal.value = s.initial, this._syncedSignals.splice(e, 1));
        }
        return this;
    }
    dispose() {
        return super.dispose(), this._clock.dispose(), Gt2(this, "bpm"), this._timeline.dispose(), this._repeatedEvents.dispose(), this;
    }
};
Ot2.mixin(Ae2);
ie3((n)=>{
    n.transport = new Ae2({
        context: n
    });
});
oe3((n)=>{
    n.transport.dispose();
});
var T4 = class extends h1 {
    constructor(t){
        super(t), this.input = void 0, this._state = new xt2("stopped"), this._synced = !1, this._scheduled = [], this._syncedStart = _2, this._syncedStop = _2, this._state.memory = 100, this._state.increasing = !0, this._volume = this.output = new K4({
            context: this.context,
            mute: t.mute,
            volume: t.volume
        }), this.volume = this._volume.volume, u1(this, "volume"), this.onstop = t.onstop;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            mute: !1,
            onstop: _2,
            volume: 0
        });
    }
    get state() {
        return this._synced ? this.context.transport.state === "started" ? this._state.getValueAtTime(this.context.transport.seconds) : "stopped" : this._state.getValueAtTime(this.now());
    }
    get mute() {
        return this._volume.mute;
    }
    set mute(t) {
        this._volume.mute = t;
    }
    _clampToCurrentTime(t) {
        return this._synced ? t : Math.max(t, this.context.currentTime);
    }
    start(t, e, s) {
        let i1 = N1(t) && this._synced ? this.context.transport.seconds : this.toSeconds(t);
        if (i1 = this._clampToCurrentTime(i1), !this._synced && this._state.getValueAtTime(i1) === "started") m3(Pt2(i1, this._state.get(i1).time), "Start time must be strictly greater than previous start time"), this._state.cancel(i1), this._state.setStateAtTime("started", i1), this.log("restart", i1), this.restart(i1, e, s);
        else if (this.log("start", i1), this._state.setStateAtTime("started", i1), this._synced) {
            let r = this._state.get(i1);
            r && (r.offset = this.toSeconds(X2(e, 0)), r.duration = s ? this.toSeconds(s) : void 0);
            let a = this.context.transport.schedule((c)=>{
                this._start(c, e, s);
            }, i1);
            this._scheduled.push(a), this.context.transport.state === "started" && this.context.transport.getSecondsAtTime(this.immediate()) > i1 && this._syncedStart(this.now(), this.context.transport.seconds);
        } else Xe1(this.context), this._start(i1, e, s);
        return this;
    }
    stop(t) {
        let e = N1(t) && this._synced ? this.context.transport.seconds : this.toSeconds(t);
        if (e = this._clampToCurrentTime(e), this._state.getValueAtTime(e) === "started" || g4(this._state.getNextState("started", e))) {
            if (this.log("stop", e), !this._synced) this._stop(e);
            else {
                let s = this.context.transport.schedule(this._stop.bind(this), e);
                this._scheduled.push(s);
            }
            this._state.cancel(e), this._state.setStateAtTime("stopped", e);
        }
        return this;
    }
    restart(t, e, s) {
        return t = this.toSeconds(t), this._state.getValueAtTime(t) === "started" && (this._state.cancel(t), this._restart(t, e, s)), this;
    }
    sync() {
        return this._synced || (this._synced = !0, this._syncedStart = (t, e)=>{
            if (Pt2(e, 0)) {
                let s = this._state.get(e);
                if (s && s.state === "started" && s.time !== e) {
                    let i1 = e - this.toSeconds(s.time), r;
                    s.duration && (r = this.toSeconds(s.duration) - i1), this._start(t, this.toSeconds(s.offset) + i1, r);
                }
            }
        }, this._syncedStop = (t)=>{
            let e = this.context.transport.getSecondsAtTime(Math.max(t - this.sampleTime, 0));
            this._state.getValueAtTime(e) === "started" && this._stop(t);
        }, this.context.transport.on("start", this._syncedStart), this.context.transport.on("loopStart", this._syncedStart), this.context.transport.on("stop", this._syncedStop), this.context.transport.on("pause", this._syncedStop), this.context.transport.on("loopEnd", this._syncedStop)), this;
    }
    unsync() {
        return this._synced && (this.context.transport.off("stop", this._syncedStop), this.context.transport.off("pause", this._syncedStop), this.context.transport.off("loopEnd", this._syncedStop), this.context.transport.off("start", this._syncedStart), this.context.transport.off("loopStart", this._syncedStart)), this._synced = !1, this._scheduled.forEach((t)=>this.context.transport.clear(t)), this._scheduled = [], this._state.cancel(0), this._stop(0), this;
    }
    dispose() {
        return super.dispose(), this.onstop = _2, this.unsync(), this._volume.dispose(), this._state.dispose(), this;
    }
};
var ot2 = class extends St2 {
    constructor(){
        super(o2(ot2.getDefaults(), arguments, [
            "url",
            "onload"
        ])), this.name = "ToneBufferSource", this._source = this.context.createBufferSource(), this._internalChannels = [
            this._source
        ], this._sourceStarted = !1, this._sourceStopped = !1;
        let t = o2(ot2.getDefaults(), arguments, [
            "url",
            "onload"
        ]);
        P2(this._source, this._gainNode), this._source.onended = ()=>this._stopSource(), this.playbackRate = new d2({
            context: this.context,
            param: this._source.playbackRate,
            units: "positive",
            value: t.playbackRate
        }), this.loop = t.loop, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this._buffer = new v4(t.url, t.onload, t.onerror), this._internalChannels.push(this._source);
    }
    static getDefaults() {
        return Object.assign(St2.getDefaults(), {
            url: new v4,
            loop: !1,
            loopEnd: 0,
            loopStart: 0,
            onload: _2,
            onerror: _2,
            playbackRate: 1
        });
    }
    get fadeIn() {
        return this._fadeIn;
    }
    set fadeIn(t) {
        this._fadeIn = t;
    }
    get fadeOut() {
        return this._fadeOut;
    }
    set fadeOut(t) {
        this._fadeOut = t;
    }
    get curve() {
        return this._curve;
    }
    set curve(t) {
        this._curve = t;
    }
    start(t, e, s, i1 = 1) {
        m3(this.buffer.loaded, "buffer is either not set or not loaded");
        let r = this.toSeconds(t);
        this._startGain(r, i1), this.loop ? e = X2(e, this.loopStart) : e = X2(e, 0);
        let a = Math.max(this.toSeconds(e), 0);
        if (this.loop) {
            let c = this.toSeconds(this.loopEnd) || this.buffer.duration, p1 = this.toSeconds(this.loopStart), x1 = c - p1;
            Ye1(a, c) && (a = (a - p1) % x1 + p1), it2(a, this.buffer.duration) && (a = 0);
        }
        if (this._source.buffer = this.buffer.get(), this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration, ve2(a, this.buffer.duration) && (this._sourceStarted = !0, this._source.start(r, a)), g4(s)) {
            let c1 = this.toSeconds(s);
            c1 = Math.max(c1, 0), this.stop(r + c1);
        }
        return this;
    }
    _stopSource(t) {
        !this._sourceStopped && this._sourceStarted && (this._sourceStopped = !0, this._source.stop(this.toSeconds(t)), this._onended());
    }
    get loopStart() {
        return this._source.loopStart;
    }
    set loopStart(t) {
        this._source.loopStart = this.toSeconds(t);
    }
    get loopEnd() {
        return this._source.loopEnd;
    }
    set loopEnd(t) {
        this._source.loopEnd = this.toSeconds(t);
    }
    get buffer() {
        return this._buffer;
    }
    set buffer(t) {
        this._buffer.set(t);
    }
    get loop() {
        return this._source.loop;
    }
    set loop(t) {
        this._source.loop = t, this._sourceStarted && this.cancelStop();
    }
    dispose() {
        return super.dispose(), this._source.onended = null, this._source.disconnect(), this._buffer.dispose(), this.playbackRate.dispose(), this;
    }
};
var pt2 = class extends T4 {
    constructor(){
        super(o2(pt2.getDefaults(), arguments, [
            "type"
        ])), this.name = "Noise", this._source = null;
        let t = o2(pt2.getDefaults(), arguments, [
            "type"
        ]);
        this._playbackRate = t.playbackRate, this.type = t.type, this._fadeIn = t.fadeIn, this._fadeOut = t.fadeOut;
    }
    static getDefaults() {
        return Object.assign(T4.getDefaults(), {
            fadeIn: 0,
            fadeOut: 0,
            playbackRate: 1,
            type: "white"
        });
    }
    get type() {
        return this._type;
    }
    set type(t) {
        if (m3(t in Ni1, "Noise: invalid type: " + t), this._type !== t && (this._type = t, this.state === "started")) {
            let e = this.now();
            this._stop(e), this._start(e);
        }
    }
    get playbackRate() {
        return this._playbackRate;
    }
    set playbackRate(t) {
        this._playbackRate = t, this._source && (this._source.playbackRate.value = t);
    }
    _start(t) {
        let e = Ni1[this._type];
        this._source = new ot2({
            url: e,
            context: this.context,
            fadeIn: this._fadeIn,
            fadeOut: this._fadeOut,
            loop: !0,
            onended: ()=>this.onstop(this),
            playbackRate: this._playbackRate
        }).connect(this.output), this._source.start(this.toSeconds(t), Math.random() * (e.duration - .001));
    }
    _stop(t) {
        this._source && (this._source.stop(this.toSeconds(t)), this._source = null);
    }
    get fadeIn() {
        return this._fadeIn;
    }
    set fadeIn(t) {
        this._fadeIn = t, this._source && (this._source.fadeIn = this._fadeIn);
    }
    get fadeOut() {
        return this._fadeOut;
    }
    set fadeOut(t) {
        this._fadeOut = t, this._source && (this._source.fadeOut = this._fadeOut);
    }
    _restart(t) {
        this._stop(t), this._start(t);
    }
    dispose() {
        return super.dispose(), this._source && this._source.disconnect(), this;
    }
}, Le2 = 44100 * 5, pi1 = 2, Bt2 = {
    brown: null,
    pink: null,
    white: null
}, Ni1 = {
    get brown () {
        if (!Bt2.brown) {
            let n11 = [];
            for(let t12 = 0; t12 < pi1; t12++){
                let e2 = new Float32Array(Le2);
                n11[t12] = e2;
                let s2 = 0;
                for(let i1 = 0; i1 < Le2; i1++){
                    let r = Math.random() * 2 - 1;
                    e2[i1] = (s2 + .02 * r) / 1.02, s2 = e2[i1], e2[i1] *= 3.5;
                }
            }
            Bt2.brown = new v4().fromArray(n11);
        }
        return Bt2.brown;
    },
    get pink () {
        if (!Bt2.pink) {
            let n21 = [];
            for(let t21 = 0; t21 < pi1; t21++){
                let e11 = new Float32Array(Le2);
                n21[t21] = e11;
                let s11, i11, r11, a2, c2, p2, x3;
                s11 = i11 = r11 = a2 = c2 = p2 = x3 = 0;
                for(let y2 = 0; y2 < Le2; y2++){
                    let D3 = Math.random() * 2 - 1;
                    s11 = .99886 * s11 + D3 * .0555179, i11 = .99332 * i11 + D3 * .0750759, r11 = .969 * r11 + D3 * .153852, a2 = .8665 * a2 + D3 * .3104856, c2 = .55 * c2 + D3 * .5329522, p2 = -.7616 * p2 - D3 * .016898, e11[y2] = s11 + i11 + r11 + a2 + c2 + p2 + x3 + D3 * .5362, e11[y2] *= .11, x3 = D3 * .115926;
                }
            }
            Bt2.pink = new v4().fromArray(n21);
        }
        return Bt2.pink;
    },
    get white () {
        if (!Bt2.white) {
            let n3 = [];
            for(let t31 = 0; t31 < pi1; t31++){
                let e21 = new Float32Array(Le2);
                n3[t31] = e21;
                for(let s21 = 0; s21 < Le2; s21++)e21[s21] = Math.random() * 2 - 1;
            }
            Bt2.white = new v4().fromArray(n3);
        }
        return Bt2.white;
    }
};
var De2 = class extends h1 {
    constructor(){
        super(o2(De2.getDefaults(), arguments, [
            "volume"
        ])), this.name = "UserMedia";
        let t = o2(De2.getDefaults(), arguments, [
            "volume"
        ]);
        this._volume = this.output = new K4({
            context: this.context,
            volume: t.volume
        }), this.volume = this._volume.volume, u1(this, "volume"), this.mute = t.mute;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            mute: !1,
            volume: 0
        });
    }
    open(t) {
        return M3(this, void 0, void 0, function*() {
            m3(De2.supported, "UserMedia is not supported"), this.state === "started" && this.close();
            let e = yield De2.enumerateDevices();
            W1(t) ? this._device = e[t] : (this._device = e.find((r)=>r.label === t || r.deviceId === t), !this._device && e.length > 0 && (this._device = e[0]), m3(g4(this._device), `No matching device ${t}`));
            let s = {
                audio: {
                    echoCancellation: !1,
                    sampleRate: this.context.sampleRate,
                    noiseSuppression: !1,
                    mozNoiseSuppression: !1
                }
            };
            this._device && (s.audio.deviceId = this._device.deviceId);
            let i1 = yield navigator.mediaDevices.getUserMedia(s);
            if (!this._stream) {
                this._stream = i1;
                let r = this.context.createMediaStreamSource(i1);
                P2(r, this.output), this._mediaStream = r;
            }
            return this;
        });
    }
    close() {
        return this._stream && this._mediaStream && (this._stream.getAudioTracks().forEach((t)=>{
            t.stop();
        }), this._stream = void 0, this._mediaStream.disconnect(), this._mediaStream = void 0), this._device = void 0, this;
    }
    static enumerateDevices() {
        return M3(this, void 0, void 0, function*() {
            return (yield navigator.mediaDevices.enumerateDevices()).filter((e)=>e.kind === "audioinput");
        });
    }
    get state() {
        return this._stream && this._stream.active ? "started" : "stopped";
    }
    get deviceId() {
        if (this._device) return this._device.deviceId;
    }
    get groupId() {
        if (this._device) return this._device.groupId;
    }
    get label() {
        if (this._device) return this._device.label;
    }
    get mute() {
        return this._volume.mute;
    }
    set mute(t) {
        this._volume.mute = t;
    }
    dispose() {
        return super.dispose(), this.close(), this._volume.dispose(), this.volume.dispose(), this;
    }
    static get supported() {
        return g4(navigator.mediaDevices) && g4(navigator.mediaDevices.getUserMedia);
    }
};
function at2(n, t) {
    return M3(this, void 0, void 0, function*() {
        let e = t / n.context.sampleRate, s = new gt2(1, e, n.context.sampleRate);
        return new n.constructor(Object.assign(n.get(), {
            frequency: 2 / e,
            detune: 0,
            context: s
        })).toDestination().start(0), (yield s.render()).getChannelData(0);
    });
}
var Qt2 = class extends St2 {
    constructor(){
        super(o2(Qt2.getDefaults(), arguments, [
            "frequency",
            "type"
        ])), this.name = "ToneOscillatorNode", this._oscillator = this.context.createOscillator(), this._internalChannels = [
            this._oscillator
        ];
        let t = o2(Qt2.getDefaults(), arguments, [
            "frequency",
            "type"
        ]);
        P2(this._oscillator, this._gainNode), this.type = t.type, this.frequency = new d2({
            context: this.context,
            param: this._oscillator.frequency,
            units: "frequency",
            value: t.frequency
        }), this.detune = new d2({
            context: this.context,
            param: this._oscillator.detune,
            units: "cents",
            value: t.detune
        }), u1(this, [
            "frequency",
            "detune"
        ]);
    }
    static getDefaults() {
        return Object.assign(St2.getDefaults(), {
            detune: 0,
            frequency: 440,
            type: "sine"
        });
    }
    start(t) {
        let e = this.toSeconds(t);
        return this.log("start", e), this._startGain(e), this._oscillator.start(e), this;
    }
    _stopSource(t) {
        this._oscillator.stop(t);
    }
    setPeriodicWave(t) {
        return this._oscillator.setPeriodicWave(t), this;
    }
    get type() {
        return this._oscillator.type;
    }
    set type(t) {
        this._oscillator.type = t;
    }
    dispose() {
        return super.dispose(), this.state === "started" && this.stop(), this._oscillator.disconnect(), this.frequency.dispose(), this.detune.dispose(), this;
    }
};
var S3 = class extends T4 {
    constructor(){
        super(o2(S3.getDefaults(), arguments, [
            "frequency",
            "type"
        ])), this.name = "Oscillator", this._oscillator = null;
        let t = o2(S3.getDefaults(), arguments, [
            "frequency",
            "type"
        ]);
        this.frequency = new f({
            context: this.context,
            units: "frequency",
            value: t.frequency
        }), u1(this, "frequency"), this.detune = new f({
            context: this.context,
            units: "cents",
            value: t.detune
        }), u1(this, "detune"), this._partials = t.partials, this._partialCount = t.partialCount, this._type = t.type, t.partialCount && t.type !== "custom" && (this._type = this.baseType + t.partialCount.toString()), this.phase = t.phase;
    }
    static getDefaults() {
        return Object.assign(T4.getDefaults(), {
            detune: 0,
            frequency: 440,
            partialCount: 0,
            partials: [],
            phase: 0,
            type: "sine"
        });
    }
    _start(t) {
        let e = this.toSeconds(t), s = new Qt2({
            context: this.context,
            onended: ()=>this.onstop(this)
        });
        this._oscillator = s, this._wave ? this._oscillator.setPeriodicWave(this._wave) : this._oscillator.type = this._type, this._oscillator.connect(this.output), this.frequency.connect(this._oscillator.frequency), this.detune.connect(this._oscillator.detune), this._oscillator.start(e);
    }
    _stop(t) {
        let e = this.toSeconds(t);
        this._oscillator && this._oscillator.stop(e);
    }
    _restart(t) {
        let e = this.toSeconds(t);
        return this.log("restart", e), this._oscillator && this._oscillator.cancelStop(), this._state.cancel(e), this;
    }
    syncFrequency() {
        return this.context.transport.syncSignal(this.frequency), this;
    }
    unsyncFrequency() {
        return this.context.transport.unsyncSignal(this.frequency), this;
    }
    _getCachedPeriodicWave() {
        if (this._type === "custom") return S3._periodicWaveCache.find((e)=>e.phase === this._phase && Oi1(e.partials, this._partials));
        {
            let t = S3._periodicWaveCache.find((e)=>e.type === this._type && e.phase === this._phase);
            return this._partialCount = t ? t.partialCount : this._partialCount, t;
        }
    }
    get type() {
        return this._type;
    }
    set type(t) {
        this._type = t;
        let e = [
            "sine",
            "square",
            "sawtooth",
            "triangle"
        ].indexOf(t) !== -1;
        if (this._phase === 0 && e) this._wave = void 0, this._partialCount = 0, this._oscillator !== null && (this._oscillator.type = t);
        else {
            let s = this._getCachedPeriodicWave();
            if (g4(s)) {
                let { partials: i1 , wave: r  } = s;
                this._wave = r, this._partials = i1, this._oscillator !== null && this._oscillator.setPeriodicWave(this._wave);
            } else {
                let [i11, r1] = this._getRealImaginary(t, this._phase), a = this.context.createPeriodicWave(i11, r1);
                this._wave = a, this._oscillator !== null && this._oscillator.setPeriodicWave(this._wave), S3._periodicWaveCache.push({
                    imag: r1,
                    partialCount: this._partialCount,
                    partials: this._partials,
                    phase: this._phase,
                    real: i11,
                    type: this._type,
                    wave: this._wave
                }), S3._periodicWaveCache.length > 100 && S3._periodicWaveCache.shift();
            }
        }
    }
    get baseType() {
        return this._type.replace(this.partialCount.toString(), "");
    }
    set baseType(t) {
        this.partialCount && this._type !== "custom" && t !== "custom" ? this.type = t + this.partialCount : this.type = t;
    }
    get partialCount() {
        return this._partialCount;
    }
    set partialCount(t) {
        q2(t, 0);
        let e = this._type, s = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);
        if (s && (e = s[1]), this._type !== "custom") t === 0 ? this.type = e : this.type = e + t.toString();
        else {
            let i1 = new Float32Array(t);
            this._partials.forEach((r, a)=>i1[a] = r), this._partials = Array.from(i1), this.type = this._type;
        }
    }
    _getRealImaginary(t, e) {
        let i1 = 2048, r = new Float32Array(i1), a = new Float32Array(i1), c = 1;
        if (t === "custom") {
            if (c = this._partials.length + 1, this._partialCount = this._partials.length, i1 = c, this._partials.length === 0) return [
                r,
                a
            ];
        } else {
            let p1 = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);
            p1 ? (c = parseInt(p1[2], 10) + 1, this._partialCount = parseInt(p1[2], 10), t = p1[1], c = Math.max(c, 2), i1 = c) : this._partialCount = 0, this._partials = [];
        }
        for(let p11 = 1; p11 < i1; ++p11){
            let x1 = 2 / (p11 * Math.PI), y;
            switch(t){
                case "sine":
                    y = p11 <= c ? 1 : 0, this._partials[p11 - 1] = y;
                    break;
                case "square":
                    y = p11 & 1 ? 2 * x1 : 0, this._partials[p11 - 1] = y;
                    break;
                case "sawtooth":
                    y = x1 * (p11 & 1 ? 1 : -1), this._partials[p11 - 1] = y;
                    break;
                case "triangle":
                    p11 & 1 ? y = 2 * (x1 * x1) * (p11 - 1 >> 1 & 1 ? -1 : 1) : y = 0, this._partials[p11 - 1] = y;
                    break;
                case "custom":
                    y = this._partials[p11 - 1];
                    break;
                default:
                    throw new TypeError("Oscillator: invalid type: " + t);
            }
            y !== 0 ? (r[p11] = -y * Math.sin(e * p11), a[p11] = y * Math.cos(e * p11)) : (r[p11] = 0, a[p11] = 0);
        }
        return [
            r,
            a
        ];
    }
    _inverseFFT(t, e, s) {
        let i1 = 0, r = t.length;
        for(let a = 0; a < r; a++)i1 += t[a] * Math.cos(a * s) + e[a] * Math.sin(a * s);
        return i1;
    }
    getInitialValue() {
        let [t, e] = this._getRealImaginary(this._type, 0), s = 0, i1 = Math.PI * 2, r = 32;
        for(let a = 0; a < r; a++)s = Math.max(this._inverseFFT(t, e, a / r * i1), s);
        return Lt2(-this._inverseFFT(t, e, this._phase) / s, -1, 1);
    }
    get partials() {
        return this._partials.slice(0, this.partialCount);
    }
    set partials(t) {
        this._partials = t, this._partialCount = this._partials.length, t.length && (this.type = "custom");
    }
    get phase() {
        return this._phase * (180 / Math.PI);
    }
    set phase(t) {
        this._phase = t * Math.PI / 180, this.type = this._type;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            return at2(this, t);
        });
    }
    dispose() {
        return super.dispose(), this._oscillator !== null && this._oscillator.dispose(), this._wave = void 0, this.frequency.dispose(), this.detune.dispose(), this;
    }
};
S3._periodicWaveCache = [];
var ne2 = class extends M4 {
    constructor(){
        super(...arguments), this.name = "AudioToGain", this._norm = new G1({
            context: this.context,
            mapping: (t)=>(t + 1) / 2
        }), this.input = this._norm, this.output = this._norm;
    }
    dispose() {
        return super.dispose(), this._norm.dispose(), this;
    }
};
var b1 = class extends f {
    constructor(){
        super(Object.assign(o2(b1.getDefaults(), arguments, [
            "value"
        ]))), this.name = "Multiply", this.override = !1;
        let t = o2(b1.getDefaults(), arguments, [
            "value"
        ]);
        this._mult = this.input = this.output = new l1({
            context: this.context,
            minValue: t.minValue,
            maxValue: t.maxValue
        }), this.factor = this._param = this._mult.gain, this.factor.setValueAtTime(t.value, 0);
    }
    static getDefaults() {
        return Object.assign(f.getDefaults(), {
            value: 0
        });
    }
    dispose() {
        return super.dispose(), this._mult.dispose(), this;
    }
};
var ae2 = class extends T4 {
    constructor(){
        super(o2(ae2.getDefaults(), arguments, [
            "frequency",
            "type",
            "modulationType"
        ])), this.name = "AMOscillator", this._modulationScale = new ne2({
            context: this.context
        }), this._modulationNode = new l1({
            context: this.context
        });
        let t = o2(ae2.getDefaults(), arguments, [
            "frequency",
            "type",
            "modulationType"
        ]);
        this._carrier = new S3({
            context: this.context,
            detune: t.detune,
            frequency: t.frequency,
            onstop: ()=>this.onstop(this),
            phase: t.phase,
            type: t.type
        }), this.frequency = this._carrier.frequency, this.detune = this._carrier.detune, this._modulator = new S3({
            context: this.context,
            phase: t.phase,
            type: t.modulationType
        }), this.harmonicity = new b1({
            context: this.context,
            units: "positive",
            value: t.harmonicity
        }), this.frequency.chain(this.harmonicity, this._modulator.frequency), this._modulator.chain(this._modulationScale, this._modulationNode.gain), this._carrier.chain(this._modulationNode, this.output), u1(this, [
            "frequency",
            "detune",
            "harmonicity"
        ]);
    }
    static getDefaults() {
        return Object.assign(S3.getDefaults(), {
            harmonicity: 1,
            modulationType: "square"
        });
    }
    _start(t) {
        this._modulator.start(t), this._carrier.start(t);
    }
    _stop(t) {
        this._modulator.stop(t), this._carrier.stop(t);
    }
    _restart(t) {
        this._modulator.restart(t), this._carrier.restart(t);
    }
    get type() {
        return this._carrier.type;
    }
    set type(t) {
        this._carrier.type = t;
    }
    get baseType() {
        return this._carrier.baseType;
    }
    set baseType(t) {
        this._carrier.baseType = t;
    }
    get partialCount() {
        return this._carrier.partialCount;
    }
    set partialCount(t) {
        this._carrier.partialCount = t;
    }
    get modulationType() {
        return this._modulator.type;
    }
    set modulationType(t) {
        this._modulator.type = t;
    }
    get phase() {
        return this._carrier.phase;
    }
    set phase(t) {
        this._carrier.phase = t, this._modulator.phase = t;
    }
    get partials() {
        return this._carrier.partials;
    }
    set partials(t) {
        this._carrier.partials = t;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            return at2(this, t);
        });
    }
    dispose() {
        return super.dispose(), this.frequency.dispose(), this.detune.dispose(), this.harmonicity.dispose(), this._carrier.dispose(), this._modulator.dispose(), this._modulationNode.dispose(), this._modulationScale.dispose(), this;
    }
};
var Ct2 = class extends T4 {
    constructor(){
        super(o2(Ct2.getDefaults(), arguments, [
            "frequency",
            "type",
            "modulationType"
        ])), this.name = "FMOscillator", this._modulationNode = new l1({
            context: this.context,
            gain: 0
        });
        let t = o2(Ct2.getDefaults(), arguments, [
            "frequency",
            "type",
            "modulationType"
        ]);
        this._carrier = new S3({
            context: this.context,
            detune: t.detune,
            frequency: 0,
            onstop: ()=>this.onstop(this),
            phase: t.phase,
            type: t.type
        }), this.detune = this._carrier.detune, this.frequency = new f({
            context: this.context,
            units: "frequency",
            value: t.frequency
        }), this._modulator = new S3({
            context: this.context,
            phase: t.phase,
            type: t.modulationType
        }), this.harmonicity = new b1({
            context: this.context,
            units: "positive",
            value: t.harmonicity
        }), this.modulationIndex = new b1({
            context: this.context,
            units: "positive",
            value: t.modulationIndex
        }), this.frequency.connect(this._carrier.frequency), this.frequency.chain(this.harmonicity, this._modulator.frequency), this.frequency.chain(this.modulationIndex, this._modulationNode), this._modulator.connect(this._modulationNode.gain), this._modulationNode.connect(this._carrier.frequency), this._carrier.connect(this.output), this.detune.connect(this._modulator.detune), u1(this, [
            "modulationIndex",
            "frequency",
            "detune",
            "harmonicity"
        ]);
    }
    static getDefaults() {
        return Object.assign(S3.getDefaults(), {
            harmonicity: 1,
            modulationIndex: 2,
            modulationType: "square"
        });
    }
    _start(t) {
        this._modulator.start(t), this._carrier.start(t);
    }
    _stop(t) {
        this._modulator.stop(t), this._carrier.stop(t);
    }
    _restart(t) {
        return this._modulator.restart(t), this._carrier.restart(t), this;
    }
    get type() {
        return this._carrier.type;
    }
    set type(t) {
        this._carrier.type = t;
    }
    get baseType() {
        return this._carrier.baseType;
    }
    set baseType(t) {
        this._carrier.baseType = t;
    }
    get partialCount() {
        return this._carrier.partialCount;
    }
    set partialCount(t) {
        this._carrier.partialCount = t;
    }
    get modulationType() {
        return this._modulator.type;
    }
    set modulationType(t) {
        this._modulator.type = t;
    }
    get phase() {
        return this._carrier.phase;
    }
    set phase(t) {
        this._carrier.phase = t, this._modulator.phase = t;
    }
    get partials() {
        return this._carrier.partials;
    }
    set partials(t) {
        this._carrier.partials = t;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            return at2(this, t);
        });
    }
    dispose() {
        return super.dispose(), this.frequency.dispose(), this.harmonicity.dispose(), this._carrier.dispose(), this._modulator.dispose(), this._modulationNode.dispose(), this.modulationIndex.dispose(), this;
    }
};
var Vt1 = class extends T4 {
    constructor(){
        super(o2(Vt1.getDefaults(), arguments, [
            "frequency",
            "width"
        ])), this.name = "PulseOscillator", this._widthGate = new l1({
            context: this.context,
            gain: 0
        }), this._thresh = new G1({
            context: this.context,
            mapping: (e)=>e <= 0 ? -1 : 1
        });
        let t = o2(Vt1.getDefaults(), arguments, [
            "frequency",
            "width"
        ]);
        this.width = new f({
            context: this.context,
            units: "audioRange",
            value: t.width
        }), this._triangle = new S3({
            context: this.context,
            detune: t.detune,
            frequency: t.frequency,
            onstop: ()=>this.onstop(this),
            phase: t.phase,
            type: "triangle"
        }), this.frequency = this._triangle.frequency, this.detune = this._triangle.detune, this._triangle.chain(this._thresh, this.output), this.width.chain(this._widthGate, this._thresh), u1(this, [
            "width",
            "frequency",
            "detune"
        ]);
    }
    static getDefaults() {
        return Object.assign(T4.getDefaults(), {
            detune: 0,
            frequency: 440,
            phase: 0,
            type: "pulse",
            width: .2
        });
    }
    _start(t) {
        t = this.toSeconds(t), this._triangle.start(t), this._widthGate.gain.setValueAtTime(1, t);
    }
    _stop(t) {
        t = this.toSeconds(t), this._triangle.stop(t), this._widthGate.gain.cancelScheduledValues(t), this._widthGate.gain.setValueAtTime(0, t);
    }
    _restart(t) {
        this._triangle.restart(t), this._widthGate.gain.cancelScheduledValues(t), this._widthGate.gain.setValueAtTime(1, t);
    }
    get phase() {
        return this._triangle.phase;
    }
    set phase(t) {
        this._triangle.phase = t;
    }
    get type() {
        return "pulse";
    }
    get baseType() {
        return "pulse";
    }
    get partials() {
        return [];
    }
    get partialCount() {
        return 0;
    }
    set carrierType(t) {
        this._triangle.type = t;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            return at2(this, t);
        });
    }
    dispose() {
        return super.dispose(), this._triangle.dispose(), this.width.dispose(), this._widthGate.dispose(), this._thresh.dispose(), this;
    }
};
var he3 = class extends T4 {
    constructor(){
        super(o2(he3.getDefaults(), arguments, [
            "frequency",
            "type",
            "spread"
        ])), this.name = "FatOscillator", this._oscillators = [];
        let t = o2(he3.getDefaults(), arguments, [
            "frequency",
            "type",
            "spread"
        ]);
        this.frequency = new f({
            context: this.context,
            units: "frequency",
            value: t.frequency
        }), this.detune = new f({
            context: this.context,
            units: "cents",
            value: t.detune
        }), this._spread = t.spread, this._type = t.type, this._phase = t.phase, this._partials = t.partials, this._partialCount = t.partialCount, this.count = t.count, u1(this, [
            "frequency",
            "detune"
        ]);
    }
    static getDefaults() {
        return Object.assign(S3.getDefaults(), {
            count: 3,
            spread: 20,
            type: "sawtooth"
        });
    }
    _start(t) {
        t = this.toSeconds(t), this._forEach((e)=>e.start(t));
    }
    _stop(t) {
        t = this.toSeconds(t), this._forEach((e)=>e.stop(t));
    }
    _restart(t) {
        this._forEach((e)=>e.restart(t));
    }
    _forEach(t) {
        for(let e = 0; e < this._oscillators.length; e++)t(this._oscillators[e], e);
    }
    get type() {
        return this._type;
    }
    set type(t) {
        this._type = t, this._forEach((e)=>e.type = t);
    }
    get spread() {
        return this._spread;
    }
    set spread(t) {
        if (this._spread = t, this._oscillators.length > 1) {
            let e = -t / 2, s = t / (this._oscillators.length - 1);
            this._forEach((i1, r)=>i1.detune.value = e + s * r);
        }
    }
    get count() {
        return this._oscillators.length;
    }
    set count(t) {
        if (q2(t, 1), this._oscillators.length !== t) {
            this._forEach((e)=>e.dispose()), this._oscillators = [];
            for(let e = 0; e < t; e++){
                let s = new S3({
                    context: this.context,
                    volume: -6 - t * 1.1,
                    type: this._type,
                    phase: this._phase + e / t * 360,
                    partialCount: this._partialCount,
                    onstop: e === 0 ? ()=>this.onstop(this) : _2
                });
                this.type === "custom" && (s.partials = this._partials), this.frequency.connect(s.frequency), this.detune.connect(s.detune), s.detune.overridden = !1, s.connect(this.output), this._oscillators[e] = s;
            }
            this.spread = this._spread, this.state === "started" && this._forEach((e)=>e.start());
        }
    }
    get phase() {
        return this._phase;
    }
    set phase(t) {
        this._phase = t, this._forEach((e, s)=>e.phase = this._phase + s / this.count * 360);
    }
    get baseType() {
        return this._oscillators[0].baseType;
    }
    set baseType(t) {
        this._forEach((e)=>e.baseType = t), this._type = this._oscillators[0].type;
    }
    get partials() {
        return this._oscillators[0].partials;
    }
    set partials(t) {
        this._partials = t, this._partialCount = this._partials.length, t.length && (this._type = "custom", this._forEach((e)=>e.partials = t));
    }
    get partialCount() {
        return this._oscillators[0].partialCount;
    }
    set partialCount(t) {
        this._partialCount = t, this._forEach((e)=>e.partialCount = t), this._type = this._oscillators[0].type;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            return at2(this, t);
        });
    }
    dispose() {
        return super.dispose(), this.frequency.dispose(), this.detune.dispose(), this._forEach((t)=>t.dispose()), this;
    }
};
var ce3 = class extends T4 {
    constructor(){
        super(o2(ce3.getDefaults(), arguments, [
            "frequency",
            "modulationFrequency"
        ])), this.name = "PWMOscillator", this.sourceType = "pwm", this._scale = new b1({
            context: this.context,
            value: 2
        });
        let t = o2(ce3.getDefaults(), arguments, [
            "frequency",
            "modulationFrequency"
        ]);
        this._pulse = new Vt1({
            context: this.context,
            frequency: t.modulationFrequency
        }), this._pulse.carrierType = "sine", this.modulationFrequency = this._pulse.frequency, this._modulator = new S3({
            context: this.context,
            detune: t.detune,
            frequency: t.frequency,
            onstop: ()=>this.onstop(this),
            phase: t.phase
        }), this.frequency = this._modulator.frequency, this.detune = this._modulator.detune, this._modulator.chain(this._scale, this._pulse.width), this._pulse.connect(this.output), u1(this, [
            "modulationFrequency",
            "frequency",
            "detune"
        ]);
    }
    static getDefaults() {
        return Object.assign(T4.getDefaults(), {
            detune: 0,
            frequency: 440,
            modulationFrequency: .4,
            phase: 0,
            type: "pwm"
        });
    }
    _start(t) {
        t = this.toSeconds(t), this._modulator.start(t), this._pulse.start(t);
    }
    _stop(t) {
        t = this.toSeconds(t), this._modulator.stop(t), this._pulse.stop(t);
    }
    _restart(t) {
        this._modulator.restart(t), this._pulse.restart(t);
    }
    get type() {
        return "pwm";
    }
    get baseType() {
        return "pwm";
    }
    get partials() {
        return [];
    }
    get partialCount() {
        return 0;
    }
    get phase() {
        return this._modulator.phase;
    }
    set phase(t) {
        this._modulator.phase = t;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            return at2(this, t);
        });
    }
    dispose() {
        return super.dispose(), this._pulse.dispose(), this._scale.dispose(), this._modulator.dispose(), this;
    }
};
var Li1 = {
    am: ae2,
    fat: he3,
    fm: Ct2,
    oscillator: S3,
    pulse: Vt1,
    pwm: ce3
}, ht2 = class extends T4 {
    constructor(){
        super(o2(ht2.getDefaults(), arguments, [
            "frequency",
            "type"
        ])), this.name = "OmniOscillator";
        let t = o2(ht2.getDefaults(), arguments, [
            "frequency",
            "type"
        ]);
        this.frequency = new f({
            context: this.context,
            units: "frequency",
            value: t.frequency
        }), this.detune = new f({
            context: this.context,
            units: "cents",
            value: t.detune
        }), u1(this, [
            "frequency",
            "detune"
        ]), this.set(t);
    }
    static getDefaults() {
        return Object.assign(S3.getDefaults(), Ct2.getDefaults(), ae2.getDefaults(), he3.getDefaults(), Vt1.getDefaults(), ce3.getDefaults());
    }
    _start(t) {
        this._oscillator.start(t);
    }
    _stop(t) {
        this._oscillator.stop(t);
    }
    _restart(t) {
        return this._oscillator.restart(t), this;
    }
    get type() {
        let t = "";
        return [
            "am",
            "fm",
            "fat"
        ].some((e)=>this._sourceType === e) && (t = this._sourceType), t + this._oscillator.type;
    }
    set type(t) {
        t.substr(0, 2) === "fm" ? (this._createNewOscillator("fm"), this._oscillator = this._oscillator, this._oscillator.type = t.substr(2)) : t.substr(0, 2) === "am" ? (this._createNewOscillator("am"), this._oscillator = this._oscillator, this._oscillator.type = t.substr(2)) : t.substr(0, 3) === "fat" ? (this._createNewOscillator("fat"), this._oscillator = this._oscillator, this._oscillator.type = t.substr(3)) : t === "pwm" ? (this._createNewOscillator("pwm"), this._oscillator = this._oscillator) : t === "pulse" ? this._createNewOscillator("pulse") : (this._createNewOscillator("oscillator"), this._oscillator = this._oscillator, this._oscillator.type = t);
    }
    get partials() {
        return this._oscillator.partials;
    }
    set partials(t) {
        !this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm") && (this._oscillator.partials = t);
    }
    get partialCount() {
        return this._oscillator.partialCount;
    }
    set partialCount(t) {
        !this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm") && (this._oscillator.partialCount = t);
    }
    set(t) {
        return Reflect.has(t, "type") && t.type && (this.type = t.type), super.set(t), this;
    }
    _createNewOscillator(t) {
        if (t !== this._sourceType) {
            this._sourceType = t;
            let e = Li1[t], s = this.now();
            if (this._oscillator) {
                let i1 = this._oscillator;
                i1.stop(s), this.context.setTimeout(()=>i1.dispose(), this.blockTime);
            }
            this._oscillator = new e({
                context: this.context
            }), this.frequency.connect(this._oscillator.frequency), this.detune.connect(this._oscillator.detune), this._oscillator.connect(this.output), this._oscillator.onstop = ()=>this.onstop(this), this.state === "started" && this._oscillator.start(s);
        }
    }
    get phase() {
        return this._oscillator.phase;
    }
    set phase(t) {
        this._oscillator.phase = t;
    }
    get sourceType() {
        return this._sourceType;
    }
    set sourceType(t) {
        let e = "sine";
        this._oscillator.type !== "pwm" && this._oscillator.type !== "pulse" && (e = this._oscillator.type), t === "fm" ? this.type = "fm" + e : t === "am" ? this.type = "am" + e : t === "fat" ? this.type = "fat" + e : t === "oscillator" ? this.type = e : t === "pulse" ? this.type = "pulse" : t === "pwm" && (this.type = "pwm");
    }
    _getOscType(t, e) {
        return t instanceof Li1[e];
    }
    get baseType() {
        return this._oscillator.baseType;
    }
    set baseType(t) {
        !this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm") && t !== "pulse" && t !== "pwm" && (this._oscillator.baseType = t);
    }
    get width() {
        if (this._getOscType(this._oscillator, "pulse")) return this._oscillator.width;
    }
    get count() {
        if (this._getOscType(this._oscillator, "fat")) return this._oscillator.count;
    }
    set count(t) {
        this._getOscType(this._oscillator, "fat") && W1(t) && (this._oscillator.count = t);
    }
    get spread() {
        if (this._getOscType(this._oscillator, "fat")) return this._oscillator.spread;
    }
    set spread(t) {
        this._getOscType(this._oscillator, "fat") && W1(t) && (this._oscillator.spread = t);
    }
    get modulationType() {
        if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) return this._oscillator.modulationType;
    }
    set modulationType(t) {
        (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) && Z1(t) && (this._oscillator.modulationType = t);
    }
    get modulationIndex() {
        if (this._getOscType(this._oscillator, "fm")) return this._oscillator.modulationIndex;
    }
    get harmonicity() {
        if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) return this._oscillator.harmonicity;
    }
    get modulationFrequency() {
        if (this._getOscType(this._oscillator, "pwm")) return this._oscillator.modulationFrequency;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            return at2(this, t);
        });
    }
    dispose() {
        return super.dispose(), this.detune.dispose(), this.frequency.dispose(), this._oscillator.dispose(), this;
    }
};
var vt2 = class extends f {
    constructor(){
        super(Object.assign(o2(vt2.getDefaults(), arguments, [
            "value"
        ]))), this.override = !1, this.name = "Add", this._sum = new l1({
            context: this.context
        }), this.input = this._sum, this.output = this._sum, this.addend = this._param, U1(this._constantSource, this._sum);
    }
    static getDefaults() {
        return Object.assign(f.getDefaults(), {
            value: 0
        });
    }
    dispose() {
        return super.dispose(), this._sum.dispose(), this;
    }
};
var st2 = class extends M4 {
    constructor(){
        super(Object.assign(o2(st2.getDefaults(), arguments, [
            "min",
            "max"
        ]))), this.name = "Scale";
        let t = o2(st2.getDefaults(), arguments, [
            "min",
            "max"
        ]);
        this._mult = this.input = new b1({
            context: this.context,
            value: t.max - t.min
        }), this._add = this.output = new vt2({
            context: this.context,
            value: t.min
        }), this._min = t.min, this._max = t.max, this.input.connect(this.output);
    }
    static getDefaults() {
        return Object.assign(M4.getDefaults(), {
            max: 1,
            min: 0
        });
    }
    get min() {
        return this._min;
    }
    set min(t) {
        this._min = t, this._setRange();
    }
    get max() {
        return this._max;
    }
    set max(t) {
        this._max = t, this._setRange();
    }
    _setRange() {
        this._add.value = this._min, this._mult.value = this._max - this._min;
    }
    dispose() {
        return super.dispose(), this._add.dispose(), this._mult.dispose(), this;
    }
};
var ze1 = class extends M4 {
    constructor(){
        super(Object.assign(o2(ze1.getDefaults(), arguments))), this.name = "Zero", this._gain = new l1({
            context: this.context
        }), this.output = this._gain, this.input = void 0, P2(this.context.getConstant(0), this._gain);
    }
    dispose() {
        return super.dispose(), ci1(this.context.getConstant(0), this._gain), this;
    }
};
var I1 = class extends h1 {
    constructor(){
        super(o2(I1.getDefaults(), arguments, [
            "frequency",
            "min",
            "max"
        ])), this.name = "LFO", this._stoppedValue = 0, this._units = "number", this.convert = !0, this._fromType = d2.prototype._fromType, this._toType = d2.prototype._toType, this._is = d2.prototype._is, this._clampValue = d2.prototype._clampValue;
        let t = o2(I1.getDefaults(), arguments, [
            "frequency",
            "min",
            "max"
        ]);
        this._oscillator = new S3(t), this.frequency = this._oscillator.frequency, this._amplitudeGain = new l1({
            context: this.context,
            gain: t.amplitude,
            units: "normalRange"
        }), this.amplitude = this._amplitudeGain.gain, this._stoppedSignal = new f({
            context: this.context,
            units: "audioRange",
            value: 0
        }), this._zeros = new ze1({
            context: this.context
        }), this._a2g = new ne2({
            context: this.context
        }), this._scaler = this.output = new st2({
            context: this.context,
            max: t.max,
            min: t.min
        }), this.units = t.units, this.min = t.min, this.max = t.max, this._oscillator.chain(this._amplitudeGain, this._a2g, this._scaler), this._zeros.connect(this._a2g), this._stoppedSignal.connect(this._a2g), u1(this, [
            "amplitude",
            "frequency"
        ]), this.phase = t.phase;
    }
    static getDefaults() {
        return Object.assign(S3.getDefaults(), {
            amplitude: 1,
            frequency: "4n",
            max: 1,
            min: 0,
            type: "sine",
            units: "number"
        });
    }
    start(t) {
        return t = this.toSeconds(t), this._stoppedSignal.setValueAtTime(0, t), this._oscillator.start(t), this;
    }
    stop(t) {
        return t = this.toSeconds(t), this._stoppedSignal.setValueAtTime(this._stoppedValue, t), this._oscillator.stop(t), this;
    }
    sync() {
        return this._oscillator.sync(), this._oscillator.syncFrequency(), this;
    }
    unsync() {
        return this._oscillator.unsync(), this._oscillator.unsyncFrequency(), this;
    }
    _setStoppedValue() {
        this._stoppedValue = this._oscillator.getInitialValue(), this._stoppedSignal.value = this._stoppedValue;
    }
    get min() {
        return this._toType(this._scaler.min);
    }
    set min(t) {
        t = this._fromType(t), this._scaler.min = t;
    }
    get max() {
        return this._toType(this._scaler.max);
    }
    set max(t) {
        t = this._fromType(t), this._scaler.max = t;
    }
    get type() {
        return this._oscillator.type;
    }
    set type(t) {
        this._oscillator.type = t, this._setStoppedValue();
    }
    get partials() {
        return this._oscillator.partials;
    }
    set partials(t) {
        this._oscillator.partials = t, this._setStoppedValue();
    }
    get phase() {
        return this._oscillator.phase;
    }
    set phase(t) {
        this._oscillator.phase = t, this._setStoppedValue();
    }
    get units() {
        return this._units;
    }
    set units(t) {
        let e = this.min, s = this.max;
        this._units = t, this.min = e, this.max = s;
    }
    get state() {
        return this._oscillator.state;
    }
    connect(t, e, s) {
        return (t instanceof d2 || t instanceof f) && (this.convert = t.convert, this.units = t.units), Te2(this, t, e, s), this;
    }
    dispose() {
        return super.dispose(), this._oscillator.dispose(), this._stoppedSignal.dispose(), this._zeros.dispose(), this._scaler.dispose(), this._a2g.dispose(), this._amplitudeGain.dispose(), this.amplitude.dispose(), this;
    }
};
function Hs1(n, t = 1 / 0) {
    let e = new WeakMap;
    return function(s, i1) {
        Reflect.defineProperty(s, i1, {
            configurable: !0,
            enumerable: !0,
            get: function() {
                return e.get(this);
            },
            set: function(r) {
                q2(r, n, t), e.set(this, r);
            }
        });
    };
}
function ct2(n, t = 1 / 0) {
    let e = new WeakMap;
    return function(s, i1) {
        Reflect.defineProperty(s, i1, {
            configurable: !0,
            enumerable: !0,
            get: function() {
                return e.get(this);
            },
            set: function(r) {
                q2(this.toSeconds(r), n, t), e.set(this, r);
            }
        });
    };
}
var $t2 = class extends T4 {
    constructor(){
        super(o2($t2.getDefaults(), arguments, [
            "url",
            "onload"
        ])), this.name = "Player", this._activeSources = new Set;
        let t = o2($t2.getDefaults(), arguments, [
            "url",
            "onload"
        ]);
        this._buffer = new v4({
            onload: this._onload.bind(this, t.onload),
            onerror: t.onerror,
            reverse: t.reverse,
            url: t.url
        }), this.autostart = t.autostart, this._loop = t.loop, this._loopStart = t.loopStart, this._loopEnd = t.loopEnd, this._playbackRate = t.playbackRate, this.fadeIn = t.fadeIn, this.fadeOut = t.fadeOut;
    }
    static getDefaults() {
        return Object.assign(T4.getDefaults(), {
            autostart: !1,
            fadeIn: 0,
            fadeOut: 0,
            loop: !1,
            loopEnd: 0,
            loopStart: 0,
            onload: _2,
            onerror: _2,
            playbackRate: 1,
            reverse: !1
        });
    }
    load(t) {
        return M3(this, void 0, void 0, function*() {
            return yield this._buffer.load(t), this._onload(), this;
        });
    }
    _onload(t = _2) {
        t(), this.autostart && this.start();
    }
    _onSourceEnd(t) {
        this.onstop(this), this._activeSources.delete(t), this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === "started" && (this._state.cancel(this.now()), this._state.setStateAtTime("stopped", this.now()));
    }
    start(t, e, s) {
        return super.start(t, e, s), this;
    }
    _start(t, e, s) {
        this._loop ? e = X2(e, this._loopStart) : e = X2(e, 0);
        let i1 = this.toSeconds(e), r = s;
        s = X2(s, Math.max(this._buffer.duration - i1, 0));
        let a = this.toSeconds(s);
        a = a / this._playbackRate, t = this.toSeconds(t);
        let c = new ot2({
            url: this._buffer,
            context: this.context,
            fadeIn: this.fadeIn,
            fadeOut: this.fadeOut,
            loop: this._loop,
            loopEnd: this._loopEnd,
            loopStart: this._loopStart,
            onended: this._onSourceEnd.bind(this),
            playbackRate: this._playbackRate
        }).connect(this.output);
        !this._loop && !this._synced && (this._state.cancel(t + a), this._state.setStateAtTime("stopped", t + a, {
            implicitEnd: !0
        })), this._activeSources.add(c), this._loop && N1(r) ? c.start(t, i1) : c.start(t, i1, a - this.toSeconds(this.fadeOut));
    }
    _stop(t) {
        let e = this.toSeconds(t);
        this._activeSources.forEach((s)=>s.stop(e));
    }
    restart(t, e, s) {
        return super.restart(t, e, s), this;
    }
    _restart(t, e, s) {
        var i1;
        (i1 = [
            ...this._activeSources
        ].pop()) === null || i1 === void 0 || i1.stop(t), this._start(t, e, s);
    }
    seek(t, e) {
        let s = this.toSeconds(e);
        if (this._state.getValueAtTime(s) === "started") {
            let i1 = this.toSeconds(t);
            this._stop(s), this._start(s, i1);
        }
        return this;
    }
    setLoopPoints(t, e) {
        return this.loopStart = t, this.loopEnd = e, this;
    }
    get loopStart() {
        return this._loopStart;
    }
    set loopStart(t) {
        this._loopStart = t, this.buffer.loaded && q2(this.toSeconds(t), 0, this.buffer.duration), this._activeSources.forEach((e)=>{
            e.loopStart = t;
        });
    }
    get loopEnd() {
        return this._loopEnd;
    }
    set loopEnd(t) {
        this._loopEnd = t, this.buffer.loaded && q2(this.toSeconds(t), 0, this.buffer.duration), this._activeSources.forEach((e)=>{
            e.loopEnd = t;
        });
    }
    get buffer() {
        return this._buffer;
    }
    set buffer(t) {
        this._buffer.set(t);
    }
    get loop() {
        return this._loop;
    }
    set loop(t) {
        if (this._loop !== t && (this._loop = t, this._activeSources.forEach((e)=>{
            e.loop = t;
        }), t)) {
            let e = this._state.getNextState("stopped", this.now());
            e && this._state.cancel(e.time);
        }
    }
    get playbackRate() {
        return this._playbackRate;
    }
    set playbackRate(t) {
        this._playbackRate = t;
        let e = this.now(), s = this._state.getNextState("stopped", e);
        s && s.implicitEnd && (this._state.cancel(s.time), this._activeSources.forEach((i1)=>i1.cancelStop())), this._activeSources.forEach((i1)=>{
            i1.playbackRate.setValueAtTime(t, e);
        });
    }
    get reverse() {
        return this._buffer.reverse;
    }
    set reverse(t) {
        this._buffer.reverse = t;
    }
    get loaded() {
        return this._buffer.loaded;
    }
    dispose() {
        return super.dispose(), this._activeSources.forEach((t)=>t.dispose()), this._activeSources.clear(), this._buffer.dispose(), this;
    }
};
E4([
    ct2(0)
], $t2.prototype, "fadeIn", void 0);
E4([
    ct2(0)
], $t2.prototype, "fadeOut", void 0);
var Ke2 = class extends h1 {
    constructor(){
        super(o2(Ke2.getDefaults(), arguments, [
            "urls",
            "onload"
        ], "urls")), this.name = "Players", this.input = void 0, this._players = new Map;
        let t = o2(Ke2.getDefaults(), arguments, [
            "urls",
            "onload"
        ], "urls");
        this._volume = this.output = new K4({
            context: this.context,
            volume: t.volume
        }), this.volume = this._volume.volume, u1(this, "volume"), this._buffers = new Et2({
            urls: t.urls,
            onload: t.onload,
            baseUrl: t.baseUrl,
            onerror: t.onerror
        }), this.mute = t.mute, this._fadeIn = t.fadeIn, this._fadeOut = t.fadeOut;
    }
    static getDefaults() {
        return Object.assign(T4.getDefaults(), {
            baseUrl: "",
            fadeIn: 0,
            fadeOut: 0,
            mute: !1,
            onload: _2,
            onerror: _2,
            urls: {},
            volume: 0
        });
    }
    get mute() {
        return this._volume.mute;
    }
    set mute(t) {
        this._volume.mute = t;
    }
    get fadeIn() {
        return this._fadeIn;
    }
    set fadeIn(t) {
        this._fadeIn = t, this._players.forEach((e)=>{
            e.fadeIn = t;
        });
    }
    get fadeOut() {
        return this._fadeOut;
    }
    set fadeOut(t) {
        this._fadeOut = t, this._players.forEach((e)=>{
            e.fadeOut = t;
        });
    }
    get state() {
        return Array.from(this._players).some(([e, s])=>s.state === "started") ? "started" : "stopped";
    }
    has(t) {
        return this._buffers.has(t);
    }
    player(t) {
        if (m3(this.has(t), `No Player with the name ${t} exists on this object`), !this._players.has(t)) {
            let e = new $t2({
                context: this.context,
                fadeIn: this._fadeIn,
                fadeOut: this._fadeOut,
                url: this._buffers.get(t)
            }).connect(this.output);
            this._players.set(t, e);
        }
        return this._players.get(t);
    }
    get loaded() {
        return this._buffers.loaded;
    }
    add(t, e, s) {
        return m3(!this._buffers.has(t), "A buffer with that name already exists on this object"), this._buffers.add(t, e, s), this;
    }
    stopAll(t) {
        return this._players.forEach((e)=>e.stop(t)), this;
    }
    dispose() {
        return super.dispose(), this._volume.dispose(), this.volume.dispose(), this._players.forEach((t)=>t.dispose()), this._buffers.dispose(), this;
    }
};
var ts1 = class extends T4 {
    constructor(){
        super(o2(ts1.getDefaults(), arguments, [
            "url",
            "onload"
        ])), this.name = "GrainPlayer", this._loopStart = 0, this._loopEnd = 0, this._activeSources = [];
        let t = o2(ts1.getDefaults(), arguments, [
            "url",
            "onload"
        ]);
        this.buffer = new v4({
            onload: t.onload,
            onerror: t.onerror,
            reverse: t.reverse,
            url: t.url
        }), this._clock = new Ft2({
            context: this.context,
            callback: this._tick.bind(this),
            frequency: 1 / t.grainSize
        }), this._playbackRate = t.playbackRate, this._grainSize = t.grainSize, this._overlap = t.overlap, this.detune = t.detune, this.overlap = t.overlap, this.loop = t.loop, this.playbackRate = t.playbackRate, this.grainSize = t.grainSize, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this.reverse = t.reverse, this._clock.on("stop", this._onstop.bind(this));
    }
    static getDefaults() {
        return Object.assign(T4.getDefaults(), {
            onload: _2,
            onerror: _2,
            overlap: .1,
            grainSize: .2,
            playbackRate: 1,
            detune: 0,
            loop: !1,
            loopStart: 0,
            loopEnd: 0,
            reverse: !1
        });
    }
    _start(t, e, s) {
        e = X2(e, 0), e = this.toSeconds(e), t = this.toSeconds(t);
        let i1 = 1 / this._clock.frequency.getValueAtTime(t);
        this._clock.start(t, e / i1), s && this.stop(t + this.toSeconds(s));
    }
    restart(t, e, s) {
        return super.restart(t, e, s), this;
    }
    _restart(t, e, s) {
        this._stop(t), this._start(t, e, s);
    }
    _stop(t) {
        this._clock.stop(t);
    }
    _onstop(t) {
        this._activeSources.forEach((e)=>{
            e.fadeOut = 0, e.stop(t);
        }), this.onstop(this);
    }
    _tick(t) {
        let e = this._clock.getTicksAtTime(t), s = e * this._grainSize;
        if (this.log("offset", s), !this.loop && s > this.buffer.duration) {
            this.stop(t);
            return;
        }
        let i1 = s < this._overlap ? 0 : this._overlap, r = new ot2({
            context: this.context,
            url: this.buffer,
            fadeIn: i1,
            fadeOut: this._overlap,
            loop: this.loop,
            loopStart: this._loopStart,
            loopEnd: this._loopEnd,
            playbackRate: Rt2(this.detune / 100)
        }).connect(this.output);
        r.start(t, this._grainSize * e), r.stop(t + this._grainSize / this.playbackRate), this._activeSources.push(r), r.onended = ()=>{
            let a = this._activeSources.indexOf(r);
            a !== -1 && this._activeSources.splice(a, 1);
        };
    }
    get playbackRate() {
        return this._playbackRate;
    }
    set playbackRate(t) {
        q2(t, .001), this._playbackRate = t, this.grainSize = this._grainSize;
    }
    get loopStart() {
        return this._loopStart;
    }
    set loopStart(t) {
        this.buffer.loaded && q2(this.toSeconds(t), 0, this.buffer.duration), this._loopStart = this.toSeconds(t);
    }
    get loopEnd() {
        return this._loopEnd;
    }
    set loopEnd(t) {
        this.buffer.loaded && q2(this.toSeconds(t), 0, this.buffer.duration), this._loopEnd = this.toSeconds(t);
    }
    get reverse() {
        return this.buffer.reverse;
    }
    set reverse(t) {
        this.buffer.reverse = t;
    }
    get grainSize() {
        return this._grainSize;
    }
    set grainSize(t) {
        this._grainSize = this.toSeconds(t), this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());
    }
    get overlap() {
        return this._overlap;
    }
    set overlap(t) {
        let e = this.toSeconds(t);
        q2(e, 0), this._overlap = e;
    }
    get loaded() {
        return this.buffer.loaded;
    }
    dispose() {
        return super.dispose(), this.buffer.dispose(), this._clock.dispose(), this._activeSources.forEach((t)=>t.dispose()), this;
    }
};
var Xs1 = class extends M4 {
    constructor(){
        super(...arguments), this.name = "Abs", this._abs = new G1({
            context: this.context,
            mapping: (t)=>Math.abs(t) < .001 ? 0 : Math.abs(t)
        }), this.input = this._abs, this.output = this._abs;
    }
    dispose() {
        return super.dispose(), this._abs.dispose(), this;
    }
};
var Ys1 = class extends M4 {
    constructor(){
        super(...arguments), this.name = "GainToAudio", this._norm = new G1({
            context: this.context,
            mapping: (t)=>Math.abs(t) * 2 - 1
        }), this.input = this._norm, this.output = this._norm;
    }
    dispose() {
        return super.dispose(), this._norm.dispose(), this;
    }
};
var Ge1 = class extends M4 {
    constructor(){
        super(...arguments), this.name = "Negate", this._multiply = new b1({
            context: this.context,
            value: -1
        }), this.input = this._multiply, this.output = this._multiply;
    }
    dispose() {
        return super.dispose(), this._multiply.dispose(), this;
    }
};
var bt2 = class extends f {
    constructor(){
        super(Object.assign(o2(bt2.getDefaults(), arguments, [
            "value"
        ]))), this.override = !1, this.name = "Subtract", this._sum = new l1({
            context: this.context
        }), this.input = this._sum, this.output = this._sum, this._neg = new Ge1({
            context: this.context
        }), this.subtrahend = this._param, U1(this._constantSource, this._neg, this._sum);
    }
    static getDefaults() {
        return Object.assign(f.getDefaults(), {
            value: 0
        });
    }
    dispose() {
        return super.dispose(), this._neg.dispose(), this._sum.dispose(), this;
    }
};
var We2 = class extends M4 {
    constructor(){
        super(Object.assign(o2(We2.getDefaults(), arguments))), this.name = "GreaterThanZero", this._thresh = this.output = new G1({
            context: this.context,
            length: 127,
            mapping: (t)=>t <= 0 ? 0 : 1
        }), this._scale = this.input = new b1({
            context: this.context,
            value: 1e4
        }), this._scale.connect(this._thresh);
    }
    dispose() {
        return super.dispose(), this._scale.dispose(), this._thresh.dispose(), this;
    }
};
var Oe2 = class extends f {
    constructor(){
        super(Object.assign(o2(Oe2.getDefaults(), arguments, [
            "value"
        ]))), this.name = "GreaterThan", this.override = !1;
        let t = o2(Oe2.getDefaults(), arguments, [
            "value"
        ]);
        this._subtract = this.input = new bt2({
            context: this.context,
            value: t.value
        }), this._gtz = this.output = new We2({
            context: this.context
        }), this.comparator = this._param = this._subtract.subtrahend, u1(this, "comparator"), this._subtract.connect(this._gtz);
    }
    static getDefaults() {
        return Object.assign(f.getDefaults(), {
            value: 0
        });
    }
    dispose() {
        return super.dispose(), this._gtz.dispose(), this._subtract.dispose(), this.comparator.dispose(), this;
    }
};
var qe1 = class extends st2 {
    constructor(){
        super(Object.assign(o2(qe1.getDefaults(), arguments, [
            "min",
            "max",
            "exponent"
        ]))), this.name = "ScaleExp";
        let t = o2(qe1.getDefaults(), arguments, [
            "min",
            "max",
            "exponent"
        ]);
        this.input = this._exp = new kt1({
            context: this.context,
            value: t.exponent
        }), this._exp.connect(this._mult);
    }
    static getDefaults() {
        return Object.assign(st2.getDefaults(), {
            exponent: 1
        });
    }
    get exponent() {
        return this._exp.value;
    }
    set exponent(t) {
        this._exp.value = t;
    }
    dispose() {
        return super.dispose(), this._exp.dispose(), this;
    }
};
var C4 = class extends h1 {
    constructor(){
        super(o2(C4.getDefaults(), arguments, [
            "attack",
            "decay",
            "sustain",
            "release"
        ])), this.name = "Envelope", this._sig = new f({
            context: this.context,
            value: 0
        }), this.output = this._sig, this.input = void 0;
        let t = o2(C4.getDefaults(), arguments, [
            "attack",
            "decay",
            "sustain",
            "release"
        ]);
        this.attack = t.attack, this.decay = t.decay, this.sustain = t.sustain, this.release = t.release, this.attackCurve = t.attackCurve, this.releaseCurve = t.releaseCurve, this.decayCurve = t.decayCurve;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            attack: .01,
            attackCurve: "linear",
            decay: .1,
            decayCurve: "exponential",
            release: 1,
            releaseCurve: "exponential",
            sustain: .5
        });
    }
    get value() {
        return this.getValueAtTime(this.now());
    }
    _getCurve(t, e) {
        if (Z1(t)) return t;
        {
            let s;
            for(s in Zs1)if (Zs1[s][e] === t) return s;
            return t;
        }
    }
    _setCurve(t, e, s) {
        if (Z1(s) && Reflect.has(Zs1, s)) {
            let i1 = Zs1[s];
            dt3(i1) ? t !== "_decayCurve" && (this[t] = i1[e]) : this[t] = i1;
        } else if (F2(s) && t !== "_decayCurve") this[t] = s;
        else throw new Error("Envelope: invalid curve: " + s);
    }
    get attackCurve() {
        return this._getCurve(this._attackCurve, "In");
    }
    set attackCurve(t) {
        this._setCurve("_attackCurve", "In", t);
    }
    get releaseCurve() {
        return this._getCurve(this._releaseCurve, "Out");
    }
    set releaseCurve(t) {
        this._setCurve("_releaseCurve", "Out", t);
    }
    get decayCurve() {
        return this._getCurve(this._decayCurve, "Out");
    }
    set decayCurve(t) {
        this._setCurve("_decayCurve", "Out", t);
    }
    triggerAttack(t, e = 1) {
        this.log("triggerAttack", t, e), t = this.toSeconds(t);
        let i1 = this.toSeconds(this.attack), r = this.toSeconds(this.decay), a = this.getValueAtTime(t);
        if (a > 0) {
            let c = 1 / i1;
            i1 = (1 - a) / c;
        }
        if (i1 < this.sampleTime) this._sig.cancelScheduledValues(t), this._sig.setValueAtTime(e, t);
        else if (this._attackCurve === "linear") this._sig.linearRampTo(e, i1, t);
        else if (this._attackCurve === "exponential") this._sig.targetRampTo(e, i1, t);
        else {
            this._sig.cancelAndHoldAtTime(t);
            let c1 = this._attackCurve;
            for(let p1 = 1; p1 < c1.length; p1++)if (c1[p1 - 1] <= a && a <= c1[p1]) {
                c1 = this._attackCurve.slice(p1), c1[0] = a;
                break;
            }
            this._sig.setValueCurveAtTime(c1, t, i1, e);
        }
        if (r && this.sustain < 1) {
            let c2 = e * this.sustain, p11 = t + i1;
            this.log("decay", p11), this._decayCurve === "linear" ? this._sig.linearRampToValueAtTime(c2, r + p11) : this._sig.exponentialApproachValueAtTime(c2, p11, r);
        }
        return this;
    }
    triggerRelease(t) {
        this.log("triggerRelease", t), t = this.toSeconds(t);
        let e = this.getValueAtTime(t);
        if (e > 0) {
            let s = this.toSeconds(this.release);
            s < this.sampleTime ? this._sig.setValueAtTime(0, t) : this._releaseCurve === "linear" ? this._sig.linearRampTo(0, s, t) : this._releaseCurve === "exponential" ? this._sig.targetRampTo(0, s, t) : (m3(F2(this._releaseCurve), "releaseCurve must be either 'linear', 'exponential' or an array"), this._sig.cancelAndHoldAtTime(t), this._sig.setValueCurveAtTime(this._releaseCurve, t, s, e));
        }
        return this;
    }
    getValueAtTime(t) {
        return this._sig.getValueAtTime(t);
    }
    triggerAttackRelease(t, e, s = 1) {
        return e = this.toSeconds(e), this.triggerAttack(e, s), this.triggerRelease(e + this.toSeconds(t)), this;
    }
    cancel(t) {
        return this._sig.cancelScheduledValues(this.toSeconds(t)), this;
    }
    connect(t, e = 0, s = 0) {
        return Te2(this, t, e, s), this;
    }
    asArray(t = 1024) {
        return M3(this, void 0, void 0, function*() {
            let e = t / this.context.sampleRate, s = new gt2(1, e, this.context.sampleRate), i1 = this.toSeconds(this.attack) + this.toSeconds(this.decay), r = i1 + this.toSeconds(this.release), a = r * .1, c = r + a, p1 = new this.constructor(Object.assign(this.get(), {
                attack: e * this.toSeconds(this.attack) / c,
                decay: e * this.toSeconds(this.decay) / c,
                release: e * this.toSeconds(this.release) / c,
                context: s
            }));
            return p1._sig.toDestination(), p1.triggerAttackRelease(e * (i1 + a) / c, 0), (yield s.render()).getChannelData(0);
        });
    }
    dispose() {
        return super.dispose(), this._sig.dispose(), this;
    }
};
E4([
    ct2(0)
], C4.prototype, "attack", void 0);
E4([
    ct2(0)
], C4.prototype, "decay", void 0);
E4([
    Hs1(0, 1)
], C4.prototype, "sustain", void 0);
E4([
    ct2(0)
], C4.prototype, "release", void 0);
var Zs1 = (()=>{
    let t, e, s = [];
    for(t = 0; t < 128; t++)s[t] = Math.sin(t / (128 - 1) * (Math.PI / 2));
    let i1 = [], r = 6.4;
    for(t = 0; t < 128 - 1; t++){
        e = t / (128 - 1);
        let et = Math.sin(e * (Math.PI * 2) * r - Math.PI / 2) + 1;
        i1[t] = et / 10 + e * .83;
    }
    i1[128 - 1] = 1;
    let a = [], c = 5;
    for(t = 0; t < 128; t++)a[t] = Math.ceil(t / (128 - 1) * c) / c;
    let p1 = [];
    for(t = 0; t < 128; t++)e = t / (128 - 1), p1[t] = .5 * (1 - Math.cos(Math.PI * e));
    let x1 = [];
    for(t = 0; t < 128; t++){
        e = t / (128 - 1);
        let et1 = Math.pow(e, 3) * 4 + .2, xe = Math.cos(et1 * Math.PI * 2 * e);
        x1[t] = Math.abs(xe * (1 - e));
    }
    function y(et) {
        let xe = new Array(et.length);
        for(let ye = 0; ye < et.length; ye++)xe[ye] = 1 - et[ye];
        return xe;
    }
    function D1(et) {
        return et.slice(0).reverse();
    }
    return {
        bounce: {
            In: y(x1),
            Out: x1
        },
        cosine: {
            In: s,
            Out: D1(s)
        },
        exponential: "exponential",
        linear: "linear",
        ripple: {
            In: i1,
            Out: y(i1)
        },
        sine: {
            In: p1,
            Out: y(p1)
        },
        step: {
            In: a,
            Out: y(a)
        }
    };
})();
var Q4 = class extends h1 {
    constructor(){
        super(o2(Q4.getDefaults(), arguments)), this._scheduledEvents = [], this._synced = !1, this._original_triggerAttack = this.triggerAttack, this._original_triggerRelease = this.triggerRelease, this._syncedRelease = (e)=>this._original_triggerRelease(e);
        let t = o2(Q4.getDefaults(), arguments);
        this._volume = this.output = new K4({
            context: this.context,
            volume: t.volume
        }), this.volume = this._volume.volume, u1(this, "volume");
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            volume: 0
        });
    }
    sync() {
        return this._syncState() && (this._syncMethod("triggerAttack", 1), this._syncMethod("triggerRelease", 0), this.context.transport.on("stop", this._syncedRelease), this.context.transport.on("pause", this._syncedRelease), this.context.transport.on("loopEnd", this._syncedRelease)), this;
    }
    _syncState() {
        let t = !1;
        return this._synced || (this._synced = !0, t = !0), t;
    }
    _syncMethod(t, e) {
        let s = this["_original_" + t] = this[t];
        this[t] = (...i1)=>{
            let r = i1[e], a = this.context.transport.schedule((c)=>{
                i1[e] = c, s.apply(this, i1);
            }, r);
            this._scheduledEvents.push(a);
        };
    }
    unsync() {
        return this._scheduledEvents.forEach((t)=>this.context.transport.clear(t)), this._scheduledEvents = [], this._synced && (this._synced = !1, this.triggerAttack = this._original_triggerAttack, this.triggerRelease = this._original_triggerRelease, this.context.transport.off("stop", this._syncedRelease), this.context.transport.off("pause", this._syncedRelease), this.context.transport.off("loopEnd", this._syncedRelease)), this;
    }
    triggerAttackRelease(t, e, s, i1) {
        let r = this.toSeconds(s), a = this.toSeconds(e);
        return this.triggerAttack(t, r, i1), this.triggerRelease(r + a), this;
    }
    dispose() {
        return super.dispose(), this._volume.dispose(), this.unsync(), this._scheduledEvents = [], this;
    }
};
var R3 = class extends Q4 {
    constructor(){
        super(o2(R3.getDefaults(), arguments));
        let t = o2(R3.getDefaults(), arguments);
        this.portamento = t.portamento, this.onsilence = t.onsilence;
    }
    static getDefaults() {
        return Object.assign(Q4.getDefaults(), {
            detune: 0,
            onsilence: _2,
            portamento: 0
        });
    }
    triggerAttack(t, e, s = 1) {
        this.log("triggerAttack", t, e, s);
        let i1 = this.toSeconds(e);
        return this._triggerEnvelopeAttack(i1, s), this.setNote(t, i1), this;
    }
    triggerRelease(t) {
        this.log("triggerRelease", t);
        let e = this.toSeconds(t);
        return this._triggerEnvelopeRelease(e), this;
    }
    setNote(t, e) {
        let s = this.toSeconds(e), i1 = t instanceof z2 ? t.toFrequency() : t;
        if (this.portamento > 0 && this.getLevelAtTime(s) > .05) {
            let r = this.toSeconds(this.portamento);
            this.frequency.exponentialRampTo(i1, r, s);
        } else this.frequency.setValueAtTime(i1, s);
        return this;
    }
};
E4([
    ct2(0)
], R3.prototype, "portamento", void 0);
var Mt2 = class extends C4 {
    constructor(){
        super(o2(Mt2.getDefaults(), arguments, [
            "attack",
            "decay",
            "sustain",
            "release"
        ])), this.name = "AmplitudeEnvelope", this._gainNode = new l1({
            context: this.context,
            gain: 0
        }), this.output = this._gainNode, this.input = this._gainNode, this._sig.connect(this._gainNode.gain), this.output = this._gainNode, this.input = this._gainNode;
    }
    dispose() {
        return super.dispose(), this._gainNode.dispose(), this;
    }
};
var mt3 = class extends R3 {
    constructor(){
        super(o2(mt3.getDefaults(), arguments)), this.name = "Synth";
        let t = o2(mt3.getDefaults(), arguments);
        this.oscillator = new ht2(Object.assign({
            context: this.context,
            detune: t.detune,
            onstop: ()=>this.onsilence(this)
        }, t.oscillator)), this.frequency = this.oscillator.frequency, this.detune = this.oscillator.detune, this.envelope = new Mt2(Object.assign({
            context: this.context
        }, t.envelope)), this.oscillator.chain(this.envelope, this.output), u1(this, [
            "oscillator",
            "frequency",
            "detune",
            "envelope"
        ]);
    }
    static getDefaults() {
        return Object.assign(R3.getDefaults(), {
            envelope: Object.assign(V2(C4.getDefaults(), Object.keys(h1.getDefaults())), {
                attack: .005,
                decay: .1,
                release: 1,
                sustain: .3
            }),
            oscillator: Object.assign(V2(ht2.getDefaults(), [
                ...Object.keys(T4.getDefaults()),
                "frequency",
                "detune"
            ]), {
                type: "triangle"
            })
        });
    }
    _triggerEnvelopeAttack(t, e) {
        if (this.envelope.triggerAttack(t, e), this.oscillator.start(t), this.envelope.sustain === 0) {
            let s = this.toSeconds(this.envelope.attack), i1 = this.toSeconds(this.envelope.decay);
            this.oscillator.stop(t + s + i1);
        }
    }
    _triggerEnvelopeRelease(t) {
        this.envelope.triggerRelease(t), this.oscillator.stop(t + this.toSeconds(this.envelope.release));
    }
    getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
    }
    dispose() {
        return super.dispose(), this.oscillator.dispose(), this.envelope.dispose(), this;
    }
};
var It2 = class extends R3 {
    constructor(){
        super(o2(It2.getDefaults(), arguments)), this.name = "ModulationSynth";
        let t = o2(It2.getDefaults(), arguments);
        this._carrier = new mt3({
            context: this.context,
            oscillator: t.oscillator,
            envelope: t.envelope,
            onsilence: ()=>this.onsilence(this),
            volume: -10
        }), this._modulator = new mt3({
            context: this.context,
            oscillator: t.modulation,
            envelope: t.modulationEnvelope,
            volume: -10
        }), this.oscillator = this._carrier.oscillator, this.envelope = this._carrier.envelope, this.modulation = this._modulator.oscillator, this.modulationEnvelope = this._modulator.envelope, this.frequency = new f({
            context: this.context,
            units: "frequency"
        }), this.detune = new f({
            context: this.context,
            value: t.detune,
            units: "cents"
        }), this.harmonicity = new b1({
            context: this.context,
            value: t.harmonicity,
            minValue: 0
        }), this._modulationNode = new l1({
            context: this.context,
            gain: 0
        }), u1(this, [
            "frequency",
            "harmonicity",
            "oscillator",
            "envelope",
            "modulation",
            "modulationEnvelope",
            "detune"
        ]);
    }
    static getDefaults() {
        return Object.assign(R3.getDefaults(), {
            harmonicity: 3,
            oscillator: Object.assign(V2(ht2.getDefaults(), [
                ...Object.keys(T4.getDefaults()),
                "frequency",
                "detune"
            ]), {
                type: "sine"
            }),
            envelope: Object.assign(V2(C4.getDefaults(), Object.keys(h1.getDefaults())), {
                attack: .01,
                decay: .01,
                sustain: 1,
                release: .5
            }),
            modulation: Object.assign(V2(ht2.getDefaults(), [
                ...Object.keys(T4.getDefaults()),
                "frequency",
                "detune"
            ]), {
                type: "square"
            }),
            modulationEnvelope: Object.assign(V2(C4.getDefaults(), Object.keys(h1.getDefaults())), {
                attack: .5,
                decay: 0,
                sustain: 1,
                release: .5
            })
        });
    }
    _triggerEnvelopeAttack(t, e) {
        this._carrier._triggerEnvelopeAttack(t, e), this._modulator._triggerEnvelopeAttack(t, e);
    }
    _triggerEnvelopeRelease(t) {
        return this._carrier._triggerEnvelopeRelease(t), this._modulator._triggerEnvelopeRelease(t), this;
    }
    getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
    }
    dispose() {
        return super.dispose(), this._carrier.dispose(), this._modulator.dispose(), this.frequency.dispose(), this.detune.dispose(), this.harmonicity.dispose(), this._modulationNode.dispose(), this;
    }
};
var Ks1 = class extends It2 {
    constructor(){
        super(o2(Ks1.getDefaults(), arguments)), this.name = "AMSynth", this._modulationScale = new ne2({
            context: this.context
        }), this.frequency.connect(this._carrier.frequency), this.frequency.chain(this.harmonicity, this._modulator.frequency), this.detune.fan(this._carrier.detune, this._modulator.detune), this._modulator.chain(this._modulationScale, this._modulationNode.gain), this._carrier.chain(this._modulationNode, this.output);
    }
    dispose() {
        return super.dispose(), this._modulationScale.dispose(), this;
    }
};
var ue3 = class extends h1 {
    constructor(){
        super(o2(ue3.getDefaults(), arguments, [
            "frequency",
            "type"
        ])), this.name = "BiquadFilter";
        let t = o2(ue3.getDefaults(), arguments, [
            "frequency",
            "type"
        ]);
        this._filter = this.context.createBiquadFilter(), this.input = this.output = this._filter, this.Q = new d2({
            context: this.context,
            units: "number",
            value: t.Q,
            param: this._filter.Q
        }), this.frequency = new d2({
            context: this.context,
            units: "frequency",
            value: t.frequency,
            param: this._filter.frequency
        }), this.detune = new d2({
            context: this.context,
            units: "cents",
            value: t.detune,
            param: this._filter.detune
        }), this.gain = new d2({
            context: this.context,
            units: "decibels",
            convert: !1,
            value: t.gain,
            param: this._filter.gain
        }), this.type = t.type;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            Q: 1,
            type: "lowpass",
            frequency: 350,
            detune: 0,
            gain: 0
        });
    }
    get type() {
        return this._filter.type;
    }
    set type(t) {
        m3([
            "lowpass",
            "highpass",
            "bandpass",
            "lowshelf",
            "highshelf",
            "notch",
            "allpass",
            "peaking"
        ].indexOf(t) !== -1, `Invalid filter type: ${t}`), this._filter.type = t;
    }
    getFrequencyResponse(t = 128) {
        let e = new Float32Array(t);
        for(let a = 0; a < t; a++){
            let p1 = Math.pow(a / t, 2) * (2e4 - 20) + 20;
            e[a] = p1;
        }
        let s = new Float32Array(t), i1 = new Float32Array(t), r = this.context.createBiquadFilter();
        return r.type = this.type, r.Q.value = this.Q.value, r.frequency.value = this.frequency.value, r.gain.value = this.gain.value, r.getFrequencyResponse(e, s, i1), s;
    }
    dispose() {
        return super.dispose(), this._filter.disconnect(), this.Q.dispose(), this.frequency.dispose(), this.gain.dispose(), this.detune.dispose(), this;
    }
};
var $1 = class extends h1 {
    constructor(){
        super(o2($1.getDefaults(), arguments, [
            "frequency",
            "type",
            "rolloff"
        ])), this.name = "Filter", this.input = new l1({
            context: this.context
        }), this.output = new l1({
            context: this.context
        }), this._filters = [];
        let t = o2($1.getDefaults(), arguments, [
            "frequency",
            "type",
            "rolloff"
        ]);
        this._filters = [], this.Q = new f({
            context: this.context,
            units: "positive",
            value: t.Q
        }), this.frequency = new f({
            context: this.context,
            units: "frequency",
            value: t.frequency
        }), this.detune = new f({
            context: this.context,
            units: "cents",
            value: t.detune
        }), this.gain = new f({
            context: this.context,
            units: "decibels",
            convert: !1,
            value: t.gain
        }), this._type = t.type, this.rolloff = t.rolloff, u1(this, [
            "detune",
            "frequency",
            "gain",
            "Q"
        ]);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            Q: 1,
            detune: 0,
            frequency: 350,
            gain: 0,
            rolloff: -12,
            type: "lowpass"
        });
    }
    get type() {
        return this._type;
    }
    set type(t) {
        m3([
            "lowpass",
            "highpass",
            "bandpass",
            "lowshelf",
            "highshelf",
            "notch",
            "allpass",
            "peaking"
        ].indexOf(t) !== -1, `Invalid filter type: ${t}`), this._type = t, this._filters.forEach((s)=>s.type = t);
    }
    get rolloff() {
        return this._rolloff;
    }
    set rolloff(t) {
        let e = W1(t) ? t : parseInt(t, 10), s = [
            -12,
            -24,
            -48,
            -96
        ], i1 = s.indexOf(e);
        m3(i1 !== -1, `rolloff can only be ${s.join(", ")}`), i1 += 1, this._rolloff = e, this.input.disconnect(), this._filters.forEach((r)=>r.disconnect()), this._filters = new Array(i1);
        for(let r = 0; r < i1; r++){
            let a = new ue3({
                context: this.context
            });
            a.type = this._type, this.frequency.connect(a.frequency), this.detune.connect(a.detune), this.Q.connect(a.Q), this.gain.connect(a.gain), this._filters[r] = a;
        }
        this._internalChannels = this._filters, U1(this.input, ...this._internalChannels, this.output);
    }
    getFrequencyResponse(t = 128) {
        let e = new ue3({
            frequency: this.frequency.value,
            gain: this.gain.value,
            Q: this.Q.value,
            type: this._type,
            detune: this.detune.value
        }), s = new Float32Array(t).map(()=>1);
        return this._filters.forEach(()=>{
            e.getFrequencyResponse(t).forEach((r, a)=>s[a] *= r);
        }), e.dispose(), s;
    }
    dispose() {
        return super.dispose(), this._filters.forEach((t)=>{
            t.dispose();
        }), Gt2(this, [
            "detune",
            "frequency",
            "gain",
            "Q"
        ]), this.frequency.dispose(), this.Q.dispose(), this.detune.dispose(), this.gain.dispose(), this;
    }
};
var le3 = class extends C4 {
    constructor(){
        super(o2(le3.getDefaults(), arguments, [
            "attack",
            "decay",
            "sustain",
            "release"
        ])), this.name = "FrequencyEnvelope";
        let t = o2(le3.getDefaults(), arguments, [
            "attack",
            "decay",
            "sustain",
            "release"
        ]);
        this._octaves = t.octaves, this._baseFrequency = this.toFrequency(t.baseFrequency), this._exponent = this.input = new kt1({
            context: this.context,
            value: t.exponent
        }), this._scale = this.output = new st2({
            context: this.context,
            min: this._baseFrequency,
            max: this._baseFrequency * Math.pow(2, this._octaves)
        }), this._sig.chain(this._exponent, this._scale);
    }
    static getDefaults() {
        return Object.assign(C4.getDefaults(), {
            baseFrequency: 200,
            exponent: 1,
            octaves: 4
        });
    }
    get baseFrequency() {
        return this._baseFrequency;
    }
    set baseFrequency(t) {
        let e = this.toFrequency(t);
        q2(e, 0), this._baseFrequency = e, this._scale.min = this._baseFrequency, this.octaves = this._octaves;
    }
    get octaves() {
        return this._octaves;
    }
    set octaves(t) {
        this._octaves = t, this._scale.max = this._baseFrequency * Math.pow(2, t);
    }
    get exponent() {
        return this._exponent.value;
    }
    set exponent(t) {
        this._exponent.value = t;
    }
    dispose() {
        return super.dispose(), this._exponent.dispose(), this._scale.dispose(), this;
    }
};
var jt2 = class extends R3 {
    constructor(){
        super(o2(jt2.getDefaults(), arguments)), this.name = "MonoSynth";
        let t = o2(jt2.getDefaults(), arguments);
        this.oscillator = new ht2(Object.assign(t.oscillator, {
            context: this.context,
            detune: t.detune,
            onstop: ()=>this.onsilence(this)
        })), this.frequency = this.oscillator.frequency, this.detune = this.oscillator.detune, this.filter = new $1(Object.assign(t.filter, {
            context: this.context
        })), this.filterEnvelope = new le3(Object.assign(t.filterEnvelope, {
            context: this.context
        })), this.envelope = new Mt2(Object.assign(t.envelope, {
            context: this.context
        })), this.oscillator.chain(this.filter, this.envelope, this.output), this.filterEnvelope.connect(this.filter.frequency), u1(this, [
            "oscillator",
            "frequency",
            "detune",
            "filter",
            "filterEnvelope",
            "envelope"
        ]);
    }
    static getDefaults() {
        return Object.assign(R3.getDefaults(), {
            envelope: Object.assign(V2(C4.getDefaults(), Object.keys(h1.getDefaults())), {
                attack: .005,
                decay: .1,
                release: 1,
                sustain: .9
            }),
            filter: Object.assign(V2($1.getDefaults(), Object.keys(h1.getDefaults())), {
                Q: 1,
                rolloff: -12,
                type: "lowpass"
            }),
            filterEnvelope: Object.assign(V2(le3.getDefaults(), Object.keys(h1.getDefaults())), {
                attack: .6,
                baseFrequency: 200,
                decay: .2,
                exponent: 2,
                octaves: 3,
                release: 2,
                sustain: .5
            }),
            oscillator: Object.assign(V2(ht2.getDefaults(), Object.keys(T4.getDefaults())), {
                type: "sawtooth"
            })
        });
    }
    _triggerEnvelopeAttack(t, e = 1) {
        if (this.envelope.triggerAttack(t, e), this.filterEnvelope.triggerAttack(t), this.oscillator.start(t), this.envelope.sustain === 0) {
            let s = this.toSeconds(this.envelope.attack), i1 = this.toSeconds(this.envelope.decay);
            this.oscillator.stop(t + s + i1);
        }
    }
    _triggerEnvelopeRelease(t) {
        this.envelope.triggerRelease(t), this.filterEnvelope.triggerRelease(t), this.oscillator.stop(t + this.toSeconds(this.envelope.release));
    }
    getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
    }
    dispose() {
        return super.dispose(), this.oscillator.dispose(), this.envelope.dispose(), this.filterEnvelope.dispose(), this.filter.dispose(), this;
    }
};
var es1 = class extends R3 {
    constructor(){
        super(o2(es1.getDefaults(), arguments)), this.name = "DuoSynth";
        let t = o2(es1.getDefaults(), arguments);
        this.voice0 = new jt2(Object.assign(t.voice0, {
            context: this.context,
            onsilence: ()=>this.onsilence(this)
        })), this.voice1 = new jt2(Object.assign(t.voice1, {
            context: this.context
        })), this.harmonicity = new b1({
            context: this.context,
            units: "positive",
            value: t.harmonicity
        }), this._vibrato = new I1({
            frequency: t.vibratoRate,
            context: this.context,
            min: -50,
            max: 50
        }), this._vibrato.start(), this.vibratoRate = this._vibrato.frequency, this._vibratoGain = new l1({
            context: this.context,
            units: "normalRange",
            gain: t.vibratoAmount
        }), this.vibratoAmount = this._vibratoGain.gain, this.frequency = new f({
            context: this.context,
            units: "frequency",
            value: 440
        }), this.detune = new f({
            context: this.context,
            units: "cents",
            value: t.detune
        }), this.frequency.connect(this.voice0.frequency), this.frequency.chain(this.harmonicity, this.voice1.frequency), this._vibrato.connect(this._vibratoGain), this._vibratoGain.fan(this.voice0.detune, this.voice1.detune), this.detune.fan(this.voice0.detune, this.voice1.detune), this.voice0.connect(this.output), this.voice1.connect(this.output), u1(this, [
            "voice0",
            "voice1",
            "frequency",
            "vibratoAmount",
            "vibratoRate"
        ]);
    }
    getLevelAtTime(t) {
        return t = this.toSeconds(t), this.voice0.envelope.getValueAtTime(t) + this.voice1.envelope.getValueAtTime(t);
    }
    static getDefaults() {
        return J2(R3.getDefaults(), {
            vibratoAmount: .5,
            vibratoRate: 5,
            harmonicity: 1.5,
            voice0: J2(V2(jt2.getDefaults(), Object.keys(R3.getDefaults())), {
                filterEnvelope: {
                    attack: .01,
                    decay: 0,
                    sustain: 1,
                    release: .5
                },
                envelope: {
                    attack: .01,
                    decay: 0,
                    sustain: 1,
                    release: .5
                }
            }),
            voice1: J2(V2(jt2.getDefaults(), Object.keys(R3.getDefaults())), {
                filterEnvelope: {
                    attack: .01,
                    decay: 0,
                    sustain: 1,
                    release: .5
                },
                envelope: {
                    attack: .01,
                    decay: 0,
                    sustain: 1,
                    release: .5
                }
            })
        });
    }
    _triggerEnvelopeAttack(t, e) {
        this.voice0._triggerEnvelopeAttack(t, e), this.voice1._triggerEnvelopeAttack(t, e);
    }
    _triggerEnvelopeRelease(t) {
        return this.voice0._triggerEnvelopeRelease(t), this.voice1._triggerEnvelopeRelease(t), this;
    }
    dispose() {
        return super.dispose(), this.voice0.dispose(), this.voice1.dispose(), this.frequency.dispose(), this.detune.dispose(), this._vibrato.dispose(), this.vibratoRate.dispose(), this._vibratoGain.dispose(), this.harmonicity.dispose(), this;
    }
};
var ss1 = class extends It2 {
    constructor(){
        super(o2(ss1.getDefaults(), arguments)), this.name = "FMSynth";
        let t = o2(ss1.getDefaults(), arguments);
        this.modulationIndex = new b1({
            context: this.context,
            value: t.modulationIndex
        }), this.frequency.connect(this._carrier.frequency), this.frequency.chain(this.harmonicity, this._modulator.frequency), this.frequency.chain(this.modulationIndex, this._modulationNode), this.detune.fan(this._carrier.detune, this._modulator.detune), this._modulator.connect(this._modulationNode.gain), this._modulationNode.connect(this._carrier.frequency), this._carrier.connect(this.output);
    }
    static getDefaults() {
        return Object.assign(It2.getDefaults(), {
            modulationIndex: 10
        });
    }
    dispose() {
        return super.dispose(), this.modulationIndex.dispose(), this;
    }
};
var Wi1 = [
    1,
    1.483,
    1.932,
    2.546,
    2.63,
    3.897
], is1 = class extends R3 {
    constructor(){
        super(o2(is1.getDefaults(), arguments)), this.name = "MetalSynth", this._oscillators = [], this._freqMultipliers = [];
        let t = o2(is1.getDefaults(), arguments);
        this.detune = new f({
            context: this.context,
            units: "cents",
            value: t.detune
        }), this.frequency = new f({
            context: this.context,
            units: "frequency"
        }), this._amplitude = new l1({
            context: this.context,
            gain: 0
        }).connect(this.output), this._highpass = new $1({
            Q: 0,
            context: this.context,
            type: "highpass"
        }).connect(this._amplitude);
        for(let e = 0; e < Wi1.length; e++){
            let s = new Ct2({
                context: this.context,
                harmonicity: t.harmonicity,
                modulationIndex: t.modulationIndex,
                modulationType: "square",
                onstop: e === 0 ? ()=>this.onsilence(this) : _2,
                type: "square"
            });
            s.connect(this._highpass), this._oscillators[e] = s;
            let i1 = new b1({
                context: this.context,
                value: Wi1[e]
            });
            this._freqMultipliers[e] = i1, this.frequency.chain(i1, s.frequency), this.detune.connect(s.detune);
        }
        this._filterFreqScaler = new st2({
            context: this.context,
            max: 7e3,
            min: this.toFrequency(t.resonance)
        }), this.envelope = new C4({
            attack: t.envelope.attack,
            attackCurve: "linear",
            context: this.context,
            decay: t.envelope.decay,
            release: t.envelope.release,
            sustain: 0
        }), this.envelope.chain(this._filterFreqScaler, this._highpass.frequency), this.envelope.connect(this._amplitude.gain), this._octaves = t.octaves, this.octaves = t.octaves;
    }
    static getDefaults() {
        return J2(R3.getDefaults(), {
            envelope: Object.assign(V2(C4.getDefaults(), Object.keys(h1.getDefaults())), {
                attack: .001,
                decay: 1.4,
                release: .2
            }),
            harmonicity: 5.1,
            modulationIndex: 32,
            octaves: 1.5,
            resonance: 4e3
        });
    }
    _triggerEnvelopeAttack(t, e = 1) {
        return this.envelope.triggerAttack(t, e), this._oscillators.forEach((s)=>s.start(t)), this.envelope.sustain === 0 && this._oscillators.forEach((s)=>{
            s.stop(t + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));
        }), this;
    }
    _triggerEnvelopeRelease(t) {
        return this.envelope.triggerRelease(t), this._oscillators.forEach((e)=>e.stop(t + this.toSeconds(this.envelope.release))), this;
    }
    getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
    }
    get modulationIndex() {
        return this._oscillators[0].modulationIndex.value;
    }
    set modulationIndex(t) {
        this._oscillators.forEach((e)=>e.modulationIndex.value = t);
    }
    get harmonicity() {
        return this._oscillators[0].harmonicity.value;
    }
    set harmonicity(t) {
        this._oscillators.forEach((e)=>e.harmonicity.value = t);
    }
    get resonance() {
        return this._filterFreqScaler.min;
    }
    set resonance(t) {
        this._filterFreqScaler.min = this.toFrequency(t), this.octaves = this._octaves;
    }
    get octaves() {
        return this._octaves;
    }
    set octaves(t) {
        this._octaves = t, this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, t);
    }
    dispose() {
        return super.dispose(), this._oscillators.forEach((t)=>t.dispose()), this._freqMultipliers.forEach((t)=>t.dispose()), this.frequency.dispose(), this.detune.dispose(), this._filterFreqScaler.dispose(), this._amplitude.dispose(), this.envelope.dispose(), this._highpass.dispose(), this;
    }
};
var Re2 = class extends mt3 {
    constructor(){
        super(o2(Re2.getDefaults(), arguments)), this.name = "MembraneSynth", this.portamento = 0;
        let t = o2(Re2.getDefaults(), arguments);
        this.pitchDecay = t.pitchDecay, this.octaves = t.octaves, u1(this, [
            "oscillator",
            "envelope"
        ]);
    }
    static getDefaults() {
        return J2(R3.getDefaults(), mt3.getDefaults(), {
            envelope: {
                attack: .001,
                attackCurve: "exponential",
                decay: .4,
                release: 1.4,
                sustain: .01
            },
            octaves: 10,
            oscillator: {
                type: "sine"
            },
            pitchDecay: .05
        });
    }
    setNote(t, e) {
        let s = this.toSeconds(e), i1 = this.toFrequency(t instanceof z2 ? t.toFrequency() : t), r = i1 * this.octaves;
        return this.oscillator.frequency.setValueAtTime(r, s), this.oscillator.frequency.exponentialRampToValueAtTime(i1, s + this.toSeconds(this.pitchDecay)), this;
    }
    dispose() {
        return super.dispose(), this;
    }
};
E4([
    Hs1(0)
], Re2.prototype, "octaves", void 0);
E4([
    ct2(0)
], Re2.prototype, "pitchDecay", void 0);
var os1 = class extends Q4 {
    constructor(){
        super(o2(os1.getDefaults(), arguments)), this.name = "NoiseSynth";
        let t = o2(os1.getDefaults(), arguments);
        this.noise = new pt2(Object.assign({
            context: this.context
        }, t.noise)), this.envelope = new Mt2(Object.assign({
            context: this.context
        }, t.envelope)), this.noise.chain(this.envelope, this.output);
    }
    static getDefaults() {
        return Object.assign(Q4.getDefaults(), {
            envelope: Object.assign(V2(C4.getDefaults(), Object.keys(h1.getDefaults())), {
                decay: .1,
                sustain: 0
            }),
            noise: Object.assign(V2(pt2.getDefaults(), Object.keys(T4.getDefaults())), {
                type: "white"
            })
        });
    }
    triggerAttack(t, e = 1) {
        return t = this.toSeconds(t), this.envelope.triggerAttack(t, e), this.noise.start(t), this.envelope.sustain === 0 && this.noise.stop(t + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay)), this;
    }
    triggerRelease(t) {
        return t = this.toSeconds(t), this.envelope.triggerRelease(t), this.noise.stop(t + this.toSeconds(this.envelope.release)), this;
    }
    sync() {
        return this._syncState() && (this._syncMethod("triggerAttack", 0), this._syncMethod("triggerRelease", 0)), this;
    }
    triggerAttackRelease(t, e, s = 1) {
        return e = this.toSeconds(e), t = this.toSeconds(t), this.triggerAttack(e, s), this.triggerRelease(e + t), this;
    }
    dispose() {
        return super.dispose(), this.noise.dispose(), this.envelope.dispose(), this;
    }
};
var mi1 = new Set;
function Ue2(n) {
    mi1.add(n);
}
function ti1(n, t) {
    let e = `registerProcessor("${n}", ${t})`;
    mi1.add(e);
}
function Bi1() {
    return Array.from(mi1).join(`
`);
}
var Fe1 = class extends h1 {
    constructor(t){
        super(t), this.name = "ToneAudioWorklet", this.workletOptions = {}, this.onprocessorerror = _2;
        let e = URL.createObjectURL(new Blob([
            Bi1()
        ], {
            type: "text/javascript"
        })), s = this._audioWorkletName();
        this._dummyGain = this.context.createGain(), this._dummyParam = this._dummyGain.gain, this.context.addAudioWorkletModule(e).then(()=>{
            this.disposed || (this._worklet = this.context.createAudioWorkletNode(s, this.workletOptions), this._worklet.onprocessorerror = this.onprocessorerror.bind(this), this.onReady(this._worklet));
        });
    }
    dispose() {
        return super.dispose(), this._dummyGain.disconnect(), this._worklet && (this._worklet.port.postMessage("dispose"), this._worklet.disconnect()), this;
    }
};
var Oo1 = `
	/**
	 * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. 
	 */
	class ToneAudioWorkletProcessor extends AudioWorkletProcessor {

		constructor(options) {
			
			super(options);
			/**
			 * If the processor was disposed or not. Keep alive until it's disposed.
			 */
			this.disposed = false;
		   	/** 
			 * The number of samples in the processing block
			 */
			this.blockSize = 128;
			/**
			 * the sample rate
			 */
			this.sampleRate = sampleRate;

			this.port.onmessage = (event) => {
				// when it receives a dispose 
				if (event.data === "dispose") {
					this.disposed = true;
				}
			};
		}
	}
`;
Ue2(Oo1);
var qo1 = `
	/**
	 * Abstract class for a single input/output processor. 
	 * has a 'generate' function which processes one sample at a time
	 */
	class SingleIOProcessor extends ToneAudioWorkletProcessor {

		constructor(options) {
			super(Object.assign(options, {
				numberOfInputs: 1,
				numberOfOutputs: 1
			}));
			/**
			 * Holds the name of the parameter and a single value of that
			 * parameter at the current sample
			 * @type { [name: string]: number }
			 */
			this.params = {}
		}

		/**
		 * Generate an output sample from the input sample and parameters
		 * @abstract
		 * @param input number
		 * @param channel number
		 * @param parameters { [name: string]: number }
		 * @returns number
		 */
		generate(){}

		/**
		 * Update the private params object with the 
		 * values of the parameters at the given index
		 * @param parameters { [name: string]: Float32Array },
		 * @param index number
		 */
		updateParams(parameters, index) {
			for (const paramName in parameters) {
				const param = parameters[paramName];
				if (param.length > 1) {
					this.params[paramName] = parameters[paramName][index];
				} else {
					this.params[paramName] = parameters[paramName][0];
				}
			}
		}

		/**
		 * Process a single frame of the audio
		 * @param inputs Float32Array[][]
		 * @param outputs Float32Array[][]
		 */
		process(inputs, outputs, parameters) {
			const input = inputs[0];
			const output = outputs[0];
			// get the parameter values
			const channelCount = Math.max(input && input.length || 0, output.length);
			for (let sample = 0; sample < this.blockSize; sample++) {
				this.updateParams(parameters, sample);
				for (let channel = 0; channel < channelCount; channel++) {
					const inputSample = input && input.length ? input[channel][sample] : 0;
					output[channel][sample] = this.generate(inputSample, channel, this.params);
				}
			}
			return !this.disposed;
		}
	};
`;
Ue2(qo1);
var Ro1 = `
	/**
	 * A multichannel buffer for use within an AudioWorkletProcessor as a delay line
	 */
	class DelayLine {
		
		constructor(size, channels) {
			this.buffer = [];
			this.writeHead = []
			this.size = size;

			// create the empty channels
			for (let i = 0; i < channels; i++) {
				this.buffer[i] = new Float32Array(this.size);
				this.writeHead[i] = 0;
			}
		}

		/**
		 * Push a value onto the end
		 * @param channel number
		 * @param value number
		 */
		push(channel, value) {
			this.writeHead[channel] += 1;
			if (this.writeHead[channel] > this.size) {
				this.writeHead[channel] = 0;
			}
			this.buffer[channel][this.writeHead[channel]] = value;
		}

		/**
		 * Get the recorded value of the channel given the delay
		 * @param channel number
		 * @param delay number delay samples
		 */
		get(channel, delay) {
			let readHead = this.writeHead[channel] - Math.floor(delay);
			if (readHead < 0) {
				readHead += this.size;
			}
			return this.buffer[channel][readHead];
		}
	}
`;
Ue2(Ro1);
var fi1 = "feedback-comb-filter", Fo1 = `
	class FeedbackCombFilterWorklet extends SingleIOProcessor {

		constructor(options) {
			super(options);
			this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);
		}

		static get parameterDescriptors() {
			return [{
				name: "delayTime",
				defaultValue: 0.1,
				minValue: 0,
				maxValue: 1,
				automationRate: "k-rate"
			}, {
				name: "feedback",
				defaultValue: 0.5,
				minValue: 0,
				maxValue: 0.9999,
				automationRate: "k-rate"
			}];
		}

		generate(input, channel, parameters) {
			const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);
			this.delayLine.push(channel, input + delayedSample * parameters.feedback);
			return delayedSample;
		}
	}
`;
ti1(fi1, Fo1);
var Ht2 = class extends Fe1 {
    constructor(){
        super(o2(Ht2.getDefaults(), arguments, [
            "delayTime",
            "resonance"
        ])), this.name = "FeedbackCombFilter";
        let t = o2(Ht2.getDefaults(), arguments, [
            "delayTime",
            "resonance"
        ]);
        this.input = new l1({
            context: this.context
        }), this.output = new l1({
            context: this.context
        }), this.delayTime = new d2({
            context: this.context,
            value: t.delayTime,
            units: "time",
            minValue: 0,
            maxValue: 1,
            param: this._dummyParam,
            swappable: !0
        }), this.resonance = new d2({
            context: this.context,
            value: t.resonance,
            units: "normalRange",
            param: this._dummyParam,
            swappable: !0
        }), u1(this, [
            "resonance",
            "delayTime"
        ]);
    }
    _audioWorkletName() {
        return fi1;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            delayTime: .1,
            resonance: .5
        });
    }
    onReady(t) {
        U1(this.input, t, this.output);
        let e = t.parameters.get("delayTime");
        this.delayTime.setParam(e);
        let s = t.parameters.get("feedback");
        this.resonance.setParam(s);
    }
    dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this.delayTime.dispose(), this.resonance.dispose(), this;
    }
};
var Xt2 = class extends h1 {
    constructor(){
        super(o2(Xt2.getDefaults(), arguments, [
            "frequency",
            "type"
        ])), this.name = "OnePoleFilter";
        let t = o2(Xt2.getDefaults(), arguments, [
            "frequency",
            "type"
        ]);
        this._frequency = t.frequency, this._type = t.type, this.input = new l1({
            context: this.context
        }), this.output = new l1({
            context: this.context
        }), this._createFilter();
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            frequency: 880,
            type: "lowpass"
        });
    }
    _createFilter() {
        let t = this._filter, e = this.toFrequency(this._frequency), s = 1 / (2 * Math.PI * e);
        if (this._type === "lowpass") {
            let i1 = 1 / (s * this.context.sampleRate), r = i1 - 1;
            this._filter = this.context.createIIRFilter([
                i1,
                0
            ], [
                1,
                r
            ]);
        } else {
            let i11 = 1 / (s * this.context.sampleRate) - 1;
            this._filter = this.context.createIIRFilter([
                1,
                -1
            ], [
                1,
                i11
            ]);
        }
        this.input.chain(this._filter, this.output), t && this.context.setTimeout(()=>{
            this.disposed || (this.input.disconnect(t), t.disconnect());
        }, this.blockTime);
    }
    get frequency() {
        return this._frequency;
    }
    set frequency(t) {
        this._frequency = t, this._createFilter();
    }
    get type() {
        return this._type;
    }
    set type(t) {
        this._type = t, this._createFilter();
    }
    getFrequencyResponse(t = 128) {
        let e = new Float32Array(t);
        for(let r = 0; r < t; r++){
            let c = Math.pow(r / t, 2) * (2e4 - 20) + 20;
            e[r] = c;
        }
        let s = new Float32Array(t), i1 = new Float32Array(t);
        return this._filter.getFrequencyResponse(e, s, i1), s;
    }
    dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this._filter.disconnect(), this;
    }
};
var Yt2 = class extends h1 {
    constructor(){
        super(o2(Yt2.getDefaults(), arguments, [
            "delayTime",
            "resonance",
            "dampening"
        ])), this.name = "LowpassCombFilter";
        let t = o2(Yt2.getDefaults(), arguments, [
            "delayTime",
            "resonance",
            "dampening"
        ]);
        this._combFilter = this.output = new Ht2({
            context: this.context,
            delayTime: t.delayTime,
            resonance: t.resonance
        }), this.delayTime = this._combFilter.delayTime, this.resonance = this._combFilter.resonance, this._lowpass = this.input = new Xt2({
            context: this.context,
            frequency: t.dampening,
            type: "lowpass"
        }), this._lowpass.connect(this._combFilter);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            dampening: 3e3,
            delayTime: .1,
            resonance: .5
        });
    }
    get dampening() {
        return this._lowpass.frequency;
    }
    set dampening(t) {
        this._lowpass.frequency = t;
    }
    dispose() {
        return super.dispose(), this._combFilter.dispose(), this._lowpass.dispose(), this;
    }
};
var rs1 = class extends Q4 {
    constructor(){
        super(o2(rs1.getDefaults(), arguments)), this.name = "PluckSynth";
        let t = o2(rs1.getDefaults(), arguments);
        this._noise = new pt2({
            context: this.context,
            type: "pink"
        }), this.attackNoise = t.attackNoise, this._lfcf = new Yt2({
            context: this.context,
            dampening: t.dampening,
            resonance: t.resonance
        }), this.resonance = t.resonance, this.release = t.release, this._noise.connect(this._lfcf), this._lfcf.connect(this.output);
    }
    static getDefaults() {
        return J2(Q4.getDefaults(), {
            attackNoise: 1,
            dampening: 4e3,
            resonance: .7,
            release: 1
        });
    }
    get dampening() {
        return this._lfcf.dampening;
    }
    set dampening(t) {
        this._lfcf.dampening = t;
    }
    triggerAttack(t, e) {
        let s = this.toFrequency(t);
        e = this.toSeconds(e);
        let i1 = 1 / s;
        return this._lfcf.delayTime.setValueAtTime(i1, e), this._noise.start(e), this._noise.stop(e + i1 * this.attackNoise), this._lfcf.resonance.cancelScheduledValues(e), this._lfcf.resonance.setValueAtTime(this.resonance, e), this;
    }
    triggerRelease(t) {
        return this._lfcf.resonance.linearRampTo(0, this.release, t), this;
    }
    dispose() {
        return super.dispose(), this._noise.dispose(), this._lfcf.dispose(), this;
    }
};
var ns1 = class extends Q4 {
    constructor(){
        super(o2(ns1.getDefaults(), arguments, [
            "voice",
            "options"
        ])), this.name = "PolySynth", this._availableVoices = [], this._activeVoices = [], this._voices = [], this._gcTimeout = -1, this._averageActiveVoices = 0, this._syncedRelease = (i1)=>this.releaseAll(i1);
        let t = o2(ns1.getDefaults(), arguments, [
            "voice",
            "options"
        ]);
        m3(!W1(t.voice), "DEPRECATED: The polyphony count is no longer the first argument.");
        let e = t.voice.getDefaults();
        this.options = Object.assign(e, t.options), this.voice = t.voice, this.maxPolyphony = t.maxPolyphony, this._dummyVoice = this._getNextAvailableVoice();
        let s = this._voices.indexOf(this._dummyVoice);
        this._voices.splice(s, 1), this._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);
    }
    static getDefaults() {
        return Object.assign(Q4.getDefaults(), {
            maxPolyphony: 32,
            options: {},
            voice: mt3
        });
    }
    get activeVoices() {
        return this._activeVoices.length;
    }
    _makeVoiceAvailable(t) {
        this._availableVoices.push(t);
        let e = this._activeVoices.findIndex((s)=>s.voice === t);
        this._activeVoices.splice(e, 1);
    }
    _getNextAvailableVoice() {
        if (this._availableVoices.length) return this._availableVoices.shift();
        if (this._voices.length < this.maxPolyphony) {
            let t = new this.voice(Object.assign(this.options, {
                context: this.context,
                onsilence: this._makeVoiceAvailable.bind(this)
            }));
            return m3(t instanceof R3, "Voice must extend Monophonic class"), t.connect(this.output), this._voices.push(t), t;
        } else Nt2("Max polyphony exceeded. Note dropped.");
    }
    _collectGarbage() {
        if (this._averageActiveVoices = Math.max(this._averageActiveVoices * .95, this.activeVoices), this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {
            let t = this._availableVoices.shift(), e = this._voices.indexOf(t);
            this._voices.splice(e, 1), this.context.isOffline || t.dispose();
        }
    }
    _triggerAttack(t, e, s) {
        t.forEach((i1)=>{
            let r = new re1(this.context, i1).toMidi(), a = this._getNextAvailableVoice();
            a && (a.triggerAttack(i1, e, s), this._activeVoices.push({
                midi: r,
                voice: a,
                released: !1
            }), this.log("triggerAttack", i1, e));
        });
    }
    _triggerRelease(t, e) {
        t.forEach((s)=>{
            let i1 = new re1(this.context, s).toMidi(), r = this._activeVoices.find(({ midi: a , released: c  })=>a === i1 && !c);
            r && (r.voice.triggerRelease(e), r.released = !0, this.log("triggerRelease", s, e));
        });
    }
    _scheduleEvent(t, e, s, i1) {
        m3(!this.disposed, "Synth was already disposed"), s <= this.now() ? t === "attack" ? this._triggerAttack(e, s, i1) : this._triggerRelease(e, s) : this.context.setTimeout(()=>{
            this.disposed || this._scheduleEvent(t, e, s, i1);
        }, s - this.now());
    }
    triggerAttack(t, e, s) {
        Array.isArray(t) || (t = [
            t
        ]);
        let i1 = this.toSeconds(e);
        return this._scheduleEvent("attack", t, i1, s), this;
    }
    triggerRelease(t, e) {
        Array.isArray(t) || (t = [
            t
        ]);
        let s = this.toSeconds(e);
        return this._scheduleEvent("release", t, s), this;
    }
    triggerAttackRelease(t, e, s, i1) {
        let r = this.toSeconds(s);
        if (this.triggerAttack(t, r, i1), F2(e)) {
            m3(F2(t), "If the duration is an array, the notes must also be an array"), t = t;
            for(let a = 0; a < t.length; a++){
                let c = e[Math.min(a, e.length - 1)], p1 = this.toSeconds(c);
                m3(p1 > 0, "The duration must be greater than 0"), this.triggerRelease(t[a], r + p1);
            }
        } else {
            let a1 = this.toSeconds(e);
            m3(a1 > 0, "The duration must be greater than 0"), this.triggerRelease(t, r + a1);
        }
        return this;
    }
    sync() {
        return this._syncState() && (this._syncMethod("triggerAttack", 1), this._syncMethod("triggerRelease", 1), this.context.transport.on("stop", this._syncedRelease), this.context.transport.on("pause", this._syncedRelease), this.context.transport.on("loopEnd", this._syncedRelease)), this;
    }
    set(t) {
        let e = V2(t, [
            "onsilence",
            "context"
        ]);
        return this.options = J2(this.options, e), this._voices.forEach((s)=>s.set(e)), this._dummyVoice.set(e), this;
    }
    get() {
        return this._dummyVoice.get();
    }
    releaseAll(t) {
        let e = this.toSeconds(t);
        return this._activeVoices.forEach(({ voice: s  })=>{
            s.triggerRelease(e);
        }), this;
    }
    dispose() {
        return super.dispose(), this._dummyVoice.dispose(), this._voices.forEach((t)=>t.dispose()), this._activeVoices = [], this._availableVoices = [], this.context.clearInterval(this._gcTimeout), this;
    }
};
var Ee2 = class extends Q4 {
    constructor(){
        super(o2(Ee2.getDefaults(), arguments, [
            "urls",
            "onload",
            "baseUrl"
        ], "urls")), this.name = "Sampler", this._activeSources = new Map;
        let t = o2(Ee2.getDefaults(), arguments, [
            "urls",
            "onload",
            "baseUrl"
        ], "urls"), e = {};
        Object.keys(t.urls).forEach((s)=>{
            let i1 = parseInt(s, 10);
            if (m3(He1(s) || W1(i1) && isFinite(i1), `url key is neither a note or midi pitch: ${s}`), He1(s)) {
                let r = new z2(this.context, s).toMidi();
                e[r] = t.urls[s];
            } else W1(i1) && isFinite(i1) && (e[i1] = t.urls[i1]);
        }), this._buffers = new Et2({
            urls: e,
            onload: t.onload,
            baseUrl: t.baseUrl,
            onerror: t.onerror
        }), this.attack = t.attack, this.release = t.release, this.curve = t.curve, this._buffers.loaded && Promise.resolve().then(t.onload);
    }
    static getDefaults() {
        return Object.assign(Q4.getDefaults(), {
            attack: 0,
            baseUrl: "",
            curve: "exponential",
            onload: _2,
            onerror: _2,
            release: .1,
            urls: {}
        });
    }
    _findClosest(t) {
        let s = 0;
        for(; s < 96;){
            if (this._buffers.has(t + s)) return -s;
            if (this._buffers.has(t - s)) return s;
            s++;
        }
        throw new Error(`No available buffers for note: ${t}`);
    }
    triggerAttack(t, e, s = 1) {
        return this.log("triggerAttack", t, e, s), Array.isArray(t) || (t = [
            t
        ]), t.forEach((i1)=>{
            let r = hi1(new z2(this.context, i1).toFrequency()), a = Math.round(r), c = r - a, p1 = this._findClosest(a), x1 = a - p1, y = this._buffers.get(x1), D1 = Rt2(p1 + c), et = new ot2({
                url: y,
                context: this.context,
                curve: this.curve,
                fadeIn: this.attack,
                fadeOut: this.release,
                playbackRate: D1
            }).connect(this.output);
            et.start(e, 0, y.duration / D1, s), F2(this._activeSources.get(a)) || this._activeSources.set(a, []), this._activeSources.get(a).push(et), et.onended = ()=>{
                if (this._activeSources && this._activeSources.has(a)) {
                    let xe = this._activeSources.get(a), ye = xe.indexOf(et);
                    ye !== -1 && xe.splice(ye, 1);
                }
            };
        }), this;
    }
    triggerRelease(t, e) {
        return this.log("triggerRelease", t, e), Array.isArray(t) || (t = [
            t
        ]), t.forEach((s)=>{
            let i1 = new z2(this.context, s).toMidi();
            if (this._activeSources.has(i1) && this._activeSources.get(i1).length) {
                let r = this._activeSources.get(i1);
                e = this.toSeconds(e), r.forEach((a)=>{
                    a.stop(e);
                }), this._activeSources.set(i1, []);
            }
        }), this;
    }
    releaseAll(t) {
        let e = this.toSeconds(t);
        return this._activeSources.forEach((s)=>{
            for(; s.length;)s.shift().stop(e);
        }), this;
    }
    sync() {
        return this._syncState() && (this._syncMethod("triggerAttack", 1), this._syncMethod("triggerRelease", 1)), this;
    }
    triggerAttackRelease(t, e, s, i1 = 1) {
        let r = this.toSeconds(s);
        return this.triggerAttack(t, r, i1), F2(e) ? (m3(F2(t), "notes must be an array when duration is array"), t.forEach((a, c)=>{
            let p1 = e[Math.min(c, e.length - 1)];
            this.triggerRelease(a, r + this.toSeconds(p1));
        })) : this.triggerRelease(t, r + this.toSeconds(e)), this;
    }
    add(t, e, s) {
        if (m3(He1(t) || isFinite(t), `note must be a pitch or midi: ${t}`), He1(t)) {
            let i1 = new z2(this.context, t).toMidi();
            this._buffers.add(i1, e, s);
        } else this._buffers.add(t, e, s);
        return this;
    }
    get loaded() {
        return this._buffers.loaded;
    }
    dispose() {
        return super.dispose(), this._buffers.dispose(), this._activeSources.forEach((t)=>{
            t.forEach((e)=>e.dispose());
        }), this._activeSources.clear(), this;
    }
};
E4([
    ct2(0)
], Ee2.prototype, "attack", void 0);
E4([
    ct2(0)
], Ee2.prototype, "release", void 0);
var rt2 = class extends O2 {
    constructor(){
        super(o2(rt2.getDefaults(), arguments, [
            "callback",
            "value"
        ])), this.name = "ToneEvent", this._state = new xt2("stopped"), this._startOffset = 0;
        let t = o2(rt2.getDefaults(), arguments, [
            "callback",
            "value"
        ]);
        this._loop = t.loop, this.callback = t.callback, this.value = t.value, this._loopStart = this.toTicks(t.loopStart), this._loopEnd = this.toTicks(t.loopEnd), this._playbackRate = t.playbackRate, this._probability = t.probability, this._humanize = t.humanize, this.mute = t.mute, this._playbackRate = t.playbackRate, this._state.increasing = !0, this._rescheduleEvents();
    }
    static getDefaults() {
        return Object.assign(O2.getDefaults(), {
            callback: _2,
            humanize: !1,
            loop: !1,
            loopEnd: "1m",
            loopStart: 0,
            mute: !1,
            playbackRate: 1,
            probability: 1,
            value: null
        });
    }
    _rescheduleEvents(t = -1) {
        this._state.forEachFrom(t, (e)=>{
            let s;
            if (e.state === "started") {
                e.id !== -1 && this.context.transport.clear(e.id);
                let i1 = e.time + Math.round(this.startOffset / this._playbackRate);
                if (this._loop === !0 || W1(this._loop) && this._loop > 1) {
                    s = 1 / 0, W1(this._loop) && (s = this._loop * this._getLoopDuration());
                    let r = this._state.getAfter(i1);
                    r !== null && (s = Math.min(s, r.time - i1)), s !== 1 / 0 && (s = new A2(this.context, s));
                    let a = new A2(this.context, this._getLoopDuration());
                    e.id = this.context.transport.scheduleRepeat(this._tick.bind(this), a, new A2(this.context, i1), s);
                } else e.id = this.context.transport.schedule(this._tick.bind(this), new A2(this.context, i1));
            }
        });
    }
    get state() {
        return this._state.getValueAtTime(this.context.transport.ticks);
    }
    get startOffset() {
        return this._startOffset;
    }
    set startOffset(t) {
        this._startOffset = t;
    }
    get probability() {
        return this._probability;
    }
    set probability(t) {
        this._probability = t;
    }
    get humanize() {
        return this._humanize;
    }
    set humanize(t) {
        this._humanize = t;
    }
    start(t) {
        let e = this.toTicks(t);
        return this._state.getValueAtTime(e) === "stopped" && (this._state.add({
            id: -1,
            state: "started",
            time: e
        }), this._rescheduleEvents(e)), this;
    }
    stop(t) {
        this.cancel(t);
        let e = this.toTicks(t);
        if (this._state.getValueAtTime(e) === "started") {
            this._state.setStateAtTime("stopped", e, {
                id: -1
            });
            let s = this._state.getBefore(e), i1 = e;
            s !== null && (i1 = s.time), this._rescheduleEvents(i1);
        }
        return this;
    }
    cancel(t) {
        t = X2(t, -1 / 0);
        let e = this.toTicks(t);
        return this._state.forEachFrom(e, (s)=>{
            this.context.transport.clear(s.id);
        }), this._state.cancel(e), this;
    }
    _tick(t) {
        let e = this.context.transport.getTicksAtTime(t);
        if (!this.mute && this._state.getValueAtTime(e) === "started") {
            if (this.probability < 1 && Math.random() > this.probability) return;
            if (this.humanize) {
                let s = .02;
                Ls(this.humanize) || (s = this.toSeconds(this.humanize)), t += (Math.random() * 2 - 1) * s;
            }
            this.callback(t, this.value);
        }
    }
    _getLoopDuration() {
        return (this._loopEnd - this._loopStart) / this._playbackRate;
    }
    get loop() {
        return this._loop;
    }
    set loop(t) {
        this._loop = t, this._rescheduleEvents();
    }
    get playbackRate() {
        return this._playbackRate;
    }
    set playbackRate(t) {
        this._playbackRate = t, this._rescheduleEvents();
    }
    get loopEnd() {
        return new A2(this.context, this._loopEnd).toSeconds();
    }
    set loopEnd(t) {
        this._loopEnd = this.toTicks(t), this._loop && this._rescheduleEvents();
    }
    get loopStart() {
        return new A2(this.context, this._loopStart).toSeconds();
    }
    set loopStart(t) {
        this._loopStart = this.toTicks(t), this._loop && this._rescheduleEvents();
    }
    get progress() {
        if (this._loop) {
            let t = this.context.transport.ticks, e = this._state.get(t);
            if (e !== null && e.state === "started") {
                let s = this._getLoopDuration();
                return (t - e.time) % s / s;
            } else return 0;
        } else return 0;
    }
    dispose() {
        return super.dispose(), this.cancel(), this._state.dispose(), this;
    }
};
var pe1 = class extends O2 {
    constructor(){
        super(o2(pe1.getDefaults(), arguments, [
            "callback",
            "interval"
        ])), this.name = "Loop";
        let t = o2(pe1.getDefaults(), arguments, [
            "callback",
            "interval"
        ]);
        this._event = new rt2({
            context: this.context,
            callback: this._tick.bind(this),
            loop: !0,
            loopEnd: t.interval,
            playbackRate: t.playbackRate,
            probability: t.probability
        }), this.callback = t.callback, this.iterations = t.iterations;
    }
    static getDefaults() {
        return Object.assign(O2.getDefaults(), {
            interval: "4n",
            callback: _2,
            playbackRate: 1,
            iterations: 1 / 0,
            probability: 1,
            mute: !1,
            humanize: !1
        });
    }
    start(t) {
        return this._event.start(t), this;
    }
    stop(t) {
        return this._event.stop(t), this;
    }
    cancel(t) {
        return this._event.cancel(t), this;
    }
    _tick(t) {
        this.callback(t);
    }
    get state() {
        return this._event.state;
    }
    get progress() {
        return this._event.progress;
    }
    get interval() {
        return this._event.loopEnd;
    }
    set interval(t) {
        this._event.loopEnd = t;
    }
    get playbackRate() {
        return this._event.playbackRate;
    }
    set playbackRate(t) {
        this._event.playbackRate = t;
    }
    get humanize() {
        return this._event.humanize;
    }
    set humanize(t) {
        this._event.humanize = t;
    }
    get probability() {
        return this._event.probability;
    }
    set probability(t) {
        this._event.probability = t;
    }
    get mute() {
        return this._event.mute;
    }
    set mute(t) {
        this._event.mute = t;
    }
    get iterations() {
        return this._event.loop === !0 ? 1 / 0 : this._event.loop;
    }
    set iterations(t) {
        t === 1 / 0 ? this._event.loop = !0 : this._event.loop = t;
    }
    dispose() {
        return super.dispose(), this._event.dispose(), this;
    }
};
var me1 = class extends rt2 {
    constructor(){
        super(o2(me1.getDefaults(), arguments, [
            "callback",
            "events"
        ])), this.name = "Part", this._state = new xt2("stopped"), this._events = new Set;
        let t = o2(me1.getDefaults(), arguments, [
            "callback",
            "events"
        ]);
        this._state.increasing = !0, t.events.forEach((e)=>{
            F2(e) ? this.add(e[0], e[1]) : this.add(e);
        });
    }
    static getDefaults() {
        return Object.assign(rt2.getDefaults(), {
            events: []
        });
    }
    start(t, e) {
        let s = this.toTicks(t);
        if (this._state.getValueAtTime(s) !== "started") {
            e = X2(e, this._loop ? this._loopStart : 0), this._loop ? e = X2(e, this._loopStart) : e = X2(e, 0);
            let i1 = this.toTicks(e);
            this._state.add({
                id: -1,
                offset: i1,
                state: "started",
                time: s
            }), this._forEach((r)=>{
                this._startNote(r, s, i1);
            });
        }
        return this;
    }
    _startNote(t, e, s) {
        e -= s, this._loop ? t.startOffset >= this._loopStart && t.startOffset < this._loopEnd ? (t.startOffset < s && (e += this._getLoopDuration()), t.start(new A2(this.context, e))) : t.startOffset < this._loopStart && t.startOffset >= s && (t.loop = !1, t.start(new A2(this.context, e))) : t.startOffset >= s && t.start(new A2(this.context, e));
    }
    get startOffset() {
        return this._startOffset;
    }
    set startOffset(t) {
        this._startOffset = t, this._forEach((e)=>{
            e.startOffset += this._startOffset;
        });
    }
    stop(t) {
        let e = this.toTicks(t);
        return this._state.cancel(e), this._state.setStateAtTime("stopped", e), this._forEach((s)=>{
            s.stop(t);
        }), this;
    }
    at(t, e) {
        let s = new E5(this.context, t).toTicks(), i1 = new A2(this.context, 1).toSeconds(), r = this._events.values(), a = r.next();
        for(; !a.done;){
            let c = a.value;
            if (Math.abs(s - c.startOffset) < i1) return g4(e) && (c.value = e), c;
            a = r.next();
        }
        return g4(e) ? (this.add(t, e), this.at(t)) : null;
    }
    add(t, e) {
        t instanceof Object && Reflect.has(t, "time") && (e = t, t = e.time);
        let s = this.toTicks(t), i1;
        return e instanceof rt2 ? (i1 = e, i1.callback = this._tick.bind(this)) : i1 = new rt2({
            callback: this._tick.bind(this),
            context: this.context,
            value: e
        }), i1.startOffset = s, i1.set({
            humanize: this.humanize,
            loop: this.loop,
            loopEnd: this.loopEnd,
            loopStart: this.loopStart,
            playbackRate: this.playbackRate,
            probability: this.probability
        }), this._events.add(i1), this._restartEvent(i1), this;
    }
    _restartEvent(t) {
        this._state.forEach((e)=>{
            e.state === "started" ? this._startNote(t, e.time, e.offset) : t.stop(new A2(this.context, e.time));
        });
    }
    remove(t, e) {
        return dt3(t) && t.hasOwnProperty("time") && (e = t, t = e.time), t = this.toTicks(t), this._events.forEach((s)=>{
            s.startOffset === t && (N1(e) || g4(e) && s.value === e) && (this._events.delete(s), s.dispose());
        }), this;
    }
    clear() {
        return this._forEach((t)=>t.dispose()), this._events.clear(), this;
    }
    cancel(t) {
        return this._forEach((e)=>e.cancel(t)), this._state.cancel(this.toTicks(t)), this;
    }
    _forEach(t) {
        return this._events && this._events.forEach((e)=>{
            e instanceof me1 ? e._forEach(t) : t(e);
        }), this;
    }
    _setAll(t, e) {
        this._forEach((s)=>{
            s[t] = e;
        });
    }
    _tick(t, e) {
        this.mute || this.callback(t, e);
    }
    _testLoopBoundries(t) {
        this._loop && (t.startOffset < this._loopStart || t.startOffset >= this._loopEnd) ? t.cancel(0) : t.state === "stopped" && this._restartEvent(t);
    }
    get probability() {
        return this._probability;
    }
    set probability(t) {
        this._probability = t, this._setAll("probability", t);
    }
    get humanize() {
        return this._humanize;
    }
    set humanize(t) {
        this._humanize = t, this._setAll("humanize", t);
    }
    get loop() {
        return this._loop;
    }
    set loop(t) {
        this._loop = t, this._forEach((e)=>{
            e.loopStart = this.loopStart, e.loopEnd = this.loopEnd, e.loop = t, this._testLoopBoundries(e);
        });
    }
    get loopEnd() {
        return new A2(this.context, this._loopEnd).toSeconds();
    }
    set loopEnd(t) {
        this._loopEnd = this.toTicks(t), this._loop && this._forEach((e)=>{
            e.loopEnd = t, this._testLoopBoundries(e);
        });
    }
    get loopStart() {
        return new A2(this.context, this._loopStart).toSeconds();
    }
    set loopStart(t) {
        this._loopStart = this.toTicks(t), this._loop && this._forEach((e)=>{
            e.loopStart = this.loopStart, this._testLoopBoundries(e);
        });
    }
    get playbackRate() {
        return this._playbackRate;
    }
    set playbackRate(t) {
        this._playbackRate = t, this._setAll("playbackRate", t);
    }
    get length() {
        return this._events.size;
    }
    dispose() {
        return super.dispose(), this.clear(), this;
    }
};
function* Eo1(n) {
    let t = 0;
    for(; t < n;)t = Lt2(t, 0, n - 1), yield t, t++;
}
function* Co1(n) {
    let t = n - 1;
    for(; t >= 0;)t = Lt2(t, 0, n - 1), yield t, t--;
}
function* as1(n, t) {
    for(;;)yield* t(n);
}
function* $i1(n, t) {
    let e = t ? 0 : n - 1;
    for(;;)e = Lt2(e, 0, n - 1), yield e, t ? (e++, e >= n - 1 && (t = !1)) : (e--, e <= 0 && (t = !0));
}
function* Vo1(n) {
    let t = 0, e = 0;
    for(; t < n;)t = Lt2(t, 0, n - 1), yield t, e++, t += e % 2 ? 2 : -1;
}
function* Mo1(n) {
    let t = n - 1, e = 0;
    for(; t >= 0;)t = Lt2(t, 0, n - 1), yield t, e++, t += e % 2 ? -2 : 1;
}
function* Io1(n) {
    for(;;)yield Math.floor(Math.random() * n);
}
function* jo1(n) {
    let t = [];
    for(let e = 0; e < n; e++)t.push(e);
    for(; t.length > 0;){
        let e1 = t.splice(Math.floor(t.length * Math.random()), 1);
        yield Lt2(e1[0], 0, n - 1);
    }
}
function* No1(n) {
    let t = Math.floor(Math.random() * n);
    for(;;)t === 0 ? t++ : t === n - 1 || Math.random() < .5 ? t-- : t++, yield t;
}
function* di1(n, t = "up", e = 0) {
    switch(m3(n >= 1, "The number of values must be at least one"), t){
        case "up":
            yield* as1(n, Eo1);
        case "down":
            yield* as1(n, Co1);
        case "upDown":
            yield* $i1(n, !0);
        case "downUp":
            yield* $i1(n, !1);
        case "alternateUp":
            yield* as1(n, Vo1);
        case "alternateDown":
            yield* as1(n, Mo1);
        case "random":
            yield* Io1(n);
        case "randomOnce":
            yield* as1(n, jo1);
        case "randomWalk":
            yield* No1(n);
    }
}
var hs1 = class extends pe1 {
    constructor(){
        super(o2(hs1.getDefaults(), arguments, [
            "callback",
            "values",
            "pattern"
        ])), this.name = "Pattern";
        let t = o2(hs1.getDefaults(), arguments, [
            "callback",
            "values",
            "pattern"
        ]);
        this.callback = t.callback, this._values = t.values, this._pattern = di1(t.values.length, t.pattern), this._type = t.pattern;
    }
    static getDefaults() {
        return Object.assign(pe1.getDefaults(), {
            pattern: "up",
            values: [],
            callback: _2
        });
    }
    _tick(t) {
        let e = this._pattern.next();
        this._index = e.value, this._value = this._values[e.value], this.callback(t, this._value);
    }
    get values() {
        return this._values;
    }
    set values(t) {
        this._values = t, this.pattern = this._type;
    }
    get value() {
        return this._value;
    }
    get index() {
        return this._index;
    }
    get pattern() {
        return this._type;
    }
    set pattern(t) {
        this._type = t, this._pattern = di1(this._values.length, this._type);
    }
};
var cs1 = class extends rt2 {
    constructor(){
        super(o2(cs1.getDefaults(), arguments, [
            "callback",
            "events",
            "subdivision"
        ])), this.name = "Sequence", this._part = new me1({
            callback: this._seqCallback.bind(this),
            context: this.context
        }), this._events = [], this._eventsArray = [];
        let t = o2(cs1.getDefaults(), arguments, [
            "callback",
            "events",
            "subdivision"
        ]);
        this._subdivision = this.toTicks(t.subdivision), this.events = t.events, this.loop = t.loop, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this.playbackRate = t.playbackRate, this.probability = t.probability, this.humanize = t.humanize, this.mute = t.mute, this.playbackRate = t.playbackRate;
    }
    static getDefaults() {
        return Object.assign(V2(rt2.getDefaults(), [
            "value"
        ]), {
            events: [],
            loop: !0,
            loopEnd: 0,
            loopStart: 0,
            subdivision: "8n"
        });
    }
    _seqCallback(t, e) {
        e !== null && !this.mute && this.callback(t, e);
    }
    get events() {
        return this._events;
    }
    set events(t) {
        this.clear(), this._eventsArray = t, this._events = this._createSequence(this._eventsArray), this._eventsUpdated();
    }
    start(t, e) {
        return this._part.start(t, e && this._indexTime(e)), this;
    }
    stop(t) {
        return this._part.stop(t), this;
    }
    get subdivision() {
        return new A2(this.context, this._subdivision).toSeconds();
    }
    _createSequence(t) {
        return new Proxy(t, {
            get: (e, s)=>e[s],
            set: (e, s, i1)=>(Z1(s) && isFinite(parseInt(s, 10)) && F2(i1) ? e[s] = this._createSequence(i1) : e[s] = i1, this._eventsUpdated(), !0)
        });
    }
    _eventsUpdated() {
        this._part.clear(), this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset), this.loopEnd = this.loopEnd;
    }
    _rescheduleSequence(t, e, s) {
        t.forEach((i1, r)=>{
            let a = r * e + s;
            if (F2(i1)) this._rescheduleSequence(i1, e / i1.length, a);
            else {
                let c = new A2(this.context, a, "i").toSeconds();
                this._part.add(c, i1);
            }
        });
    }
    _indexTime(t) {
        return new A2(this.context, t * this._subdivision + this.startOffset).toSeconds();
    }
    clear() {
        return this._part.clear(), this;
    }
    dispose() {
        return super.dispose(), this._part.dispose(), this;
    }
    get loop() {
        return this._part.loop;
    }
    set loop(t) {
        this._part.loop = t;
    }
    get loopStart() {
        return this._loopStart;
    }
    set loopStart(t) {
        this._loopStart = t, this._part.loopStart = this._indexTime(t);
    }
    get loopEnd() {
        return this._loopEnd;
    }
    set loopEnd(t) {
        this._loopEnd = t, t === 0 ? this._part.loopEnd = this._indexTime(this._eventsArray.length) : this._part.loopEnd = this._indexTime(t);
    }
    get startOffset() {
        return this._part.startOffset;
    }
    set startOffset(t) {
        this._part.startOffset = t;
    }
    get playbackRate() {
        return this._part.playbackRate;
    }
    set playbackRate(t) {
        this._part.playbackRate = t;
    }
    get probability() {
        return this._part.probability;
    }
    set probability(t) {
        this._part.probability = t;
    }
    get progress() {
        return this._part.progress;
    }
    get humanize() {
        return this._part.humanize;
    }
    set humanize(t) {
        this._part.humanize = t;
    }
    get length() {
        return this._part.length;
    }
};
var At2 = class extends h1 {
    constructor(){
        super(Object.assign(o2(At2.getDefaults(), arguments, [
            "fade"
        ]))), this.name = "CrossFade", this._panner = this.context.createStereoPanner(), this._split = this.context.createChannelSplitter(2), this._g2a = new Ys1({
            context: this.context
        }), this.a = new l1({
            context: this.context,
            gain: 0
        }), this.b = new l1({
            context: this.context,
            gain: 0
        }), this.output = new l1({
            context: this.context
        }), this._internalChannels = [
            this.a,
            this.b
        ];
        let t = o2(At2.getDefaults(), arguments, [
            "fade"
        ]);
        this.fade = new f({
            context: this.context,
            units: "normalRange",
            value: t.fade
        }), u1(this, "fade"), this.context.getConstant(1).connect(this._panner), this._panner.connect(this._split), this._panner.channelCount = 1, this._panner.channelCountMode = "explicit", P2(this._split, this.a.gain, 0), P2(this._split, this.b.gain, 1), this.fade.chain(this._g2a, this._panner.pan), this.a.connect(this.output), this.b.connect(this.output);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            fade: .5
        });
    }
    dispose() {
        return super.dispose(), this.a.dispose(), this.b.dispose(), this.output.dispose(), this.fade.dispose(), this._g2a.dispose(), this._panner.disconnect(), this._split.disconnect(), this;
    }
};
var k1 = class extends h1 {
    constructor(t){
        super(t), this.name = "Effect", this._dryWet = new At2({
            context: this.context
        }), this.wet = this._dryWet.fade, this.effectSend = new l1({
            context: this.context
        }), this.effectReturn = new l1({
            context: this.context
        }), this.input = new l1({
            context: this.context
        }), this.output = this._dryWet, this.input.fan(this._dryWet.a, this.effectSend), this.effectReturn.connect(this._dryWet.b), this.wet.setValueAtTime(t.wet, 0), this._internalChannels = [
            this.effectReturn,
            this.effectSend
        ], u1(this, "wet");
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            wet: 1
        });
    }
    connectEffect(t) {
        return this._internalChannels.push(t), this.effectSend.chain(t, this.effectReturn), this;
    }
    dispose() {
        return super.dispose(), this._dryWet.dispose(), this.effectSend.dispose(), this.effectReturn.dispose(), this.wet.dispose(), this;
    }
};
var fe2 = class extends k1 {
    constructor(t){
        super(t), this.name = "LFOEffect", this._lfo = new I1({
            context: this.context,
            frequency: t.frequency,
            amplitude: t.depth
        }), this.depth = this._lfo.amplitude, this.frequency = this._lfo.frequency, this.type = t.type, u1(this, [
            "frequency",
            "depth"
        ]);
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            frequency: 1,
            type: "sine",
            depth: 1
        });
    }
    start(t) {
        return this._lfo.start(t), this;
    }
    stop(t) {
        return this._lfo.stop(t), this;
    }
    sync() {
        return this._lfo.sync(), this;
    }
    unsync() {
        return this._lfo.unsync(), this;
    }
    get type() {
        return this._lfo.type;
    }
    set type(t) {
        this._lfo.type = t;
    }
    dispose() {
        return super.dispose(), this._lfo.dispose(), this.frequency.dispose(), this.depth.dispose(), this;
    }
};
var us = class extends fe2 {
    constructor(){
        super(o2(us.getDefaults(), arguments, [
            "frequency",
            "baseFrequency",
            "octaves"
        ])), this.name = "AutoFilter";
        let t = o2(us.getDefaults(), arguments, [
            "frequency",
            "baseFrequency",
            "octaves"
        ]);
        this.filter = new $1(Object.assign(t.filter, {
            context: this.context
        })), this.connectEffect(this.filter), this._lfo.connect(this.filter.frequency), this.octaves = t.octaves, this.baseFrequency = t.baseFrequency;
    }
    static getDefaults() {
        return Object.assign(fe2.getDefaults(), {
            baseFrequency: 200,
            octaves: 2.6,
            filter: {
                type: "lowpass",
                rolloff: -12,
                Q: 1
            }
        });
    }
    get baseFrequency() {
        return this._lfo.min;
    }
    set baseFrequency(t) {
        this._lfo.min = this.toFrequency(t), this.octaves = this._octaves;
    }
    get octaves() {
        return this._octaves;
    }
    set octaves(t) {
        this._octaves = t, this._lfo.max = this._lfo.min * Math.pow(2, t);
    }
    dispose() {
        return super.dispose(), this.filter.dispose(), this;
    }
};
var Zt2 = class extends h1 {
    constructor(){
        super(Object.assign(o2(Zt2.getDefaults(), arguments, [
            "pan"
        ]))), this.name = "Panner", this._panner = this.context.createStereoPanner(), this.input = this._panner, this.output = this._panner;
        let t = o2(Zt2.getDefaults(), arguments, [
            "pan"
        ]);
        this.pan = new d2({
            context: this.context,
            param: this._panner.pan,
            value: t.pan,
            minValue: -1,
            maxValue: 1
        }), this._panner.channelCount = t.channelCount, this._panner.channelCountMode = "explicit", u1(this, "pan");
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            pan: 0,
            channelCount: 1
        });
    }
    dispose() {
        return super.dispose(), this._panner.disconnect(), this.pan.dispose(), this;
    }
};
var ls = class extends fe2 {
    constructor(){
        super(o2(ls.getDefaults(), arguments, [
            "frequency"
        ])), this.name = "AutoPanner";
        let t = o2(ls.getDefaults(), arguments, [
            "frequency"
        ]);
        this._panner = new Zt2({
            context: this.context,
            channelCount: t.channelCount
        }), this.connectEffect(this._panner), this._lfo.connect(this._panner.pan), this._lfo.min = -1, this._lfo.max = 1;
    }
    static getDefaults() {
        return Object.assign(fe2.getDefaults(), {
            channelCount: 1
        });
    }
    dispose() {
        return super.dispose(), this._panner.dispose(), this;
    }
};
var Jt2 = class extends h1 {
    constructor(){
        super(o2(Jt2.getDefaults(), arguments, [
            "smoothing"
        ])), this.name = "Follower";
        let t = o2(Jt2.getDefaults(), arguments, [
            "smoothing"
        ]);
        this._abs = this.input = new Xs1({
            context: this.context
        }), this._lowpass = this.output = new Xt2({
            context: this.context,
            frequency: 1 / this.toSeconds(t.smoothing),
            type: "lowpass"
        }), this._abs.connect(this._lowpass), this._smoothing = t.smoothing;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            smoothing: .05
        });
    }
    get smoothing() {
        return this._smoothing;
    }
    set smoothing(t) {
        this._smoothing = t, this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);
    }
    dispose() {
        return super.dispose(), this._abs.dispose(), this._lowpass.dispose(), this;
    }
};
var ps = class extends k1 {
    constructor(){
        super(o2(ps.getDefaults(), arguments, [
            "baseFrequency",
            "octaves",
            "sensitivity"
        ])), this.name = "AutoWah";
        let t = o2(ps.getDefaults(), arguments, [
            "baseFrequency",
            "octaves",
            "sensitivity"
        ]);
        this._follower = new Jt2({
            context: this.context,
            smoothing: t.follower
        }), this._sweepRange = new qe1({
            context: this.context,
            min: 0,
            max: 1,
            exponent: .5
        }), this._baseFrequency = this.toFrequency(t.baseFrequency), this._octaves = t.octaves, this._inputBoost = new l1({
            context: this.context
        }), this._bandpass = new $1({
            context: this.context,
            rolloff: -48,
            frequency: 0,
            Q: t.Q
        }), this._peaking = new $1({
            context: this.context,
            type: "peaking"
        }), this._peaking.gain.value = t.gain, this.gain = this._peaking.gain, this.Q = this._bandpass.Q, this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange), this._sweepRange.connect(this._bandpass.frequency), this._sweepRange.connect(this._peaking.frequency), this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn), this._setSweepRange(), this.sensitivity = t.sensitivity, u1(this, [
            "gain",
            "Q"
        ]);
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            baseFrequency: 100,
            octaves: 6,
            sensitivity: 0,
            Q: 2,
            gain: 2,
            follower: .2
        });
    }
    get octaves() {
        return this._octaves;
    }
    set octaves(t) {
        this._octaves = t, this._setSweepRange();
    }
    get follower() {
        return this._follower.smoothing;
    }
    set follower(t) {
        this._follower.smoothing = t;
    }
    get baseFrequency() {
        return this._baseFrequency;
    }
    set baseFrequency(t) {
        this._baseFrequency = this.toFrequency(t), this._setSweepRange();
    }
    get sensitivity() {
        return Wt2(1 / this._inputBoost.gain.value);
    }
    set sensitivity(t) {
        this._inputBoost.gain.value = 1 / qt2(t);
    }
    _setSweepRange() {
        this._sweepRange.min = this._baseFrequency, this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
    }
    dispose() {
        return super.dispose(), this._follower.dispose(), this._sweepRange.dispose(), this._bandpass.dispose(), this._peaking.dispose(), this._inputBoost.dispose(), this;
    }
};
var _i1 = "bit-crusher", Po1 = `
	class BitCrusherWorklet extends SingleIOProcessor {

		static get parameterDescriptors() {
			return [{
				name: "bits",
				defaultValue: 12,
				minValue: 1,
				maxValue: 16,
				automationRate: 'k-rate'
			}];
		}

		generate(input, _channel, parameters) {
			const step = Math.pow(0.5, parameters.bits - 1);
			const val = step * Math.floor(input / step + 0.5);
			return val;
		}
	}
`;
ti1(_i1, Po1);
var ms = class extends k1 {
    constructor(){
        super(o2(ms.getDefaults(), arguments, [
            "bits"
        ])), this.name = "BitCrusher";
        let t = o2(ms.getDefaults(), arguments, [
            "bits"
        ]);
        this._bitCrusherWorklet = new Be1({
            context: this.context,
            bits: t.bits
        }), this.connectEffect(this._bitCrusherWorklet), this.bits = this._bitCrusherWorklet.bits;
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            bits: 4
        });
    }
    dispose() {
        return super.dispose(), this._bitCrusherWorklet.dispose(), this;
    }
}, Be1 = class extends Fe1 {
    constructor(){
        super(o2(Be1.getDefaults(), arguments)), this.name = "BitCrusherWorklet";
        let t = o2(Be1.getDefaults(), arguments);
        this.input = new l1({
            context: this.context
        }), this.output = new l1({
            context: this.context
        }), this.bits = new d2({
            context: this.context,
            value: t.bits,
            units: "positive",
            minValue: 1,
            maxValue: 16,
            param: this._dummyParam,
            swappable: !0
        });
    }
    static getDefaults() {
        return Object.assign(Fe1.getDefaults(), {
            bits: 12
        });
    }
    _audioWorkletName() {
        return _i1;
    }
    onReady(t) {
        U1(this.input, t, this.output);
        let e = t.parameters.get("bits");
        this.bits.setParam(e);
    }
    dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this.bits.dispose(), this;
    }
};
var fs = class extends k1 {
    constructor(){
        super(o2(fs.getDefaults(), arguments, [
            "order"
        ])), this.name = "Chebyshev";
        let t = o2(fs.getDefaults(), arguments, [
            "order"
        ]);
        this._shaper = new G1({
            context: this.context,
            length: 4096
        }), this._order = t.order, this.connectEffect(this._shaper), this.order = t.order, this.oversample = t.oversample;
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            order: 1,
            oversample: "none"
        });
    }
    _getCoefficient(t, e, s) {
        return s.has(e) || (e === 0 ? s.set(e, 0) : e === 1 ? s.set(e, t) : s.set(e, 2 * t * this._getCoefficient(t, e - 1, s) - this._getCoefficient(t, e - 2, s))), s.get(e);
    }
    get order() {
        return this._order;
    }
    set order(t) {
        m3(Number.isInteger(t), "'order' must be an integer"), this._order = t, this._shaper.setMap((e)=>this._getCoefficient(e, t, new Map));
    }
    get oversample() {
        return this._shaper.oversample;
    }
    set oversample(t) {
        this._shaper.oversample = t;
    }
    dispose() {
        return super.dispose(), this._shaper.dispose(), this;
    }
};
var ft2 = class extends h1 {
    constructor(){
        super(o2(ft2.getDefaults(), arguments, [
            "channels"
        ])), this.name = "Split";
        let t = o2(ft2.getDefaults(), arguments, [
            "channels"
        ]);
        this._splitter = this.input = this.output = this.context.createChannelSplitter(t.channels), this._internalChannels = [
            this._splitter
        ];
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            channels: 2
        });
    }
    dispose() {
        return super.dispose(), this._splitter.disconnect(), this;
    }
};
var nt2 = class extends h1 {
    constructor(){
        super(o2(nt2.getDefaults(), arguments, [
            "channels"
        ])), this.name = "Merge";
        let t = o2(nt2.getDefaults(), arguments, [
            "channels"
        ]);
        this._merger = this.output = this.input = this.context.createChannelMerger(t.channels);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            channels: 2
        });
    }
    dispose() {
        return super.dispose(), this._merger.disconnect(), this;
    }
};
var tt2 = class extends h1 {
    constructor(t){
        super(t), this.name = "StereoEffect", this.input = new l1({
            context: this.context
        }), this.input.channelCount = 2, this.input.channelCountMode = "explicit", this._dryWet = this.output = new At2({
            context: this.context,
            fade: t.wet
        }), this.wet = this._dryWet.fade, this._split = new ft2({
            context: this.context,
            channels: 2
        }), this._merge = new nt2({
            context: this.context,
            channels: 2
        }), this.input.connect(this._split), this.input.connect(this._dryWet.a), this._merge.connect(this._dryWet.b), u1(this, [
            "wet"
        ]);
    }
    connectEffectLeft(...t) {
        this._split.connect(t[0], 0, 0), U1(...t), P2(t[t.length - 1], this._merge, 0, 0);
    }
    connectEffectRight(...t) {
        this._split.connect(t[0], 1, 0), U1(...t), P2(t[t.length - 1], this._merge, 0, 1);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            wet: 1
        });
    }
    dispose() {
        return super.dispose(), this._dryWet.dispose(), this._split.dispose(), this._merge.dispose(), this;
    }
};
var Ce2 = class extends tt2 {
    constructor(t){
        super(t), this.feedback = new f({
            context: this.context,
            value: t.feedback,
            units: "normalRange"
        }), this._feedbackL = new l1({
            context: this.context
        }), this._feedbackR = new l1({
            context: this.context
        }), this._feedbackSplit = new ft2({
            context: this.context,
            channels: 2
        }), this._feedbackMerge = new nt2({
            context: this.context,
            channels: 2
        }), this._merge.connect(this._feedbackSplit), this._feedbackMerge.connect(this._split), this._feedbackSplit.connect(this._feedbackL, 0, 0), this._feedbackL.connect(this._feedbackMerge, 0, 0), this._feedbackSplit.connect(this._feedbackR, 1, 0), this._feedbackR.connect(this._feedbackMerge, 0, 1), this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain), u1(this, [
            "feedback"
        ]);
    }
    static getDefaults() {
        return Object.assign(tt2.getDefaults(), {
            feedback: .5
        });
    }
    dispose() {
        return super.dispose(), this.feedback.dispose(), this._feedbackL.dispose(), this._feedbackR.dispose(), this._feedbackSplit.dispose(), this._feedbackMerge.dispose(), this;
    }
};
var ds = class extends Ce2 {
    constructor(){
        super(o2(ds.getDefaults(), arguments, [
            "frequency",
            "delayTime",
            "depth"
        ])), this.name = "Chorus";
        let t = o2(ds.getDefaults(), arguments, [
            "frequency",
            "delayTime",
            "depth"
        ]);
        this._depth = t.depth, this._delayTime = t.delayTime / 1e3, this._lfoL = new I1({
            context: this.context,
            frequency: t.frequency,
            min: 0,
            max: 1
        }), this._lfoR = new I1({
            context: this.context,
            frequency: t.frequency,
            min: 0,
            max: 1,
            phase: 180
        }), this._delayNodeL = new B2({
            context: this.context
        }), this._delayNodeR = new B2({
            context: this.context
        }), this.frequency = this._lfoL.frequency, u1(this, [
            "frequency"
        ]), this._lfoL.frequency.connect(this._lfoR.frequency), this.connectEffectLeft(this._delayNodeL), this.connectEffectRight(this._delayNodeR), this._lfoL.connect(this._delayNodeL.delayTime), this._lfoR.connect(this._delayNodeR.delayTime), this.depth = this._depth, this.type = t.type, this.spread = t.spread;
    }
    static getDefaults() {
        return Object.assign(Ce2.getDefaults(), {
            frequency: 1.5,
            delayTime: 3.5,
            depth: .7,
            type: "sine",
            spread: 180,
            feedback: 0,
            wet: .5
        });
    }
    get depth() {
        return this._depth;
    }
    set depth(t) {
        this._depth = t;
        let e = this._delayTime * t;
        this._lfoL.min = Math.max(this._delayTime - e, 0), this._lfoL.max = this._delayTime + e, this._lfoR.min = Math.max(this._delayTime - e, 0), this._lfoR.max = this._delayTime + e;
    }
    get delayTime() {
        return this._delayTime * 1e3;
    }
    set delayTime(t) {
        this._delayTime = t / 1e3, this.depth = this._depth;
    }
    get type() {
        return this._lfoL.type;
    }
    set type(t) {
        this._lfoL.type = t, this._lfoR.type = t;
    }
    get spread() {
        return this._lfoR.phase - this._lfoL.phase;
    }
    set spread(t) {
        this._lfoL.phase = 90 - t / 2, this._lfoR.phase = t / 2 + 90;
    }
    start(t) {
        return this._lfoL.start(t), this._lfoR.start(t), this;
    }
    stop(t) {
        return this._lfoL.stop(t), this._lfoR.stop(t), this;
    }
    sync() {
        return this._lfoL.sync(), this._lfoR.sync(), this;
    }
    unsync() {
        return this._lfoL.unsync(), this._lfoR.unsync(), this;
    }
    dispose() {
        return super.dispose(), this._lfoL.dispose(), this._lfoR.dispose(), this._delayNodeL.dispose(), this._delayNodeR.dispose(), this.frequency.dispose(), this;
    }
};
var _s1 = class extends k1 {
    constructor(){
        super(o2(_s1.getDefaults(), arguments, [
            "distortion"
        ])), this.name = "Distortion";
        let t = o2(_s1.getDefaults(), arguments, [
            "distortion"
        ]);
        this._shaper = new G1({
            context: this.context,
            length: 4096
        }), this._distortion = t.distortion, this.connectEffect(this._shaper), this.distortion = t.distortion, this.oversample = t.oversample;
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            distortion: .4,
            oversample: "none"
        });
    }
    get distortion() {
        return this._distortion;
    }
    set distortion(t) {
        this._distortion = t;
        let e = t * 100, s = Math.PI / 180;
        this._shaper.setMap((i1)=>Math.abs(i1) < .001 ? 0 : (3 + e) * i1 * 20 * s / (Math.PI + e * Math.abs(i1)));
    }
    get oversample() {
        return this._shaper.oversample;
    }
    set oversample(t) {
        this._shaper.oversample = t;
    }
    dispose() {
        return super.dispose(), this._shaper.dispose(), this;
    }
};
var de2 = class extends k1 {
    constructor(t){
        super(t), this.name = "FeedbackEffect", this._feedbackGain = new l1({
            context: this.context,
            gain: t.feedback,
            units: "normalRange"
        }), this.feedback = this._feedbackGain.gain, u1(this, "feedback"), this.effectReturn.chain(this._feedbackGain, this.effectSend);
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            feedback: .125
        });
    }
    dispose() {
        return super.dispose(), this._feedbackGain.dispose(), this.feedback.dispose(), this;
    }
};
var gs = class extends de2 {
    constructor(){
        super(o2(gs.getDefaults(), arguments, [
            "delayTime",
            "feedback"
        ])), this.name = "FeedbackDelay";
        let t = o2(gs.getDefaults(), arguments, [
            "delayTime",
            "feedback"
        ]);
        this._delayNode = new B2({
            context: this.context,
            delayTime: t.delayTime,
            maxDelay: t.maxDelay
        }), this.delayTime = this._delayNode.delayTime, this.connectEffect(this._delayNode), u1(this, "delayTime");
    }
    static getDefaults() {
        return Object.assign(de2.getDefaults(), {
            delayTime: .25,
            maxDelay: 1
        });
    }
    dispose() {
        return super.dispose(), this._delayNode.dispose(), this.delayTime.dispose(), this;
    }
};
var ei1 = class extends h1 {
    constructor(t){
        super(t), this.name = "PhaseShiftAllpass", this.input = new l1({
            context: this.context
        }), this.output = new l1({
            context: this.context
        }), this.offset90 = new l1({
            context: this.context
        });
        let e = [
            .6923878,
            .9360654322959,
            .988229522686,
            .9987488452737
        ], s = [
            .4021921162426,
            .856171088242,
            .9722909545651,
            .9952884791278
        ];
        this._bank0 = this._createAllPassFilterBank(e), this._bank1 = this._createAllPassFilterBank(s), this._oneSampleDelay = this.context.createIIRFilter([
            0,
            1
        ], [
            1,
            0
        ]), U1(this.input, ...this._bank0, this._oneSampleDelay, this.output), U1(this.input, ...this._bank1, this.offset90);
    }
    _createAllPassFilterBank(t) {
        return t.map((s)=>{
            let i1 = [
                [
                    s * s,
                    0,
                    -1
                ],
                [
                    1,
                    0,
                    -(s * s)
                ]
            ];
            return this.context.createIIRFilter(i1[0], i1[1]);
        });
    }
    dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this.offset90.dispose(), this._bank0.forEach((t)=>t.disconnect()), this._bank1.forEach((t)=>t.disconnect()), this._oneSampleDelay.disconnect(), this;
    }
};
var xs = class extends k1 {
    constructor(){
        super(o2(xs.getDefaults(), arguments, [
            "frequency"
        ])), this.name = "FrequencyShifter";
        let t = o2(xs.getDefaults(), arguments, [
            "frequency"
        ]);
        this.frequency = new f({
            context: this.context,
            units: "frequency",
            value: t.frequency,
            minValue: -this.context.sampleRate / 2,
            maxValue: this.context.sampleRate / 2
        }), this._sine = new Qt2({
            context: this.context,
            type: "sine"
        }), this._cosine = new S3({
            context: this.context,
            phase: -90,
            type: "sine"
        }), this._sineMultiply = new b1({
            context: this.context
        }), this._cosineMultiply = new b1({
            context: this.context
        }), this._negate = new Ge1({
            context: this.context
        }), this._add = new vt2({
            context: this.context
        }), this._phaseShifter = new ei1({
            context: this.context
        }), this.effectSend.connect(this._phaseShifter), this.frequency.fan(this._sine.frequency, this._cosine.frequency), this._phaseShifter.offset90.connect(this._cosineMultiply), this._cosine.connect(this._cosineMultiply.factor), this._phaseShifter.connect(this._sineMultiply), this._sine.connect(this._sineMultiply.factor), this._sineMultiply.connect(this._negate), this._cosineMultiply.connect(this._add), this._negate.connect(this._add.addend), this._add.connect(this.effectReturn);
        let e = this.immediate();
        this._sine.start(e), this._cosine.start(e);
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            frequency: 0
        });
    }
    dispose() {
        return super.dispose(), this.frequency.dispose(), this._add.dispose(), this._cosine.dispose(), this._cosineMultiply.dispose(), this._negate.dispose(), this._phaseShifter.dispose(), this._sine.dispose(), this._sineMultiply.dispose(), this;
    }
};
var Hi1 = [
    1557 / 44100,
    1617 / 44100,
    1491 / 44100,
    1422 / 44100,
    1277 / 44100,
    1356 / 44100,
    1188 / 44100,
    1116 / 44100
], Xi1 = [
    225,
    556,
    441,
    341
], ys1 = class extends tt2 {
    constructor(){
        super(o2(ys1.getDefaults(), arguments, [
            "roomSize",
            "dampening"
        ])), this.name = "Freeverb", this._combFilters = [], this._allpassFiltersL = [], this._allpassFiltersR = [];
        let t = o2(ys1.getDefaults(), arguments, [
            "roomSize",
            "dampening"
        ]);
        this.roomSize = new f({
            context: this.context,
            value: t.roomSize,
            units: "normalRange"
        }), this._allpassFiltersL = Xi1.map((e)=>{
            let s = this.context.createBiquadFilter();
            return s.type = "allpass", s.frequency.value = e, s;
        }), this._allpassFiltersR = Xi1.map((e)=>{
            let s = this.context.createBiquadFilter();
            return s.type = "allpass", s.frequency.value = e, s;
        }), this._combFilters = Hi1.map((e, s)=>{
            let i1 = new Yt2({
                context: this.context,
                dampening: t.dampening,
                delayTime: e
            });
            return s < Hi1.length / 2 ? this.connectEffectLeft(i1, ...this._allpassFiltersL) : this.connectEffectRight(i1, ...this._allpassFiltersR), this.roomSize.connect(i1.resonance), i1;
        }), u1(this, [
            "roomSize"
        ]);
    }
    static getDefaults() {
        return Object.assign(tt2.getDefaults(), {
            roomSize: .7,
            dampening: 3e3
        });
    }
    get dampening() {
        return this._combFilters[0].dampening;
    }
    set dampening(t) {
        this._combFilters.forEach((e)=>e.dampening = t);
    }
    dispose() {
        return super.dispose(), this._allpassFiltersL.forEach((t)=>t.disconnect()), this._allpassFiltersR.forEach((t)=>t.disconnect()), this._combFilters.forEach((t)=>t.dispose()), this.roomSize.dispose(), this;
    }
};
var Yi1 = [
    1687 / 25e3,
    1601 / 25e3,
    2053 / 25e3,
    2251 / 25e3
], Lo1 = [
    .773,
    .802,
    .753,
    .733
], zo1 = [
    347,
    113,
    37
], vs = class extends tt2 {
    constructor(){
        super(o2(vs.getDefaults(), arguments, [
            "roomSize"
        ])), this.name = "JCReverb", this._allpassFilters = [], this._feedbackCombFilters = [];
        let t = o2(vs.getDefaults(), arguments, [
            "roomSize"
        ]);
        this.roomSize = new f({
            context: this.context,
            value: t.roomSize,
            units: "normalRange"
        }), this._scaleRoomSize = new st2({
            context: this.context,
            min: -.733,
            max: .197
        }), this._allpassFilters = zo1.map((e)=>{
            let s = this.context.createBiquadFilter();
            return s.type = "allpass", s.frequency.value = e, s;
        }), this._feedbackCombFilters = Yi1.map((e, s)=>{
            let i1 = new Ht2({
                context: this.context,
                delayTime: e
            });
            return this._scaleRoomSize.connect(i1.resonance), i1.resonance.value = Lo1[s], s < Yi1.length / 2 ? this.connectEffectLeft(...this._allpassFilters, i1) : this.connectEffectRight(...this._allpassFilters, i1), i1;
        }), this.roomSize.connect(this._scaleRoomSize), u1(this, [
            "roomSize"
        ]);
    }
    static getDefaults() {
        return Object.assign(tt2.getDefaults(), {
            roomSize: .5
        });
    }
    dispose() {
        return super.dispose(), this._allpassFilters.forEach((t)=>t.disconnect()), this._feedbackCombFilters.forEach((t)=>t.dispose()), this.roomSize.dispose(), this._scaleRoomSize.dispose(), this;
    }
};
var bs1 = class extends Ce2 {
    constructor(t){
        super(t), this._feedbackL.disconnect(), this._feedbackL.connect(this._feedbackMerge, 0, 1), this._feedbackR.disconnect(), this._feedbackR.connect(this._feedbackMerge, 0, 0), u1(this, [
            "feedback"
        ]);
    }
};
var Ts1 = class extends bs1 {
    constructor(){
        super(o2(Ts1.getDefaults(), arguments, [
            "delayTime",
            "feedback"
        ])), this.name = "PingPongDelay";
        let t = o2(Ts1.getDefaults(), arguments, [
            "delayTime",
            "feedback"
        ]);
        this._leftDelay = new B2({
            context: this.context,
            maxDelay: t.maxDelay
        }), this._rightDelay = new B2({
            context: this.context,
            maxDelay: t.maxDelay
        }), this._rightPreDelay = new B2({
            context: this.context,
            maxDelay: t.maxDelay
        }), this.delayTime = new f({
            context: this.context,
            units: "time",
            value: t.delayTime
        }), this.connectEffectLeft(this._leftDelay), this.connectEffectRight(this._rightPreDelay, this._rightDelay), this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime), this._feedbackL.disconnect(), this._feedbackL.connect(this._rightDelay), u1(this, [
            "delayTime"
        ]);
    }
    static getDefaults() {
        return Object.assign(bs1.getDefaults(), {
            delayTime: .25,
            maxDelay: 1
        });
    }
    dispose() {
        return super.dispose(), this._leftDelay.dispose(), this._rightDelay.dispose(), this._rightPreDelay.dispose(), this.delayTime.dispose(), this;
    }
};
var ws1 = class extends de2 {
    constructor(){
        super(o2(ws1.getDefaults(), arguments, [
            "pitch"
        ])), this.name = "PitchShift";
        let t = o2(ws1.getDefaults(), arguments, [
            "pitch"
        ]);
        this._frequency = new f({
            context: this.context
        }), this._delayA = new B2({
            maxDelay: 1,
            context: this.context
        }), this._lfoA = new I1({
            context: this.context,
            min: 0,
            max: .1,
            type: "sawtooth"
        }).connect(this._delayA.delayTime), this._delayB = new B2({
            maxDelay: 1,
            context: this.context
        }), this._lfoB = new I1({
            context: this.context,
            min: 0,
            max: .1,
            type: "sawtooth",
            phase: 180
        }).connect(this._delayB.delayTime), this._crossFade = new At2({
            context: this.context
        }), this._crossFadeLFO = new I1({
            context: this.context,
            min: 0,
            max: 1,
            type: "triangle",
            phase: 90
        }).connect(this._crossFade.fade), this._feedbackDelay = new B2({
            delayTime: t.delayTime,
            context: this.context
        }), this.delayTime = this._feedbackDelay.delayTime, u1(this, "delayTime"), this._pitch = t.pitch, this._windowSize = t.windowSize, this._delayA.connect(this._crossFade.a), this._delayB.connect(this._crossFade.b), this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency), this.effectSend.fan(this._delayA, this._delayB), this._crossFade.chain(this._feedbackDelay, this.effectReturn);
        let e = this.now();
        this._lfoA.start(e), this._lfoB.start(e), this._crossFadeLFO.start(e), this.windowSize = this._windowSize;
    }
    static getDefaults() {
        return Object.assign(de2.getDefaults(), {
            pitch: 0,
            windowSize: .1,
            delayTime: 0,
            feedback: 0
        });
    }
    get pitch() {
        return this._pitch;
    }
    set pitch(t) {
        this._pitch = t;
        let e = 0;
        t < 0 ? (this._lfoA.min = 0, this._lfoA.max = this._windowSize, this._lfoB.min = 0, this._lfoB.max = this._windowSize, e = Rt2(t - 1) + 1) : (this._lfoA.min = this._windowSize, this._lfoA.max = 0, this._lfoB.min = this._windowSize, this._lfoB.max = 0, e = Rt2(t) - 1), this._frequency.value = e * (1.2 / this._windowSize);
    }
    get windowSize() {
        return this._windowSize;
    }
    set windowSize(t) {
        this._windowSize = this.toSeconds(t), this.pitch = this._pitch;
    }
    dispose() {
        return super.dispose(), this._frequency.dispose(), this._delayA.dispose(), this._delayB.dispose(), this._lfoA.dispose(), this._lfoB.dispose(), this._crossFade.dispose(), this._crossFadeLFO.dispose(), this._feedbackDelay.dispose(), this;
    }
};
var Ss = class extends tt2 {
    constructor(){
        super(o2(Ss.getDefaults(), arguments, [
            "frequency",
            "octaves",
            "baseFrequency"
        ])), this.name = "Phaser";
        let t = o2(Ss.getDefaults(), arguments, [
            "frequency",
            "octaves",
            "baseFrequency"
        ]);
        this._lfoL = new I1({
            context: this.context,
            frequency: t.frequency,
            min: 0,
            max: 1
        }), this._lfoR = new I1({
            context: this.context,
            frequency: t.frequency,
            min: 0,
            max: 1,
            phase: 180
        }), this._baseFrequency = this.toFrequency(t.baseFrequency), this._octaves = t.octaves, this.Q = new f({
            context: this.context,
            value: t.Q,
            units: "positive"
        }), this._filtersL = this._makeFilters(t.stages, this._lfoL), this._filtersR = this._makeFilters(t.stages, this._lfoR), this.frequency = this._lfoL.frequency, this.frequency.value = t.frequency, this.connectEffectLeft(...this._filtersL), this.connectEffectRight(...this._filtersR), this._lfoL.frequency.connect(this._lfoR.frequency), this.baseFrequency = t.baseFrequency, this.octaves = t.octaves, this._lfoL.start(), this._lfoR.start(), u1(this, [
            "frequency",
            "Q"
        ]);
    }
    static getDefaults() {
        return Object.assign(tt2.getDefaults(), {
            frequency: .5,
            octaves: 3,
            stages: 10,
            Q: 10,
            baseFrequency: 350
        });
    }
    _makeFilters(t, e) {
        let s = [];
        for(let i1 = 0; i1 < t; i1++){
            let r = this.context.createBiquadFilter();
            r.type = "allpass", this.Q.connect(r.Q), e.connect(r.frequency), s.push(r);
        }
        return s;
    }
    get octaves() {
        return this._octaves;
    }
    set octaves(t) {
        this._octaves = t;
        let e = this._baseFrequency * Math.pow(2, t);
        this._lfoL.max = e, this._lfoR.max = e;
    }
    get baseFrequency() {
        return this._baseFrequency;
    }
    set baseFrequency(t) {
        this._baseFrequency = this.toFrequency(t), this._lfoL.min = this._baseFrequency, this._lfoR.min = this._baseFrequency, this.octaves = this._octaves;
    }
    dispose() {
        return super.dispose(), this.Q.dispose(), this._lfoL.dispose(), this._lfoR.dispose(), this._filtersL.forEach((t)=>t.disconnect()), this._filtersR.forEach((t)=>t.disconnect()), this.frequency.dispose(), this;
    }
};
var ks1 = class extends k1 {
    constructor(){
        super(o2(ks1.getDefaults(), arguments, [
            "decay"
        ])), this.name = "Reverb", this._convolver = this.context.createConvolver(), this.ready = Promise.resolve();
        let t = o2(ks1.getDefaults(), arguments, [
            "decay"
        ]);
        this._decay = t.decay, this._preDelay = t.preDelay, this.generate(), this.connectEffect(this._convolver);
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            decay: 1.5,
            preDelay: .01
        });
    }
    get decay() {
        return this._decay;
    }
    set decay(t) {
        t = this.toSeconds(t), q2(t, .001), this._decay = t, this.generate();
    }
    get preDelay() {
        return this._preDelay;
    }
    set preDelay(t) {
        t = this.toSeconds(t), q2(t, 0), this._preDelay = t, this.generate();
    }
    generate() {
        return M3(this, void 0, void 0, function*() {
            let t = this.ready, e = new gt2(2, this._decay + this._preDelay, this.context.sampleRate), s = new pt2({
                context: e
            }), i1 = new pt2({
                context: e
            }), r = new nt2({
                context: e
            });
            s.connect(r, 0, 0), i1.connect(r, 0, 1);
            let a = new l1({
                context: e
            }).toDestination();
            r.connect(a), s.start(0), i1.start(0), a.gain.setValueAtTime(0, 0), a.gain.setValueAtTime(1, this._preDelay), a.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay);
            let c = e.render();
            return this.ready = c.then(_2), yield t, this._convolver.buffer = (yield c).get(), this;
        });
    }
    dispose() {
        return super.dispose(), this._convolver.disconnect(), this;
    }
};
var _e2 = class extends h1 {
    constructor(){
        super(o2(_e2.getDefaults(), arguments)), this.name = "MidSideSplit", this._split = this.input = new ft2({
            channels: 2,
            context: this.context
        }), this._midAdd = new vt2({
            context: this.context
        }), this.mid = new b1({
            context: this.context,
            value: Math.SQRT1_2
        }), this._sideSubtract = new bt2({
            context: this.context
        }), this.side = new b1({
            context: this.context,
            value: Math.SQRT1_2
        }), this._split.connect(this._midAdd, 0), this._split.connect(this._midAdd.addend, 1), this._split.connect(this._sideSubtract, 0), this._split.connect(this._sideSubtract.subtrahend, 1), this._midAdd.connect(this.mid), this._sideSubtract.connect(this.side);
    }
    dispose() {
        return super.dispose(), this.mid.dispose(), this.side.dispose(), this._midAdd.dispose(), this._sideSubtract.dispose(), this._split.dispose(), this;
    }
};
var ge2 = class extends h1 {
    constructor(){
        super(o2(ge2.getDefaults(), arguments)), this.name = "MidSideMerge", this.mid = new l1({
            context: this.context
        }), this.side = new l1({
            context: this.context
        }), this._left = new vt2({
            context: this.context
        }), this._leftMult = new b1({
            context: this.context,
            value: Math.SQRT1_2
        }), this._right = new bt2({
            context: this.context
        }), this._rightMult = new b1({
            context: this.context,
            value: Math.SQRT1_2
        }), this._merge = this.output = new nt2({
            context: this.context
        }), this.mid.fan(this._left), this.side.connect(this._left.addend), this.mid.connect(this._right), this.side.connect(this._right.subtrahend), this._left.connect(this._leftMult), this._right.connect(this._rightMult), this._leftMult.connect(this._merge, 0, 0), this._rightMult.connect(this._merge, 0, 1);
    }
    dispose() {
        return super.dispose(), this.mid.dispose(), this.side.dispose(), this._leftMult.dispose(), this._rightMult.dispose(), this._left.dispose(), this._right.dispose(), this;
    }
};
var As = class extends k1 {
    constructor(t){
        super(t), this.name = "MidSideEffect", this._midSideMerge = new ge2({
            context: this.context
        }), this._midSideSplit = new _e2({
            context: this.context
        }), this._midSend = this._midSideSplit.mid, this._sideSend = this._midSideSplit.side, this._midReturn = this._midSideMerge.mid, this._sideReturn = this._midSideMerge.side, this.effectSend.connect(this._midSideSplit), this._midSideMerge.connect(this.effectReturn);
    }
    connectEffectMid(...t) {
        this._midSend.chain(...t, this._midReturn);
    }
    connectEffectSide(...t) {
        this._sideSend.chain(...t, this._sideReturn);
    }
    dispose() {
        return super.dispose(), this._midSideSplit.dispose(), this._midSideMerge.dispose(), this._midSend.dispose(), this._sideSend.dispose(), this._midReturn.dispose(), this._sideReturn.dispose(), this;
    }
};
var Ds1 = class extends As {
    constructor(){
        super(o2(Ds1.getDefaults(), arguments, [
            "width"
        ])), this.name = "StereoWidener";
        let t = o2(Ds1.getDefaults(), arguments, [
            "width"
        ]);
        this.width = new f({
            context: this.context,
            value: t.width,
            units: "normalRange"
        }), u1(this, [
            "width"
        ]), this._twoTimesWidthMid = new b1({
            context: this.context,
            value: 2
        }), this._twoTimesWidthSide = new b1({
            context: this.context,
            value: 2
        }), this._midMult = new b1({
            context: this.context
        }), this._twoTimesWidthMid.connect(this._midMult.factor), this.connectEffectMid(this._midMult), this._oneMinusWidth = new bt2({
            context: this.context
        }), this._oneMinusWidth.connect(this._twoTimesWidthMid), P2(this.context.getConstant(1), this._oneMinusWidth), this.width.connect(this._oneMinusWidth.subtrahend), this._sideMult = new b1({
            context: this.context
        }), this.width.connect(this._twoTimesWidthSide), this._twoTimesWidthSide.connect(this._sideMult.factor), this.connectEffectSide(this._sideMult);
    }
    static getDefaults() {
        return Object.assign(As.getDefaults(), {
            width: .5
        });
    }
    dispose() {
        return super.dispose(), this.width.dispose(), this._midMult.dispose(), this._sideMult.dispose(), this._twoTimesWidthMid.dispose(), this._twoTimesWidthSide.dispose(), this._oneMinusWidth.dispose(), this;
    }
};
var Os1 = class extends tt2 {
    constructor(){
        super(o2(Os1.getDefaults(), arguments, [
            "frequency",
            "depth"
        ])), this.name = "Tremolo";
        let t = o2(Os1.getDefaults(), arguments, [
            "frequency",
            "depth"
        ]);
        this._lfoL = new I1({
            context: this.context,
            type: t.type,
            min: 1,
            max: 0
        }), this._lfoR = new I1({
            context: this.context,
            type: t.type,
            min: 1,
            max: 0
        }), this._amplitudeL = new l1({
            context: this.context
        }), this._amplitudeR = new l1({
            context: this.context
        }), this.frequency = new f({
            context: this.context,
            value: t.frequency,
            units: "frequency"
        }), this.depth = new f({
            context: this.context,
            value: t.depth,
            units: "normalRange"
        }), u1(this, [
            "frequency",
            "depth"
        ]), this.connectEffectLeft(this._amplitudeL), this.connectEffectRight(this._amplitudeR), this._lfoL.connect(this._amplitudeL.gain), this._lfoR.connect(this._amplitudeR.gain), this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency), this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude), this.spread = t.spread;
    }
    static getDefaults() {
        return Object.assign(tt2.getDefaults(), {
            frequency: 10,
            type: "sine",
            depth: .5,
            spread: 180
        });
    }
    start(t) {
        return this._lfoL.start(t), this._lfoR.start(t), this;
    }
    stop(t) {
        return this._lfoL.stop(t), this._lfoR.stop(t), this;
    }
    sync() {
        return this._lfoL.sync(), this._lfoR.sync(), this.context.transport.syncSignal(this.frequency), this;
    }
    unsync() {
        return this._lfoL.unsync(), this._lfoR.unsync(), this.context.transport.unsyncSignal(this.frequency), this;
    }
    get type() {
        return this._lfoL.type;
    }
    set type(t) {
        this._lfoL.type = t, this._lfoR.type = t;
    }
    get spread() {
        return this._lfoR.phase - this._lfoL.phase;
    }
    set spread(t) {
        this._lfoL.phase = 90 - t / 2, this._lfoR.phase = t / 2 + 90;
    }
    dispose() {
        return super.dispose(), this._lfoL.dispose(), this._lfoR.dispose(), this._amplitudeL.dispose(), this._amplitudeR.dispose(), this.frequency.dispose(), this.depth.dispose(), this;
    }
};
var qs1 = class extends k1 {
    constructor(){
        super(o2(qs1.getDefaults(), arguments, [
            "frequency",
            "depth"
        ])), this.name = "Vibrato";
        let t = o2(qs1.getDefaults(), arguments, [
            "frequency",
            "depth"
        ]);
        this._delayNode = new B2({
            context: this.context,
            delayTime: 0,
            maxDelay: t.maxDelay
        }), this._lfo = new I1({
            context: this.context,
            type: t.type,
            min: 0,
            max: t.maxDelay,
            frequency: t.frequency,
            phase: -90
        }).start().connect(this._delayNode.delayTime), this.frequency = this._lfo.frequency, this.depth = this._lfo.amplitude, this.depth.value = t.depth, u1(this, [
            "frequency",
            "depth"
        ]), this.effectSend.chain(this._delayNode, this.effectReturn);
    }
    static getDefaults() {
        return Object.assign(k1.getDefaults(), {
            maxDelay: .005,
            frequency: 5,
            depth: .1,
            type: "sine"
        });
    }
    get type() {
        return this._lfo.type;
    }
    set type(t) {
        this._lfo.type = t;
    }
    dispose() {
        return super.dispose(), this._delayNode.dispose(), this._lfo.dispose(), this.frequency.dispose(), this.depth.dispose(), this;
    }
};
var Kt2 = class extends h1 {
    constructor(){
        super(o2(Kt2.getDefaults(), arguments, [
            "type",
            "size"
        ])), this.name = "Analyser", this._analysers = [], this._buffers = [];
        let t = o2(Kt2.getDefaults(), arguments, [
            "type",
            "size"
        ]);
        this.input = this.output = this._gain = new l1({
            context: this.context
        }), this._split = new ft2({
            context: this.context,
            channels: t.channels
        }), this.input.connect(this._split), q2(t.channels, 1);
        for(let e = 0; e < t.channels; e++)this._analysers[e] = this.context.createAnalyser(), this._split.connect(this._analysers[e], e, 0);
        this.size = t.size, this.type = t.type, this.smoothing = t.smoothing;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            size: 1024,
            smoothing: .8,
            type: "fft",
            channels: 1
        });
    }
    getValue() {
        return this._analysers.forEach((t, e)=>{
            let s = this._buffers[e];
            this._type === "fft" ? t.getFloatFrequencyData(s) : this._type === "waveform" && t.getFloatTimeDomainData(s);
        }), this.channels === 1 ? this._buffers[0] : this._buffers;
    }
    get size() {
        return this._analysers[0].frequencyBinCount;
    }
    set size(t) {
        this._analysers.forEach((e, s)=>{
            e.fftSize = t * 2, this._buffers[s] = new Float32Array(t);
        });
    }
    get channels() {
        return this._analysers.length;
    }
    get type() {
        return this._type;
    }
    set type(t) {
        m3(t === "waveform" || t === "fft", `Analyser: invalid type: ${t}`), this._type = t;
    }
    get smoothing() {
        return this._analysers[0].smoothingTimeConstant;
    }
    set smoothing(t) {
        this._analysers.forEach((e)=>e.smoothingTimeConstant = t);
    }
    dispose() {
        return super.dispose(), this._analysers.forEach((t)=>t.disconnect()), this._split.dispose(), this._gain.dispose(), this;
    }
};
var ut2 = class extends h1 {
    constructor(){
        super(o2(ut2.getDefaults(), arguments)), this.name = "MeterBase", this.input = this.output = this._analyser = new Kt2({
            context: this.context,
            size: 256,
            type: "waveform"
        });
    }
    dispose() {
        return super.dispose(), this._analyser.dispose(), this;
    }
};
var Rs1 = class extends ut2 {
    constructor(){
        super(o2(Rs1.getDefaults(), arguments, [
            "smoothing"
        ])), this.name = "Meter";
        let t = o2(Rs1.getDefaults(), arguments, [
            "smoothing"
        ]);
        this.input = this.output = this._analyser = new Kt2({
            context: this.context,
            size: 256,
            type: "waveform",
            channels: t.channelCount
        }), this.smoothing = t.smoothing, this.normalRange = t.normalRange, this._rms = new Array(t.channelCount), this._rms.fill(0);
    }
    static getDefaults() {
        return Object.assign(ut2.getDefaults(), {
            smoothing: .8,
            normalRange: !1,
            channelCount: 1
        });
    }
    getLevel() {
        return Nt2("'getLevel' has been changed to 'getValue'"), this.getValue();
    }
    getValue() {
        let t = this._analyser.getValue(), s = (this.channels === 1 ? [
            t
        ] : t).map((i1, r)=>{
            let a = i1.reduce((p1, x1)=>p1 + x1 * x1, 0), c = Math.sqrt(a / i1.length);
            return this._rms[r] = Math.max(c, this._rms[r] * this.smoothing), this.normalRange ? this._rms[r] : Wt2(this._rms[r]);
        });
        return this.channels === 1 ? s[0] : s;
    }
    get channels() {
        return this._analyser.channels;
    }
    dispose() {
        return super.dispose(), this._analyser.dispose(), this;
    }
};
var Fs1 = class extends ut2 {
    constructor(){
        super(o2(Fs1.getDefaults(), arguments, [
            "size"
        ])), this.name = "FFT";
        let t = o2(Fs1.getDefaults(), arguments, [
            "size"
        ]);
        this.normalRange = t.normalRange, this._analyser.type = "fft", this.size = t.size;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            normalRange: !1,
            size: 1024,
            smoothing: .8
        });
    }
    getValue() {
        return this._analyser.getValue().map((e)=>this.normalRange ? qt2(e) : e);
    }
    get size() {
        return this._analyser.size;
    }
    set size(t) {
        this._analyser.size = t;
    }
    get smoothing() {
        return this._analyser.smoothing;
    }
    set smoothing(t) {
        this._analyser.smoothing = t;
    }
    getFrequencyOfIndex(t) {
        return m3(0 <= t && t < this.size, `index must be greater than or equal to 0 and less than ${this.size}`), t * this.context.sampleRate / (this.size * 2);
    }
};
var si1 = class extends ut2 {
    constructor(){
        super(o2(si1.getDefaults(), arguments)), this.name = "DCMeter", this._analyser.type = "waveform", this._analyser.size = 256;
    }
    getValue() {
        return this._analyser.getValue()[0];
    }
};
var Es1 = class extends ut2 {
    constructor(){
        super(o2(Es1.getDefaults(), arguments, [
            "size"
        ])), this.name = "Waveform";
        let t = o2(Es1.getDefaults(), arguments, [
            "size"
        ]);
        this._analyser.type = "waveform", this.size = t.size;
    }
    static getDefaults() {
        return Object.assign(ut2.getDefaults(), {
            size: 1024
        });
    }
    getValue() {
        return this._analyser.getValue();
    }
    get size() {
        return this._analyser.size;
    }
    set size(t) {
        this._analyser.size = t;
    }
};
var j2 = class extends h1 {
    constructor(){
        super(o2(j2.getDefaults(), arguments, [
            "solo"
        ])), this.name = "Solo";
        let t = o2(j2.getDefaults(), arguments, [
            "solo"
        ]);
        this.input = this.output = new l1({
            context: this.context
        }), j2._allSolos.has(this.context) || j2._allSolos.set(this.context, new Set), j2._allSolos.get(this.context).add(this), this.solo = t.solo;
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            solo: !1
        });
    }
    get solo() {
        return this._isSoloed();
    }
    set solo(t) {
        t ? this._addSolo() : this._removeSolo(), j2._allSolos.get(this.context).forEach((e)=>e._updateSolo());
    }
    get muted() {
        return this.input.gain.value === 0;
    }
    _addSolo() {
        j2._soloed.has(this.context) || j2._soloed.set(this.context, new Set), j2._soloed.get(this.context).add(this);
    }
    _removeSolo() {
        j2._soloed.has(this.context) && j2._soloed.get(this.context).delete(this);
    }
    _isSoloed() {
        return j2._soloed.has(this.context) && j2._soloed.get(this.context).has(this);
    }
    _noSolos() {
        return !j2._soloed.has(this.context) || j2._soloed.has(this.context) && j2._soloed.get(this.context).size === 0;
    }
    _updateSolo() {
        this._isSoloed() ? this.input.gain.value = 1 : this._noSolos() ? this.input.gain.value = 1 : this.input.gain.value = 0;
    }
    dispose() {
        return super.dispose(), j2._allSolos.get(this.context).delete(this), this._removeSolo(), this;
    }
};
j2._allSolos = new Map;
j2._soloed = new Map;
var Ve1 = class extends h1 {
    constructor(){
        super(o2(Ve1.getDefaults(), arguments, [
            "pan",
            "volume"
        ])), this.name = "PanVol";
        let t = o2(Ve1.getDefaults(), arguments, [
            "pan",
            "volume"
        ]);
        this._panner = this.input = new Zt2({
            context: this.context,
            pan: t.pan,
            channelCount: t.channelCount
        }), this.pan = this._panner.pan, this._volume = this.output = new K4({
            context: this.context,
            volume: t.volume
        }), this.volume = this._volume.volume, this._panner.connect(this._volume), this.mute = t.mute, u1(this, [
            "pan",
            "volume"
        ]);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            mute: !1,
            pan: 0,
            volume: 0,
            channelCount: 1
        });
    }
    get mute() {
        return this._volume.mute;
    }
    set mute(t) {
        this._volume.mute = t;
    }
    dispose() {
        return super.dispose(), this._panner.dispose(), this.pan.dispose(), this._volume.dispose(), this.volume.dispose(), this;
    }
};
var te3 = class extends h1 {
    constructor(){
        super(o2(te3.getDefaults(), arguments, [
            "volume",
            "pan"
        ])), this.name = "Channel";
        let t = o2(te3.getDefaults(), arguments, [
            "volume",
            "pan"
        ]);
        this._solo = this.input = new j2({
            solo: t.solo,
            context: this.context
        }), this._panVol = this.output = new Ve1({
            context: this.context,
            pan: t.pan,
            volume: t.volume,
            mute: t.mute,
            channelCount: t.channelCount
        }), this.pan = this._panVol.pan, this.volume = this._panVol.volume, this._solo.connect(this._panVol), u1(this, [
            "pan",
            "volume"
        ]);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            pan: 0,
            volume: 0,
            mute: !1,
            solo: !1,
            channelCount: 1
        });
    }
    get solo() {
        return this._solo.solo;
    }
    set solo(t) {
        this._solo.solo = t;
    }
    get muted() {
        return this._solo.muted || this.mute;
    }
    get mute() {
        return this._panVol.mute;
    }
    set mute(t) {
        this._panVol.mute = t;
    }
    _getBus(t) {
        return te3.buses.has(t) || te3.buses.set(t, new l1({
            context: this.context
        })), te3.buses.get(t);
    }
    send(t, e = 0) {
        let s = this._getBus(t), i1 = new l1({
            context: this.context,
            units: "decibels",
            gain: e
        });
        return this.connect(i1), i1.connect(s), i1;
    }
    receive(t) {
        return this._getBus(t).connect(this), this;
    }
    dispose() {
        return super.dispose(), this._panVol.dispose(), this.pan.dispose(), this.volume.dispose(), this._solo.dispose(), this;
    }
};
te3.buses = new Map;
var ii1 = class extends h1 {
    constructor(){
        super(o2(ii1.getDefaults(), arguments)), this.name = "Mono", this.input = new l1({
            context: this.context
        }), this._merge = this.output = new nt2({
            channels: 2,
            context: this.context
        }), this.input.connect(this._merge, 0, 0), this.input.connect(this._merge, 0, 1);
    }
    dispose() {
        return super.dispose(), this._merge.dispose(), this.input.dispose(), this;
    }
};
var ee1 = class extends h1 {
    constructor(){
        super(o2(ee1.getDefaults(), arguments, [
            "lowFrequency",
            "highFrequency"
        ])), this.name = "MultibandSplit", this.input = new l1({
            context: this.context
        }), this.output = void 0, this.low = new $1({
            context: this.context,
            frequency: 0,
            type: "lowpass"
        }), this._lowMidFilter = new $1({
            context: this.context,
            frequency: 0,
            type: "highpass"
        }), this.mid = new $1({
            context: this.context,
            frequency: 0,
            type: "lowpass"
        }), this.high = new $1({
            context: this.context,
            frequency: 0,
            type: "highpass"
        }), this._internalChannels = [
            this.low,
            this.mid,
            this.high
        ];
        let t = o2(ee1.getDefaults(), arguments, [
            "lowFrequency",
            "highFrequency"
        ]);
        this.lowFrequency = new f({
            context: this.context,
            units: "frequency",
            value: t.lowFrequency
        }), this.highFrequency = new f({
            context: this.context,
            units: "frequency",
            value: t.highFrequency
        }), this.Q = new f({
            context: this.context,
            units: "positive",
            value: t.Q
        }), this.input.fan(this.low, this.high), this.input.chain(this._lowMidFilter, this.mid), this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency), this.highFrequency.fan(this.mid.frequency, this.high.frequency), this.Q.connect(this.low.Q), this.Q.connect(this._lowMidFilter.Q), this.Q.connect(this.mid.Q), this.Q.connect(this.high.Q), u1(this, [
            "high",
            "mid",
            "low",
            "highFrequency",
            "lowFrequency"
        ]);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            Q: 1,
            highFrequency: 2500,
            lowFrequency: 400
        });
    }
    dispose() {
        return super.dispose(), Gt2(this, [
            "high",
            "mid",
            "low",
            "highFrequency",
            "lowFrequency"
        ]), this.low.dispose(), this._lowMidFilter.dispose(), this.mid.dispose(), this.high.dispose(), this.lowFrequency.dispose(), this.highFrequency.dispose(), this.Q.dispose(), this;
    }
};
var gi1 = class extends h1 {
    constructor(){
        super(...arguments), this.name = "Listener", this.positionX = new d2({
            context: this.context,
            param: this.context.rawContext.listener.positionX
        }), this.positionY = new d2({
            context: this.context,
            param: this.context.rawContext.listener.positionY
        }), this.positionZ = new d2({
            context: this.context,
            param: this.context.rawContext.listener.positionZ
        }), this.forwardX = new d2({
            context: this.context,
            param: this.context.rawContext.listener.forwardX
        }), this.forwardY = new d2({
            context: this.context,
            param: this.context.rawContext.listener.forwardY
        }), this.forwardZ = new d2({
            context: this.context,
            param: this.context.rawContext.listener.forwardZ
        }), this.upX = new d2({
            context: this.context,
            param: this.context.rawContext.listener.upX
        }), this.upY = new d2({
            context: this.context,
            param: this.context.rawContext.listener.upY
        }), this.upZ = new d2({
            context: this.context,
            param: this.context.rawContext.listener.upZ
        });
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            positionX: 0,
            positionY: 0,
            positionZ: 0,
            forwardX: 0,
            forwardY: 0,
            forwardZ: -1,
            upX: 0,
            upY: 1,
            upZ: 0
        });
    }
    dispose() {
        return super.dispose(), this.positionX.dispose(), this.positionY.dispose(), this.positionZ.dispose(), this.forwardX.dispose(), this.forwardY.dispose(), this.forwardZ.dispose(), this.upX.dispose(), this.upY.dispose(), this.upZ.dispose(), this;
    }
};
ie3((n)=>{
    n.listener = new gi1({
        context: n
    });
});
oe3((n)=>{
    n.listener.dispose();
});
var Cs = class extends h1 {
    constructor(){
        super(o2(Cs.getDefaults(), arguments, [
            "positionX",
            "positionY",
            "positionZ"
        ])), this.name = "Panner3D";
        let t = o2(Cs.getDefaults(), arguments, [
            "positionX",
            "positionY",
            "positionZ"
        ]);
        this._panner = this.input = this.output = this.context.createPanner(), this.panningModel = t.panningModel, this.maxDistance = t.maxDistance, this.distanceModel = t.distanceModel, this.coneOuterGain = t.coneOuterGain, this.coneOuterAngle = t.coneOuterAngle, this.coneInnerAngle = t.coneInnerAngle, this.refDistance = t.refDistance, this.rolloffFactor = t.rolloffFactor, this.positionX = new d2({
            context: this.context,
            param: this._panner.positionX,
            value: t.positionX
        }), this.positionY = new d2({
            context: this.context,
            param: this._panner.positionY,
            value: t.positionY
        }), this.positionZ = new d2({
            context: this.context,
            param: this._panner.positionZ,
            value: t.positionZ
        }), this.orientationX = new d2({
            context: this.context,
            param: this._panner.orientationX,
            value: t.orientationX
        }), this.orientationY = new d2({
            context: this.context,
            param: this._panner.orientationY,
            value: t.orientationY
        }), this.orientationZ = new d2({
            context: this.context,
            param: this._panner.orientationZ,
            value: t.orientationZ
        });
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            coneInnerAngle: 360,
            coneOuterAngle: 360,
            coneOuterGain: 0,
            distanceModel: "inverse",
            maxDistance: 1e4,
            orientationX: 0,
            orientationY: 0,
            orientationZ: 0,
            panningModel: "equalpower",
            positionX: 0,
            positionY: 0,
            positionZ: 0,
            refDistance: 1,
            rolloffFactor: 1
        });
    }
    setPosition(t, e, s) {
        return this.positionX.value = t, this.positionY.value = e, this.positionZ.value = s, this;
    }
    setOrientation(t, e, s) {
        return this.orientationX.value = t, this.orientationY.value = e, this.orientationZ.value = s, this;
    }
    get panningModel() {
        return this._panner.panningModel;
    }
    set panningModel(t) {
        this._panner.panningModel = t;
    }
    get refDistance() {
        return this._panner.refDistance;
    }
    set refDistance(t) {
        this._panner.refDistance = t;
    }
    get rolloffFactor() {
        return this._panner.rolloffFactor;
    }
    set rolloffFactor(t) {
        this._panner.rolloffFactor = t;
    }
    get distanceModel() {
        return this._panner.distanceModel;
    }
    set distanceModel(t) {
        this._panner.distanceModel = t;
    }
    get coneInnerAngle() {
        return this._panner.coneInnerAngle;
    }
    set coneInnerAngle(t) {
        this._panner.coneInnerAngle = t;
    }
    get coneOuterAngle() {
        return this._panner.coneOuterAngle;
    }
    set coneOuterAngle(t) {
        this._panner.coneOuterAngle = t;
    }
    get coneOuterGain() {
        return this._panner.coneOuterGain;
    }
    set coneOuterGain(t) {
        this._panner.coneOuterGain = t;
    }
    get maxDistance() {
        return this._panner.maxDistance;
    }
    set maxDistance(t) {
        this._panner.maxDistance = t;
    }
    dispose() {
        return super.dispose(), this._panner.disconnect(), this.orientationX.dispose(), this.orientationY.dispose(), this.orientationZ.dispose(), this.positionX.dispose(), this.positionY.dispose(), this.positionZ.dispose(), this;
    }
};
var Qe2 = class extends h1 {
    constructor(){
        super(o2(Qe2.getDefaults(), arguments)), this.name = "Recorder";
        let t = o2(Qe2.getDefaults(), arguments);
        this.input = new l1({
            context: this.context
        }), m3(Qe2.supported, "Media Recorder API is not available"), this._stream = this.context.createMediaStreamDestination(), this.input.connect(this._stream), this._recorder = new MediaRecorder(this._stream.stream, {
            mimeType: t.mimeType
        });
    }
    static getDefaults() {
        return h1.getDefaults();
    }
    get mimeType() {
        return this._recorder.mimeType;
    }
    static get supported() {
        return _t2 !== null && Reflect.has(_t2, "MediaRecorder");
    }
    get state() {
        return this._recorder.state === "inactive" ? "stopped" : this._recorder.state === "paused" ? "paused" : "started";
    }
    start() {
        return M3(this, void 0, void 0, function*() {
            m3(this.state !== "started", "Recorder is already started");
            let t = new Promise((e)=>{
                let s = ()=>{
                    this._recorder.removeEventListener("start", s, !1), e();
                };
                this._recorder.addEventListener("start", s, !1);
            });
            return this._recorder.start(), yield t;
        });
    }
    stop() {
        return M3(this, void 0, void 0, function*() {
            m3(this.state !== "stopped", "Recorder is not started");
            let t = new Promise((e)=>{
                let s = (i1)=>{
                    this._recorder.removeEventListener("dataavailable", s, !1), e(i1.data);
                };
                this._recorder.addEventListener("dataavailable", s, !1);
            });
            return this._recorder.stop(), yield t;
        });
    }
    pause() {
        return m3(this.state === "started", "Recorder must be started"), this._recorder.pause(), this;
    }
    dispose() {
        return super.dispose(), this.input.dispose(), this._stream.disconnect(), this;
    }
};
var lt2 = class extends h1 {
    constructor(){
        super(o2(lt2.getDefaults(), arguments, [
            "threshold",
            "ratio"
        ])), this.name = "Compressor", this._compressor = this.context.createDynamicsCompressor(), this.input = this._compressor, this.output = this._compressor;
        let t = o2(lt2.getDefaults(), arguments, [
            "threshold",
            "ratio"
        ]);
        this.threshold = new d2({
            minValue: this._compressor.threshold.minValue,
            maxValue: this._compressor.threshold.maxValue,
            context: this.context,
            convert: !1,
            param: this._compressor.threshold,
            units: "decibels",
            value: t.threshold
        }), this.attack = new d2({
            minValue: this._compressor.attack.minValue,
            maxValue: this._compressor.attack.maxValue,
            context: this.context,
            param: this._compressor.attack,
            units: "time",
            value: t.attack
        }), this.release = new d2({
            minValue: this._compressor.release.minValue,
            maxValue: this._compressor.release.maxValue,
            context: this.context,
            param: this._compressor.release,
            units: "time",
            value: t.release
        }), this.knee = new d2({
            minValue: this._compressor.knee.minValue,
            maxValue: this._compressor.knee.maxValue,
            context: this.context,
            convert: !1,
            param: this._compressor.knee,
            units: "decibels",
            value: t.knee
        }), this.ratio = new d2({
            minValue: this._compressor.ratio.minValue,
            maxValue: this._compressor.ratio.maxValue,
            context: this.context,
            convert: !1,
            param: this._compressor.ratio,
            units: "positive",
            value: t.ratio
        }), u1(this, [
            "knee",
            "release",
            "attack",
            "ratio",
            "threshold"
        ]);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            attack: .003,
            knee: 30,
            ratio: 12,
            release: .25,
            threshold: -24
        });
    }
    get reduction() {
        return this._compressor.reduction;
    }
    dispose() {
        return super.dispose(), this._compressor.disconnect(), this.attack.dispose(), this.release.dispose(), this.threshold.dispose(), this.ratio.dispose(), this.knee.dispose(), this;
    }
};
var Vs1 = class extends h1 {
    constructor(){
        super(Object.assign(o2(Vs1.getDefaults(), arguments, [
            "threshold",
            "smoothing"
        ]))), this.name = "Gate";
        let t = o2(Vs1.getDefaults(), arguments, [
            "threshold",
            "smoothing"
        ]);
        this._follower = new Jt2({
            context: this.context,
            smoothing: t.smoothing
        }), this._gt = new Oe2({
            context: this.context,
            value: qt2(t.threshold)
        }), this.input = new l1({
            context: this.context
        }), this._gate = this.output = new l1({
            context: this.context
        }), this.input.connect(this._gate), this.input.chain(this._follower, this._gt, this._gate.gain);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            smoothing: .1,
            threshold: -40
        });
    }
    get threshold() {
        return Wt2(this._gt.value);
    }
    set threshold(t) {
        this._gt.value = qt2(t);
    }
    get smoothing() {
        return this._follower.smoothing;
    }
    set smoothing(t) {
        this._follower.smoothing = t;
    }
    dispose() {
        return super.dispose(), this.input.dispose(), this._follower.dispose(), this._gt.dispose(), this._gate.dispose(), this;
    }
};
var Ms1 = class extends h1 {
    constructor(){
        super(Object.assign(o2(Ms1.getDefaults(), arguments, [
            "threshold"
        ]))), this.name = "Limiter";
        let t = o2(Ms1.getDefaults(), arguments, [
            "threshold"
        ]);
        this._compressor = this.input = this.output = new lt2({
            context: this.context,
            ratio: 20,
            attack: .003,
            release: .01,
            threshold: t.threshold
        }), this.threshold = this._compressor.threshold, u1(this, "threshold");
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            threshold: -12
        });
    }
    get reduction() {
        return this._compressor.reduction;
    }
    dispose() {
        return super.dispose(), this._compressor.dispose(), this.threshold.dispose(), this;
    }
};
var Is1 = class extends h1 {
    constructor(){
        super(Object.assign(o2(Is1.getDefaults(), arguments))), this.name = "MidSideCompressor";
        let t = o2(Is1.getDefaults(), arguments);
        this._midSideSplit = this.input = new _e2({
            context: this.context
        }), this._midSideMerge = this.output = new ge2({
            context: this.context
        }), this.mid = new lt2(Object.assign(t.mid, {
            context: this.context
        })), this.side = new lt2(Object.assign(t.side, {
            context: this.context
        })), this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid), this._midSideSplit.side.chain(this.side, this._midSideMerge.side), u1(this, [
            "mid",
            "side"
        ]);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            mid: {
                ratio: 3,
                threshold: -24,
                release: .03,
                attack: .02,
                knee: 16
            },
            side: {
                ratio: 6,
                threshold: -30,
                release: .25,
                attack: .03,
                knee: 10
            }
        });
    }
    dispose() {
        return super.dispose(), this.mid.dispose(), this.side.dispose(), this._midSideSplit.dispose(), this._midSideMerge.dispose(), this;
    }
};
var js1 = class extends h1 {
    constructor(){
        super(Object.assign(o2(js1.getDefaults(), arguments))), this.name = "MultibandCompressor";
        let t = o2(js1.getDefaults(), arguments);
        this._splitter = this.input = new ee1({
            context: this.context,
            lowFrequency: t.lowFrequency,
            highFrequency: t.highFrequency
        }), this.lowFrequency = this._splitter.lowFrequency, this.highFrequency = this._splitter.highFrequency, this.output = new l1({
            context: this.context
        }), this.low = new lt2(Object.assign(t.low, {
            context: this.context
        })), this.mid = new lt2(Object.assign(t.mid, {
            context: this.context
        })), this.high = new lt2(Object.assign(t.high, {
            context: this.context
        })), this._splitter.low.chain(this.low, this.output), this._splitter.mid.chain(this.mid, this.output), this._splitter.high.chain(this.high, this.output), u1(this, [
            "high",
            "mid",
            "low",
            "highFrequency",
            "lowFrequency"
        ]);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            lowFrequency: 250,
            highFrequency: 2e3,
            low: {
                ratio: 6,
                threshold: -30,
                release: .25,
                attack: .03,
                knee: 10
            },
            mid: {
                ratio: 3,
                threshold: -24,
                release: .03,
                attack: .02,
                knee: 16
            },
            high: {
                ratio: 3,
                threshold: -24,
                release: .03,
                attack: .02,
                knee: 16
            }
        });
    }
    dispose() {
        return super.dispose(), this._splitter.dispose(), this.low.dispose(), this.mid.dispose(), this.high.dispose(), this.output.dispose(), this;
    }
};
var Ns = class extends h1 {
    constructor(){
        super(o2(Ns.getDefaults(), arguments, [
            "low",
            "mid",
            "high"
        ])), this.name = "EQ3", this.output = new l1({
            context: this.context
        }), this._internalChannels = [];
        let t = o2(Ns.getDefaults(), arguments, [
            "low",
            "mid",
            "high"
        ]);
        this.input = this._multibandSplit = new ee1({
            context: this.context,
            highFrequency: t.highFrequency,
            lowFrequency: t.lowFrequency
        }), this._lowGain = new l1({
            context: this.context,
            gain: t.low,
            units: "decibels"
        }), this._midGain = new l1({
            context: this.context,
            gain: t.mid,
            units: "decibels"
        }), this._highGain = new l1({
            context: this.context,
            gain: t.high,
            units: "decibels"
        }), this.low = this._lowGain.gain, this.mid = this._midGain.gain, this.high = this._highGain.gain, this.Q = this._multibandSplit.Q, this.lowFrequency = this._multibandSplit.lowFrequency, this.highFrequency = this._multibandSplit.highFrequency, this._multibandSplit.low.chain(this._lowGain, this.output), this._multibandSplit.mid.chain(this._midGain, this.output), this._multibandSplit.high.chain(this._highGain, this.output), u1(this, [
            "low",
            "mid",
            "high",
            "lowFrequency",
            "highFrequency"
        ]), this._internalChannels = [
            this._multibandSplit
        ];
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            high: 0,
            highFrequency: 2500,
            low: 0,
            lowFrequency: 400,
            mid: 0
        });
    }
    dispose() {
        return super.dispose(), Gt2(this, [
            "low",
            "mid",
            "high",
            "lowFrequency",
            "highFrequency"
        ]), this._multibandSplit.dispose(), this.lowFrequency.dispose(), this.highFrequency.dispose(), this._lowGain.dispose(), this._midGain.dispose(), this._highGain.dispose(), this.low.dispose(), this.mid.dispose(), this.high.dispose(), this.Q.dispose(), this;
    }
};
var Ps1 = class extends h1 {
    constructor(){
        super(o2(Ps1.getDefaults(), arguments, [
            "url",
            "onload"
        ])), this.name = "Convolver", this._convolver = this.context.createConvolver();
        let t = o2(Ps1.getDefaults(), arguments, [
            "url",
            "onload"
        ]);
        this._buffer = new v4(t.url, (e)=>{
            this.buffer = e, t.onload();
        }), this.input = new l1({
            context: this.context
        }), this.output = new l1({
            context: this.context
        }), this._buffer.loaded && (this.buffer = this._buffer), this.normalize = t.normalize, this.input.chain(this._convolver, this.output);
    }
    static getDefaults() {
        return Object.assign(h1.getDefaults(), {
            normalize: !0,
            onload: _2
        });
    }
    load(t) {
        return M3(this, void 0, void 0, function*() {
            this.buffer = yield this._buffer.load(t);
        });
    }
    get buffer() {
        return this._buffer.length ? this._buffer : null;
    }
    set buffer(t) {
        t && this._buffer.set(t), this._convolver.buffer && (this.input.disconnect(), this._convolver.disconnect(), this._convolver = this.context.createConvolver(), this.input.chain(this._convolver, this.output));
        let e = this._buffer.get();
        this._convolver.buffer = e || null;
    }
    get normalize() {
        return this._convolver.normalize;
    }
    set normalize(t) {
        this._convolver.normalize = t;
    }
    dispose() {
        return super.dispose(), this._buffer.dispose(), this._convolver.disconnect(), this;
    }
};
w2().transport;
w2().destination, w2().destination;
w2().listener;
w2().draw;
w2();
var y3 = [
    "input",
    "select",
    "textarea",
    "a[href]",
    "button",
    "[tabindex]:not(slot)",
    "audio[controls]",
    "video[controls]",
    '[contenteditable]:not([contenteditable="false"])',
    "details>summary:first-of-type",
    "details"
], d3 = y3.join(","), p3 = typeof Element > "u", s3 = p3 ? function() {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector, f1 = !p3 && Element.prototype.getRootNode ? function(i1) {
    return i1.getRootNode();
} : function(i1) {
    return i1.ownerDocument;
}, B3 = y3.concat("iframe").join(",");
var v5 = class {
    constructor(){}
    lineAt(e) {
        if (e < 0 || e > this.length) throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
        return this.lineInner(e, !1, 1, 0);
    }
    line(e) {
        if (e < 1 || e > this.lines) throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
        return this.lineInner(e, !0, 1, 0);
    }
    replace(e, t, n) {
        let i1 = [];
        return this.decompose(0, e, i1, 2), n.length && n.decompose(0, n.length, i1, 3), this.decompose(t, this.length, i1, 1), b2.from(i1, this.length - (t - e) + n.length);
    }
    append(e) {
        return this.replace(this.length, this.length, e);
    }
    slice(e, t = this.length) {
        let n = [];
        return this.decompose(e, t, n, 0), b2.from(n, t - e);
    }
    eq(e) {
        if (e == this) return !0;
        if (e.length != this.length || e.lines != this.lines) return !1;
        let t = this.scanIdentical(e, 1), n = this.length - this.scanIdentical(e, -1), i1 = new C5(this), s = new C5(e);
        for(let r = t, h = t;;){
            if (i1.next(r), s.next(r), r = 0, i1.lineBreak != s.lineBreak || i1.done != s.done || i1.value != s.value) return !1;
            if (h += i1.value.length, i1.done || h >= n) return !0;
        }
    }
    iter(e = 1) {
        return new C5(this, e);
    }
    iterRange(e, t = this.length) {
        return new te4(this, e, t);
    }
    iterLines(e, t) {
        let n;
        if (e == null) n = this.iter();
        else {
            t == null && (t = this.lines + 1);
            let i1 = this.line(e).from;
            n = this.iterRange(i1, Math.max(i1, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to));
        }
        return new ne3(n);
    }
    toString() {
        return this.sliceString(0);
    }
    toJSON() {
        let e = [];
        return this.flatten(e), e;
    }
    static of(e) {
        if (e.length == 0) throw new RangeError("A document must have at least one line");
        return e.length == 1 && !e[0] ? v5.empty : e.length <= 32 ? new m4(e) : b2.from(m4.split(e, []));
    }
}, m4 = class extends v5 {
    constructor(e, t = je2(e)){
        super(), this.text = e, this.length = t;
    }
    get lines() {
        return this.text.length;
    }
    get children() {
        return null;
    }
    lineInner(e, t, n, i1) {
        for(let s = 0;; s++){
            let r = this.text[s], h = i1 + r.length;
            if ((t ? n : h) >= e) return new fe3(i1, h, n, r);
            i1 = h + 1, n++;
        }
    }
    decompose(e, t, n, i1) {
        let s = e <= 0 && t >= this.length ? this : new m4(Ie3(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
        if (i1 & 1) {
            let r = n.pop(), h = ee2(s.text, r.text.slice(), 0, s.length);
            if (h.length <= 32) n.push(new m4(h, r.length + s.length));
            else {
                let o = h.length >> 1;
                n.push(new m4(h.slice(0, o)), new m4(h.slice(o)));
            }
        } else n.push(s);
    }
    replace(e, t, n) {
        if (!(n instanceof m4)) return super.replace(e, t, n);
        let i1 = ee2(this.text, ee2(n.text, Ie3(this.text, 0, e)), t), s = this.length + n.length - (t - e);
        return i1.length <= 32 ? new m4(i1, s) : b2.from(m4.split(i1, []), s);
    }
    sliceString(e, t = this.length, n = `
`) {
        let i1 = "";
        for(let s = 0, r = 0; s <= t && r < this.text.length; r++){
            let h = this.text[r], o = s + h.length;
            s > e && r && (i1 += n), e < o && t > s && (i1 += h.slice(Math.max(0, e - s), t - s)), s = o + 1;
        }
        return i1;
    }
    flatten(e) {
        for (let t of this.text)e.push(t);
    }
    scanIdentical() {
        return 0;
    }
    static split(e, t) {
        let n = [], i1 = -1;
        for (let s of e)n.push(s), i1 += s.length + 1, n.length == 32 && (t.push(new m4(n, i1)), n = [], i1 = -1);
        return i1 > -1 && t.push(new m4(n, i1)), t;
    }
}, b2 = class extends v5 {
    constructor(e, t){
        super(), this.children = e, this.length = t, this.lines = 0;
        for (let n of e)this.lines += n.lines;
    }
    lineInner(e, t, n, i1) {
        for(let s = 0;; s++){
            let r = this.children[s], h = i1 + r.length, o = n + r.lines - 1;
            if ((t ? o : h) >= e) return r.lineInner(e, t, n, i1);
            i1 = h + 1, n = o + 1;
        }
    }
    decompose(e, t, n, i1) {
        for(let s = 0, r = 0; r <= t && s < this.children.length; s++){
            let h = this.children[s], o = r + h.length;
            if (e <= o && t >= r) {
                let a = i1 & ((r <= e ? 1 : 0) | (o >= t ? 2 : 0));
                r >= e && o <= t && !a ? n.push(h) : h.decompose(e - r, t - r, n, a);
            }
            r = o + 1;
        }
    }
    replace(e, t, n) {
        if (n.lines < this.lines) for(let i1 = 0, s = 0; i1 < this.children.length; i1++){
            let r = this.children[i1], h = s + r.length;
            if (e >= s && t <= h) {
                let o = r.replace(e - s, t - s, n), a = this.lines - r.lines + o.lines;
                if (o.lines < a >> 5 - 1 && o.lines > a >> 5 + 1) {
                    let f = this.children.slice();
                    return f[i1] = o, new b2(f, this.length - (t - e) + n.length);
                }
                return super.replace(s, h, o);
            }
            s = h + 1;
        }
        return super.replace(e, t, n);
    }
    sliceString(e, t = this.length, n = `
`) {
        let i1 = "";
        for(let s = 0, r = 0; s < this.children.length && r <= t; s++){
            let h = this.children[s], o = r + h.length;
            r > e && s && (i1 += n), e < o && t > r && (i1 += h.sliceString(e - r, t - r, n)), r = o + 1;
        }
        return i1;
    }
    flatten(e) {
        for (let t of this.children)t.flatten(e);
    }
    scanIdentical(e, t) {
        if (!(e instanceof b2)) return 0;
        let n = 0, [i1, s, r, h] = t > 0 ? [
            0,
            0,
            this.children.length,
            e.children.length
        ] : [
            this.children.length - 1,
            e.children.length - 1,
            -1,
            -1
        ];
        for(;; i1 += t, s += t){
            if (i1 == r || s == h) return n;
            let o = this.children[i1], a = e.children[s];
            if (o != a) return n + o.scanIdentical(a, t);
            n += o.length + 1;
        }
    }
    static from(e, t = e.reduce((n, i1)=>n + i1.length + 1, -1)) {
        let n = 0;
        for (let d1 of e)n += d1.lines;
        if (n < 32) {
            let d11 = [];
            for (let p1 of e)p1.flatten(d11);
            return new m4(d11, t);
        }
        let i1 = Math.max(32, n >> 5), s = i1 << 1, r = i1 >> 1, h = [], o = 0, a = -1, f = [];
        function u(d1) {
            let p1;
            if (d1.lines > s && d1 instanceof b2) for (let E of d1.children)u(E);
            else d1.lines > r && (o > r || !o) ? (c(), h.push(d1)) : d1 instanceof m4 && o && (p1 = f[f.length - 1]) instanceof m4 && d1.lines + p1.lines <= 32 ? (o += d1.lines, a += d1.length + 1, f[f.length - 1] = new m4(p1.text.concat(d1.text), p1.length + 1 + d1.length)) : (o + d1.lines > i1 && c(), o += d1.lines, a += d1.length + 1, f.push(d1));
        }
        function c() {
            o != 0 && (h.push(f.length == 1 ? f[0] : b2.from(f, a)), a = -1, o = f.length = 0);
        }
        for (let d2 of e)u(d2);
        return c(), h.length == 1 ? h[0] : new b2(h, t);
    }
};
v5.empty = new m4([
    ""
], 0);
function je2(l) {
    let e = -1;
    for (let t of l)e += t.length + 1;
    return e;
}
function ee2(l, e, t = 0, n = 1e9) {
    for(let i1 = 0, s = 0, r = !0; s < l.length && i1 <= n; s++){
        let h = l[s], o = i1 + h.length;
        o >= t && (o > n && (h = h.slice(0, n - i1)), i1 < t && (h = h.slice(t - i1)), r ? (e[e.length - 1] += h, r = !1) : e.push(h)), i1 = o + 1;
    }
    return e;
}
function Ie3(l, e, t) {
    return ee2(l, [
        ""
    ], e, t);
}
var C5 = class {
    constructor(e, t = 1){
        this.dir = t, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [
            e
        ], this.offsets = [
            t > 0 ? 1 : (e instanceof m4 ? e.text.length : e.children.length) << 1
        ];
    }
    nextInner(e, t) {
        for(this.done = this.lineBreak = !1;;){
            let n = this.nodes.length - 1, i1 = this.nodes[n], s = this.offsets[n], r = s >> 1, h = i1 instanceof m4 ? i1.text.length : i1.children.length;
            if (r == (t > 0 ? h : 0)) {
                if (n == 0) return this.done = !0, this.value = "", this;
                t > 0 && this.offsets[n - 1]++, this.nodes.pop(), this.offsets.pop();
            } else if ((s & 1) == (t > 0 ? 0 : 1)) {
                if (this.offsets[n] += t, e == 0) return this.lineBreak = !0, this.value = `
`, this;
                e--;
            } else if (i1 instanceof m4) {
                let o = i1.text[r + (t < 0 ? -1 : 0)];
                if (this.offsets[n] += t, o.length > Math.max(0, e)) return this.value = e == 0 ? o : t > 0 ? o.slice(e) : o.slice(0, o.length - e), this;
                e -= o.length;
            } else {
                let o1 = i1.children[r + (t < 0 ? -1 : 0)];
                e > o1.length ? (e -= o1.length, this.offsets[n] += t) : (t < 0 && this.offsets[n]--, this.nodes.push(o1), this.offsets.push(t > 0 ? 1 : (o1 instanceof m4 ? o1.text.length : o1.children.length) << 1));
            }
        }
    }
    next(e = 0) {
        return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
    }
}, te4 = class {
    constructor(e, t, n){
        this.value = "", this.done = !1, this.cursor = new C5(e, t > n ? -1 : 1), this.pos = t > n ? e.length : 0, this.from = Math.min(t, n), this.to = Math.max(t, n);
    }
    nextInner(e, t) {
        if (t < 0 ? this.pos <= this.from : this.pos >= this.to) return this.value = "", this.done = !0, this;
        e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
        let n = t < 0 ? this.pos - this.from : this.to - this.pos;
        e > n && (e = n), n -= e;
        let { value: i1  } = this.cursor.next(e);
        return this.pos += (i1.length + e) * t, this.value = i1.length <= n ? i1 : t < 0 ? i1.slice(i1.length - n) : i1.slice(0, n), this.done = !this.value, this;
    }
    next(e = 0) {
        return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
    }
    get lineBreak() {
        return this.cursor.lineBreak && this.value != "";
    }
}, ne3 = class {
    constructor(e){
        this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
    }
    next(e = 0) {
        let { done: t , lineBreak: n , value: i1  } = this.inner.next(e);
        return t ? (this.done = !0, this.value = "") : n ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = i1, this.afterBreak = !1), this;
    }
    get lineBreak() {
        return !1;
    }
};
typeof Symbol < "u" && (v5.prototype[Symbol.iterator] = function() {
    return this.iter();
}, C5.prototype[Symbol.iterator] = te4.prototype[Symbol.iterator] = ne3.prototype[Symbol.iterator] = function() {
    return this;
});
var fe3 = class {
    constructor(e, t, n, i1){
        this.from = e, this.to = t, this.number = n, this.text = i1;
    }
    get length() {
        return this.to - this.from;
    }
}, $2 = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((l)=>l ? parseInt(l, 36) : 1);
for(let l2 = 1; l2 < $2.length; l2++)$2[l2] += $2[l2 - 1];
function Ze4(l) {
    for(let e = 1; e < $2.length; e += 2)if ($2[e] > l) return $2[e - 1] <= l;
    return !1;
}
function Ae3(l) {
    return l >= 127462 && l <= 127487;
}
var Pe2 = 8205;
function ie4(l, e, t = !0, n = !0) {
    return (t ? Fe2 : He2)(l, e, n);
}
function Fe2(l, e, t) {
    if (e == l.length) return e;
    e && Je2(l.charCodeAt(e)) && Te3(l.charCodeAt(e - 1)) && e--;
    let n = oe4(l, e);
    for(e += be3(n); e < l.length;){
        let i1 = oe4(l, e);
        if (n == Pe2 || i1 == Pe2 || t && Ze4(i1)) e += be3(i1), n = i1;
        else if (Ae3(i1)) {
            let s = 0, r = e - 2;
            for(; r >= 0 && Ae3(oe4(l, r));)s++, r -= 2;
            if (s % 2 == 0) break;
            e += 2;
        } else break;
    }
    return e;
}
function He2(l, e, t) {
    for(; e > 0;){
        let n = Fe2(l, e - 2, t);
        if (n < e) return n;
        e--;
    }
    return 0;
}
function Je2(l) {
    return l >= 56320 && l < 57344;
}
function Te3(l) {
    return l >= 55296 && l < 56320;
}
function oe4(l, e) {
    let t = l.charCodeAt(e);
    if (!Te3(t) || e + 1 == l.length) return t;
    let n = l.charCodeAt(e + 1);
    return Je2(n) ? (t - 55296 << 10) + (n - 56320) + 65536 : t;
}
function rt3(l) {
    return l <= 65535 ? String.fromCharCode(l) : (l -= 65536, String.fromCharCode((l >> 10) + 55296, (l & 1023) + 56320));
}
function be3(l) {
    return l < 65536 ? 1 : 2;
}
var ue4 = /\r\n?|\n/, M5 = function(l) {
    return l[l.Simple = 0] = "Simple", l[l.TrackDel = 1] = "TrackDel", l[l.TrackBefore = 2] = "TrackBefore", l[l.TrackAfter = 3] = "TrackAfter", l;
}(M5 || (M5 = {})), O3 = class {
    constructor(e){
        this.sections = e;
    }
    get length() {
        let e = 0;
        for(let t = 0; t < this.sections.length; t += 2)e += this.sections[t];
        return e;
    }
    get newLength() {
        let e = 0;
        for(let t = 0; t < this.sections.length; t += 2){
            let n = this.sections[t + 1];
            e += n < 0 ? this.sections[t] : n;
        }
        return e;
    }
    get empty() {
        return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    iterGaps(e) {
        for(let t = 0, n = 0, i1 = 0; t < this.sections.length;){
            let s = this.sections[t++], r = this.sections[t++];
            r < 0 ? (e(n, i1, s), i1 += s) : i1 += r, n += s;
        }
    }
    iterChangedRanges(e, t = !1) {
        ce4(this, e, t);
    }
    get invertedDesc() {
        let e = [];
        for(let t = 0; t < this.sections.length;){
            let n = this.sections[t++], i1 = this.sections[t++];
            i1 < 0 ? e.push(n, i1) : e.push(i1, n);
        }
        return new O3(e);
    }
    composeDesc(e) {
        return this.empty ? e : e.empty ? this : Ce3(this, e);
    }
    mapDesc(e, t = !1) {
        return e.empty ? this : de3(this, e, t);
    }
    mapPos(e, t = -1, n = M5.Simple) {
        let i1 = 0, s = 0;
        for(let r = 0; r < this.sections.length;){
            let h = this.sections[r++], o = this.sections[r++], a = i1 + h;
            if (o < 0) {
                if (a > e) return s + (e - i1);
                s += h;
            } else {
                if (n != M5.Simple && a >= e && (n == M5.TrackDel && i1 < e && a > e || n == M5.TrackBefore && i1 < e || n == M5.TrackAfter && a > e)) return null;
                if (a > e || a == e && t < 0 && !h) return e == i1 || t < 0 ? s : s + o;
                s += o;
            }
            i1 = a;
        }
        if (e > i1) throw new RangeError(`Position ${e} is out of range for changeset of length ${i1}`);
        return s;
    }
    touchesRange(e, t = e) {
        for(let n = 0, i1 = 0; n < this.sections.length && i1 <= t;){
            let s = this.sections[n++], r = this.sections[n++], h = i1 + s;
            if (r >= 0 && i1 <= t && h >= e) return i1 < e && h > t ? "cover" : !0;
            i1 = h;
        }
        return !1;
    }
    toString() {
        let e = "";
        for(let t = 0; t < this.sections.length;){
            let n = this.sections[t++], i1 = this.sections[t++];
            e += (e ? " " : "") + n + (i1 >= 0 ? ":" + i1 : "");
        }
        return e;
    }
    toJSON() {
        return this.sections;
    }
    static fromJSON(e) {
        if (!Array.isArray(e) || e.length % 2 || e.some((t)=>typeof t != "number")) throw new RangeError("Invalid JSON representation of ChangeDesc");
        return new O3(e);
    }
    static create(e) {
        return new O3(e);
    }
}, x4 = class extends O3 {
    constructor(e, t){
        super(e), this.inserted = t;
    }
    apply(e) {
        if (this.length != e.length) throw new RangeError("Applying change set to a document with the wrong length");
        return ce4(this, (t, n, i1, s, r)=>e = e.replace(i1, i1 + (n - t), r), !1), e;
    }
    mapDesc(e, t = !1) {
        return de3(this, e, t, !0);
    }
    invert(e) {
        let t = this.sections.slice(), n = [];
        for(let i1 = 0, s = 0; i1 < t.length; i1 += 2){
            let r = t[i1], h = t[i1 + 1];
            if (h >= 0) {
                t[i1] = h, t[i1 + 1] = r;
                let o = i1 >> 1;
                for(; n.length < o;)n.push(v5.empty);
                n.push(r ? e.slice(s, s + r) : v5.empty);
            }
            s += r;
        }
        return new x4(t, n);
    }
    compose(e) {
        return this.empty ? e : e.empty ? this : Ce3(this, e, !0);
    }
    map(e, t = !1) {
        return e.empty ? this : de3(this, e, t, !0);
    }
    iterChanges(e, t = !1) {
        ce4(this, e, t);
    }
    get desc() {
        return O3.create(this.sections);
    }
    filter(e) {
        let t = [], n = [], i1 = [], s = new V3(this);
        e: for(let r = 0, h = 0;;){
            let o = r == e.length ? 1e9 : e[r++];
            for(; h < o || h == o && s.len == 0;){
                if (s.done) break e;
                let f = Math.min(s.len, o - h);
                I2(i1, f, -1);
                let u = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;
                I2(t, f, u), u > 0 && T5(n, t, s.text), s.forward(f), h += f;
            }
            let a = e[r++];
            for(; h < a;){
                if (s.done) break e;
                let f1 = Math.min(s.len, a - h);
                I2(t, f1, -1), I2(i1, f1, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(f1), h += f1;
            }
        }
        return {
            changes: new x4(t, n),
            filtered: O3.create(i1)
        };
    }
    toJSON() {
        let e = [];
        for(let t = 0; t < this.sections.length; t += 2){
            let n = this.sections[t], i1 = this.sections[t + 1];
            i1 < 0 ? e.push(n) : i1 == 0 ? e.push([
                n
            ]) : e.push([
                n
            ].concat(this.inserted[t >> 1].toJSON()));
        }
        return e;
    }
    static of(e, t, n) {
        let i1 = [], s = [], r = 0, h = null;
        function o(f = !1) {
            if (!f && !i1.length) return;
            r < t && I2(i1, t - r, -1);
            let u = new x4(i1, s);
            h = h ? h.compose(u.map(h)) : u, i1 = [], s = [], r = 0;
        }
        function a(f) {
            if (Array.isArray(f)) for (let u of f)a(u);
            else if (f instanceof x4) {
                if (f.length != t) throw new RangeError(`Mismatched change set length (got ${f.length}, expected ${t})`);
                o(), h = h ? h.compose(f.map(h)) : f;
            } else {
                let { from: u1 , to: c = u1 , insert: d1  } = f;
                if (u1 > c || u1 < 0 || c > t) throw new RangeError(`Invalid change range ${u1} to ${c} (in doc of length ${t})`);
                let p1 = d1 ? typeof d1 == "string" ? v5.of(d1.split(n || ue4)) : d1 : v5.empty, E = p1.length;
                if (u1 == c && E == 0) return;
                u1 < r && o(), u1 > r && I2(i1, u1 - r, -1), I2(i1, c - u1, E), T5(s, i1, p1), r = c;
            }
        }
        return a(e), o(!h), h;
    }
    static empty(e) {
        return new x4(e ? [
            e,
            -1
        ] : [], []);
    }
    static fromJSON(e) {
        if (!Array.isArray(e)) throw new RangeError("Invalid JSON representation of ChangeSet");
        let t = [], n = [];
        for(let i1 = 0; i1 < e.length; i1++){
            let s = e[i1];
            if (typeof s == "number") t.push(s, -1);
            else {
                if (!Array.isArray(s) || typeof s[0] != "number" || s.some((r, h)=>h && typeof r != "string")) throw new RangeError("Invalid JSON representation of ChangeSet");
                if (s.length == 1) t.push(s[0], 0);
                else {
                    for(; n.length < i1;)n.push(v5.empty);
                    n[i1] = v5.of(s.slice(1)), t.push(s[0], n[i1].length);
                }
            }
        }
        return new x4(t, n);
    }
    static createSet(e, t) {
        return new x4(e, t);
    }
};
function I2(l, e, t, n = !1) {
    if (e == 0 && t <= 0) return;
    let i1 = l.length - 2;
    i1 >= 0 && t <= 0 && t == l[i1 + 1] ? l[i1] += e : e == 0 && l[i1] == 0 ? l[i1 + 1] += t : n ? (l[i1] += e, l[i1 + 1] += t) : l.push(e, t);
}
function T5(l, e, t) {
    if (t.length == 0) return;
    let n = e.length - 2 >> 1;
    if (n < l.length) l[l.length - 1] = l[l.length - 1].append(t);
    else {
        for(; l.length < n;)l.push(v5.empty);
        l.push(t);
    }
}
function ce4(l, e, t) {
    let n = l.inserted;
    for(let i1 = 0, s = 0, r = 0; r < l.sections.length;){
        let h = l.sections[r++], o = l.sections[r++];
        if (o < 0) i1 += h, s += h;
        else {
            let a = i1, f = s, u = v5.empty;
            for(; a += h, f += o, o && n && (u = u.append(n[r - 2 >> 1])), !(t || r == l.sections.length || l.sections[r + 1] < 0);)h = l.sections[r++], o = l.sections[r++];
            e(i1, a, s, f, u), i1 = a, s = f;
        }
    }
}
function de3(l, e, t, n = !1) {
    let i1 = [], s = n ? [] : null, r = new V3(l), h = new V3(e);
    for(let o = 0, a = 0;;)if (r.ins == -1) o += r.len, r.next();
    else if (h.ins == -1 && a < o) {
        let f = Math.min(h.len, o - a);
        h.forward(f), I2(i1, f, -1), a += f;
    } else if (h.ins >= 0 && (r.done || a < o || a == o && (h.len < r.len || h.len == r.len && !t))) {
        for(I2(i1, h.ins, -1); o > a && !r.done && o + r.len < a + h.len;)o += r.len, r.next();
        a += h.len, h.next();
    } else if (r.ins >= 0) {
        let f1 = 0, u = o + r.len;
        for(;;)if (h.ins >= 0 && a > o && a + h.len < u) f1 += h.ins, a += h.len, h.next();
        else if (h.ins == -1 && a < u) {
            let c = Math.min(h.len, u - a);
            f1 += c, h.forward(c), a += c;
        } else break;
        I2(i1, f1, r.ins), s && T5(s, i1, r.text), o = u, r.next();
    } else {
        if (r.done && h.done) return s ? x4.createSet(i1, s) : O3.create(i1);
        throw new Error("Mismatched change set lengths");
    }
}
function Ce3(l, e, t = !1) {
    let n = [], i1 = t ? [] : null, s = new V3(l), r = new V3(e);
    for(let h = !1;;){
        if (s.done && r.done) return i1 ? x4.createSet(n, i1) : O3.create(n);
        if (s.ins == 0) I2(n, s.len, 0, h), s.next();
        else if (r.len == 0 && !r.done) I2(n, 0, r.ins, h), i1 && T5(i1, n, r.text), r.next();
        else {
            if (s.done || r.done) throw new Error("Mismatched change set lengths");
            {
                let o = Math.min(s.len2, r.len), a = n.length;
                if (s.ins == -1) {
                    let f = r.ins == -1 ? -1 : r.off ? 0 : r.ins;
                    I2(n, o, f, h), i1 && f && T5(i1, n, r.text);
                } else r.ins == -1 ? (I2(n, s.off ? 0 : s.len, o, h), i1 && T5(i1, n, s.textBit(o))) : (I2(n, s.off ? 0 : s.len, r.off ? 0 : r.ins, h), i1 && !r.off && T5(i1, n, r.text));
                h = (s.ins > o || r.ins >= 0 && r.len > o) && (h || n.length > a), s.forward2(o), r.forward(o);
            }
        }
    }
}
var V3 = class {
    constructor(e){
        this.set = e, this.i = 0, this.next();
    }
    next() {
        let { sections: e  } = this.set;
        this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
    }
    get done() {
        return this.ins == -2;
    }
    get len2() {
        return this.ins < 0 ? this.len : this.ins;
    }
    get text() {
        let { inserted: e  } = this.set, t = this.i - 2 >> 1;
        return t >= e.length ? v5.empty : e[t];
    }
    textBit(e) {
        let { inserted: t  } = this.set, n = this.i - 2 >> 1;
        return n >= t.length && !e ? v5.empty : t[n].slice(this.off, e == null ? void 0 : this.off + e);
    }
    forward(e) {
        e == this.len ? this.next() : (this.len -= e, this.off += e);
    }
    forward2(e) {
        this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
    }
}, B4 = class {
    constructor(e, t, n){
        this.from = e, this.to = t, this.flags = n;
    }
    get anchor() {
        return this.flags & 16 ? this.to : this.from;
    }
    get head() {
        return this.flags & 16 ? this.from : this.to;
    }
    get empty() {
        return this.from == this.to;
    }
    get assoc() {
        return this.flags & 4 ? -1 : this.flags & 8 ? 1 : 0;
    }
    get bidiLevel() {
        let e = this.flags & 3;
        return e == 3 ? null : e;
    }
    get goalColumn() {
        let e = this.flags >> 5;
        return e == 33554431 ? void 0 : e;
    }
    map(e, t = -1) {
        let n, i1;
        return this.empty ? n = i1 = e.mapPos(this.from, t) : (n = e.mapPos(this.from, 1), i1 = e.mapPos(this.to, -1)), n == this.from && i1 == this.to ? this : new B4(n, i1, this.flags);
    }
    extend(e, t = e) {
        if (e <= this.anchor && t >= this.anchor) return g5.range(e, t);
        let n = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
        return g5.range(this.anchor, n);
    }
    eq(e) {
        return this.anchor == e.anchor && this.head == e.head;
    }
    toJSON() {
        return {
            anchor: this.anchor,
            head: this.head
        };
    }
    static fromJSON(e) {
        if (!e || typeof e.anchor != "number" || typeof e.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
        return g5.range(e.anchor, e.head);
    }
    static create(e, t, n) {
        return new B4(e, t, n);
    }
}, g5 = class {
    constructor(e, t){
        this.ranges = e, this.mainIndex = t;
    }
    map(e, t = -1) {
        return e.empty ? this : g5.create(this.ranges.map((n)=>n.map(e, t)), this.mainIndex);
    }
    eq(e) {
        if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex) return !1;
        for(let t = 0; t < this.ranges.length; t++)if (!this.ranges[t].eq(e.ranges[t])) return !1;
        return !0;
    }
    get main() {
        return this.ranges[this.mainIndex];
    }
    asSingle() {
        return this.ranges.length == 1 ? this : new g5([
            this.main
        ], 0);
    }
    addRange(e, t = !0) {
        return g5.create([
            e
        ].concat(this.ranges), t ? 0 : this.mainIndex + 1);
    }
    replaceRange(e, t = this.mainIndex) {
        let n = this.ranges.slice();
        return n[t] = e, g5.create(n, this.mainIndex);
    }
    toJSON() {
        return {
            ranges: this.ranges.map((e)=>e.toJSON()),
            main: this.mainIndex
        };
    }
    static fromJSON(e) {
        if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
        return new g5(e.ranges.map((t)=>B4.fromJSON(t)), e.main);
    }
    static single(e, t = e) {
        return new g5([
            g5.range(e, t)
        ], 0);
    }
    static create(e, t = 0) {
        if (e.length == 0) throw new RangeError("A selection needs at least one range");
        for(let n = 0, i1 = 0; i1 < e.length; i1++){
            let s = e[i1];
            if (s.empty ? s.from <= n : s.from < n) return g5.normalized(e.slice(), t);
            n = s.to;
        }
        return new g5(e, t);
    }
    static cursor(e, t = 0, n, i1) {
        return B4.create(e, e, (t == 0 ? 0 : t < 0 ? 4 : 8) | (n == null ? 3 : Math.min(2, n)) | (i1 ?? 33554431) << 5);
    }
    static range(e, t, n) {
        let i1 = (n ?? 33554431) << 5;
        return t < e ? B4.create(t, e, 16 | i1 | 8) : B4.create(e, t, i1 | (t > e ? 4 : 0));
    }
    static normalized(e, t = 0) {
        let n = e[t];
        e.sort((i1, s)=>i1.from - s.from), t = e.indexOf(n);
        for(let i1 = 1; i1 < e.length; i1++){
            let s = e[i1], r = e[i1 - 1];
            if (s.empty ? s.from <= r.to : s.from < r.to) {
                let h = r.from, o = Math.max(s.to, r.to);
                i1 <= t && t--, e.splice(--i1, 2, s.anchor > s.head ? g5.range(o, h) : g5.range(h, o));
            }
        }
        return new g5(e, t);
    }
};
function Ve2(l, e) {
    for (let t of l.ranges)if (t.to > e) throw new RangeError("Selection points outside of document");
}
var ye2 = 0, A3 = class {
    constructor(e, t, n, i1, s){
        this.combine = e, this.compareInput = t, this.compare = n, this.isStatic = i1, this.extensions = s, this.id = ye2++, this.default = e([]);
    }
    static define(e = {}) {
        return new A3(e.combine || ((t)=>t), e.compareInput || ((t, n)=>t === n), e.compare || (e.combine ? (t, n)=>t === n : Se3), !!e.static, e.enables);
    }
    of(e) {
        return new z3([], this, 0, e);
    }
    compute(e, t) {
        if (this.isStatic) throw new Error("Can't compute a static facet");
        return new z3(e, this, 1, t);
    }
    computeN(e, t) {
        if (this.isStatic) throw new Error("Can't compute a static facet");
        return new z3(e, this, 2, t);
    }
    from(e, t) {
        return t || (t = (n)=>n), this.compute([
            e
        ], (n)=>t(n.field(e)));
    }
};
function Se3(l, e) {
    return l == e || l.length == e.length && l.every((t, n)=>t === e[n]);
}
var z3 = class {
    constructor(e, t, n, i1){
        this.dependencies = e, this.facet = t, this.type = n, this.value = i1, this.id = ye2++;
    }
    dynamicSlot(e) {
        var t;
        let n = this.value, i1 = this.facet.compareInput, s = this.id, r = e[s] >> 1, h = this.type == 2, o = !1, a = !1, f = [];
        for (let u of this.dependencies)u == "doc" ? o = !0 : u == "selection" ? a = !0 : (((t = e[u.id]) !== null && t !== void 0 ? t : 1) & 1) == 0 && f.push(e[u.id]);
        return {
            create (u) {
                return u.values[r] = n(u), 1;
            },
            update (u, c) {
                if (o && c.docChanged || a && (c.docChanged || c.selection) || ge3(u, f)) {
                    let d1 = n(u);
                    if (h ? !Oe3(d1, u.values[r], i1) : !i1(d1, u.values[r])) return u.values[r] = d1, 1;
                }
                return 0;
            },
            reconfigure: (u, c)=>{
                let d1 = n(u), p1 = c.config.address[s];
                if (p1 != null) {
                    let E = re2(c, p1);
                    if (this.dependencies.every((k)=>k instanceof A3 ? c.facet(k) === u.facet(k) : k instanceof F3 ? c.field(k, !1) == u.field(k, !1) : !0) || (h ? Oe3(d1, E, i1) : i1(d1, E))) return u.values[r] = E, 0;
                }
                return u.values[r] = d1, 1;
            }
        };
    }
};
function Oe3(l, e, t) {
    if (l.length != e.length) return !1;
    for(let n = 0; n < l.length; n++)if (!t(l[n], e[n])) return !1;
    return !0;
}
function ge3(l, e) {
    let t = !1;
    for (let n of e)K5(l, n) & 1 && (t = !0);
    return t;
}
function Ke3(l, e, t) {
    let n = t.map((o)=>l[o.id]), i1 = t.map((o)=>o.type), s = n.filter((o)=>!(o & 1)), r = l[e.id] >> 1;
    function h(o) {
        let a = [];
        for(let f = 0; f < n.length; f++){
            let u = re2(o, n[f]);
            if (i1[f] == 2) for (let c of u)a.push(c);
            else a.push(u);
        }
        return e.combine(a);
    }
    return {
        create (o) {
            for (let a of n)K5(o, a);
            return o.values[r] = h(o), 1;
        },
        update (o, a) {
            if (!ge3(o, s)) return 0;
            let f = h(o);
            return e.compare(f, o.values[r]) ? 0 : (o.values[r] = f, 1);
        },
        reconfigure (o, a) {
            let f = ge3(o, n), u = a.config.facets[e.id], c = a.facet(e);
            if (u && !f && Se3(t, u)) return o.values[r] = c, 0;
            let d1 = h(o);
            return e.compare(d1, c) ? (o.values[r] = c, 0) : (o.values[r] = d1, 1);
        }
    };
}
var Ee3 = A3.define({
    static: !0
}), F3 = class {
    constructor(e, t, n, i1, s){
        this.id = e, this.createF = t, this.updateF = n, this.compareF = i1, this.spec = s, this.provides = void 0;
    }
    static define(e) {
        let t = new F3(ye2++, e.create, e.update, e.compare || ((n, i1)=>n === i1), e);
        return e.provide && (t.provides = e.provide(t)), t;
    }
    create(e) {
        let t = e.facet(Ee3).find((n)=>n.field == this);
        return (t?.create || this.createF)(e);
    }
    slot(e) {
        let t = e[this.id] >> 1;
        return {
            create: (n)=>(n.values[t] = this.create(n), 1),
            update: (n, i1)=>{
                let s = n.values[t], r = this.updateF(s, i1);
                return this.compareF(s, r) ? 0 : (n.values[t] = r, 1);
            },
            reconfigure: (n, i1)=>i1.config.address[this.id] != null ? (n.values[t] = i1.field(this), 0) : (n.values[t] = this.create(n), 1)
        };
    }
    init(e) {
        return [
            this,
            Ee3.of({
                field: this,
                create: e
            })
        ];
    }
    get extension() {
        return this;
    }
}, L3 = {
    lowest: 4,
    low: 3,
    default: 2,
    high: 1,
    highest: 0
};
function H3(l) {
    return (e)=>new se3(e, l);
}
var lt3 = {
    highest: H3(L3.highest),
    high: H3(L3.high),
    default: H3(L3.default),
    low: H3(L3.low),
    lowest: H3(L3.lowest)
}, se3 = class {
    constructor(e, t){
        this.inner = e, this.prec = t;
    }
}, U2 = class {
    of(e) {
        return new Q5(this, e);
    }
    reconfigure(e) {
        return U2.reconfigure.of({
            compartment: this,
            extension: e
        });
    }
    get(e) {
        return e.config.compartments.get(this);
    }
}, Q5 = class {
    constructor(e, t){
        this.compartment = e, this.inner = t;
    }
}, G2 = class {
    constructor(e, t, n, i1, s, r){
        for(this.base = e, this.compartments = t, this.dynamicSlots = n, this.address = i1, this.staticValues = s, this.facets = r, this.statusTemplate = []; this.statusTemplate.length < n.length;)this.statusTemplate.push(0);
    }
    staticFacet(e) {
        let t = this.address[e.id];
        return t == null ? e.default : this.staticValues[t >> 1];
    }
    static resolve(e, t, n) {
        let i1 = [], s = Object.create(null), r = new Map;
        for (let c of Qe3(e, t, r))c instanceof F3 ? i1.push(c) : (s[c.facet.id] || (s[c.facet.id] = [])).push(c);
        let h = Object.create(null), o = [], a = [];
        for (let c1 of i1)h[c1.id] = a.length << 1, a.push((d1)=>c1.slot(d1));
        let f = n?.config.facets;
        for(let c2 in s){
            let d1 = s[c2], p1 = d1[0].facet, E = f && f[c2] || [];
            if (d1.every((k)=>k.type == 0)) if (h[p1.id] = o.length << 1 | 1, Se3(E, d1)) o.push(n.facet(p1));
            else {
                let k = p1.combine(d1.map((he)=>he.value));
                o.push(n && p1.compare(k, n.facet(p1)) ? n.facet(p1) : k);
            }
            else {
                for (let k1 of d1)k1.type == 0 ? (h[k1.id] = o.length << 1 | 1, o.push(k1.value)) : (h[k1.id] = a.length << 1, a.push((he)=>k1.dynamicSlot(he)));
                h[p1.id] = a.length << 1, a.push((k)=>Ke3(k, p1, d1));
            }
        }
        let u = a.map((c)=>c(h));
        return new G2(e, r, u, h, o, s);
    }
};
function Qe3(l, e, t) {
    let n = [
        [],
        [],
        [],
        [],
        []
    ], i1 = new Map;
    function s(r, h) {
        let o = i1.get(r);
        if (o != null) {
            if (o <= h) return;
            let a = n[o].indexOf(r);
            a > -1 && n[o].splice(a, 1), r instanceof Q5 && t.delete(r.compartment);
        }
        if (i1.set(r, h), Array.isArray(r)) for (let a1 of r)s(a1, h);
        else if (r instanceof Q5) {
            if (t.has(r.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
            let a2 = e.get(r.compartment) || r.inner;
            t.set(r.compartment, a2), s(a2, h);
        } else if (r instanceof se3) s(r.inner, r.prec);
        else if (r instanceof F3) n[h].push(r), r.provides && s(r.provides, h);
        else if (r instanceof z3) n[h].push(r), r.facet.extensions && s(r.facet.extensions, h);
        else {
            let a3 = r.extension;
            if (!a3) throw new Error(`Unrecognized extension value in extension set (${r}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
            s(a3, h);
        }
    }
    return s(l, L3.default), n.reduce((r, h)=>r.concat(h));
}
function K5(l, e) {
    if (e & 1) return 2;
    let t = e >> 1, n = l.status[t];
    if (n == 4) throw new Error("Cyclic dependency between fields and/or facets");
    if (n & 2) return n;
    l.status[t] = 4;
    let i1 = l.computeSlot(l, l.config.dynamicSlots[t]);
    return l.status[t] = 2 | i1;
}
function re2(l, e) {
    return e & 1 ? l.config.staticValues[e >> 1] : l.values[e >> 1];
}
var Ne3 = A3.define(), De3 = A3.define({
    combine: (l)=>l.some((e)=>e),
    static: !0
}), qe2 = A3.define({
    combine: (l)=>l.length ? l[0] : void 0,
    static: !0
}), Le3 = A3.define(), $e3 = A3.define(), ze2 = A3.define(), We3 = A3.define({
    combine: (l)=>l.length ? l[0] : !1
}), N2 = class {
    constructor(e, t){
        this.type = e, this.value = t;
    }
    static define() {
        return new pe2;
    }
}, pe2 = class {
    of(e) {
        return new N2(this, e);
    }
}, me2 = class {
    constructor(e){
        this.map = e;
    }
    of(e) {
        return new y4(this, e);
    }
}, y4 = class {
    constructor(e, t){
        this.type = e, this.value = t;
    }
    map(e) {
        let t = this.type.map(this.value, e);
        return t === void 0 ? void 0 : t == this.value ? this : new y4(this.type, t);
    }
    is(e) {
        return this.type == e;
    }
    static define(e = {}) {
        return new me2(e.map || ((t)=>t));
    }
    static mapEffects(e, t) {
        if (!e.length) return e;
        let n = [];
        for (let i1 of e){
            let s = i1.map(t);
            s && n.push(s);
        }
        return n;
    }
};
y4.reconfigure = y4.define();
y4.appendConfig = y4.define();
var S4 = class {
    constructor(e, t, n, i1, s, r){
        this.startState = e, this.changes = t, this.selection = n, this.effects = i1, this.annotations = s, this.scrollIntoView = r, this._doc = null, this._state = null, n && Ve2(n, t.newLength), s.some((h)=>h.type == S4.time) || (this.annotations = s.concat(S4.time.of(Date.now())));
    }
    static create(e, t, n, i1, s, r) {
        return new S4(e, t, n, i1, s, r);
    }
    get newDoc() {
        return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    get newSelection() {
        return this.selection || this.startState.selection.map(this.changes);
    }
    get state() {
        return this._state || this.startState.applyTransaction(this), this._state;
    }
    annotation(e) {
        for (let t of this.annotations)if (t.type == e) return t.value;
    }
    get docChanged() {
        return !this.changes.empty;
    }
    get reconfigured() {
        return this.startState.config != this.state.config;
    }
    isUserEvent(e) {
        let t = this.annotation(S4.userEvent);
        return !!(t && (t == e || t.length > e.length && t.slice(0, e.length) == e && t[e.length] == "."));
    }
};
S4.time = N2.define();
S4.userEvent = N2.define();
S4.addToHistory = N2.define();
S4.remote = N2.define();
function Xe2(l, e) {
    let t = [];
    for(let n = 0, i1 = 0;;){
        let s, r;
        if (n < l.length && (i1 == e.length || e[i1] >= l[n])) s = l[n++], r = l[n++];
        else if (i1 < e.length) s = e[i1++], r = e[i1++];
        else return t;
        !t.length || t[t.length - 1] < s ? t.push(s, r) : t[t.length - 1] < r && (t[t.length - 1] = r);
    }
}
function Ue3(l, e, t) {
    var n;
    let i1, s, r;
    return t ? (i1 = e.changes, s = x4.empty(e.changes.length), r = l.changes.compose(e.changes)) : (i1 = e.changes.map(l.changes), s = l.changes.mapDesc(e.changes, !0), r = l.changes.compose(i1)), {
        changes: r,
        selection: e.selection ? e.selection.map(s) : (n = l.selection) === null || n === void 0 ? void 0 : n.map(i1),
        effects: y4.mapEffects(l.effects, i1).concat(y4.mapEffects(e.effects, s)),
        annotations: l.annotations.length ? l.annotations.concat(e.annotations) : e.annotations,
        scrollIntoView: l.scrollIntoView || e.scrollIntoView
    };
}
function we3(l, e, t) {
    let n = e.selection, i1 = W2(e.annotations);
    return e.userEvent && (i1 = i1.concat(S4.userEvent.of(e.userEvent))), {
        changes: e.changes instanceof x4 ? e.changes : x4.of(e.changes || [], t, l.facet(qe2)),
        selection: n && (n instanceof g5 ? n : g5.single(n.anchor, n.head)),
        effects: W2(e.effects),
        annotations: i1,
        scrollIntoView: !!e.scrollIntoView
    };
}
function Ge2(l, e, t) {
    let n = we3(l, e.length ? e[0] : {}, l.doc.length);
    e.length && e[0].filter === !1 && (t = !1);
    for(let s = 1; s < e.length; s++){
        e[s].filter === !1 && (t = !1);
        let r = !!e[s].sequential;
        n = Ue3(n, we3(l, e[s], r ? n.changes.newLength : l.doc.length), r);
    }
    let i1 = S4.create(l, n.changes, n.selection, n.effects, n.annotations, n.scrollIntoView);
    return _e3(t ? Ye2(i1) : i1);
}
function Ye2(l) {
    let e = l.startState, t = !0;
    for (let i1 of e.facet(Le3)){
        let s = i1(l);
        if (s === !1) {
            t = !1;
            break;
        }
        Array.isArray(s) && (t = t === !0 ? s : Xe2(t, s));
    }
    if (t !== !0) {
        let i11, s1;
        if (t === !1) s1 = l.changes.invertedDesc, i11 = x4.empty(e.doc.length);
        else {
            let r = l.changes.filter(t);
            i11 = r.changes, s1 = r.filtered.invertedDesc;
        }
        l = S4.create(e, i11, l.selection && l.selection.map(s1), y4.mapEffects(l.effects, s1), l.annotations, l.scrollIntoView);
    }
    let n = e.facet($e3);
    for(let i2 = n.length - 1; i2 >= 0; i2--){
        let s2 = n[i2](l);
        s2 instanceof S4 ? l = s2 : Array.isArray(s2) && s2.length == 1 && s2[0] instanceof S4 ? l = s2[0] : l = Ge2(e, W2(s2), !1);
    }
    return l;
}
function _e3(l) {
    let e = l.startState, t = e.facet(ze2), n = l;
    for(let i1 = t.length - 1; i1 >= 0; i1--){
        let s = t[i1](l);
        s && Object.keys(s).length && (n = Ue3(l, we3(e, s, l.changes.newLength), !0));
    }
    return n == l ? l : S4.create(e, l.changes, l.selection, n.effects, n.annotations, n.scrollIntoView);
}
var et2 = [];
function W2(l) {
    return l == null ? et2 : Array.isArray(l) ? l : [
        l
    ];
}
var R4 = function(l) {
    return l[l.Word = 0] = "Word", l[l.Space = 1] = "Space", l[l.Other = 2] = "Other", l;
}(R4 || (R4 = {})), tt3 = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/, ve3;
try {
    ve3 = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch  {}
function nt3(l) {
    if (ve3) return ve3.test(l);
    for(let e = 0; e < l.length; e++){
        let t = l[e];
        if (/\w/.test(t) || t > "\x80" && (t.toUpperCase() != t.toLowerCase() || tt3.test(t))) return !0;
    }
    return !1;
}
function it3(l) {
    return (e)=>{
        if (!/\S/.test(e)) return R4.Space;
        if (nt3(e)) return R4.Word;
        for(let t = 0; t < l.length; t++)if (e.indexOf(l[t]) > -1) return R4.Word;
        return R4.Other;
    };
}
var w3 = class {
    constructor(e, t, n, i1, s, r){
        this.config = e, this.doc = t, this.selection = n, this.values = i1, this.status = e.statusTemplate.slice(), this.computeSlot = s, r && (r._state = this);
        for(let h = 0; h < this.config.dynamicSlots.length; h++)K5(this, h << 1);
        this.computeSlot = null;
    }
    field(e, t = !0) {
        let n = this.config.address[e.id];
        if (n == null) {
            if (t) throw new RangeError("Field is not present in this state");
            return;
        }
        return K5(this, n), re2(this, n);
    }
    update(...e) {
        return Ge2(this, e, !0);
    }
    applyTransaction(e) {
        let t = this.config, { base: n , compartments: i1  } = t;
        for (let r of e.effects)r.is(U2.reconfigure) ? (t && (i1 = new Map, t.compartments.forEach((h, o)=>i1.set(o, h)), t = null), i1.set(r.value.compartment, r.value.extension)) : r.is(y4.reconfigure) ? (t = null, n = r.value) : r.is(y4.appendConfig) && (t = null, n = W2(n).concat(r.value));
        let s;
        t ? s = e.startState.values.slice() : (t = G2.resolve(n, i1, this), s = new w3(t, this.doc, this.selection, t.dynamicSlots.map(()=>null), (h, o)=>o.reconfigure(h, this), null).values), new w3(t, e.newDoc, e.newSelection, s, (r, h)=>h.update(r, e), e);
    }
    replaceSelection(e) {
        return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t)=>({
                changes: {
                    from: t.from,
                    to: t.to,
                    insert: e
                },
                range: g5.cursor(t.from + e.length)
            }));
    }
    changeByRange(e) {
        let t = this.selection, n = e(t.ranges[0]), i1 = this.changes(n.changes), s = [
            n.range
        ], r = W2(n.effects);
        for(let h = 1; h < t.ranges.length; h++){
            let o = e(t.ranges[h]), a = this.changes(o.changes), f = a.map(i1);
            for(let c = 0; c < h; c++)s[c] = s[c].map(f);
            let u = i1.mapDesc(a, !0);
            s.push(o.range.map(u)), i1 = i1.compose(f), r = y4.mapEffects(r, f).concat(y4.mapEffects(W2(o.effects), u));
        }
        return {
            changes: i1,
            selection: g5.create(s, t.mainIndex),
            effects: r
        };
    }
    changes(e = []) {
        return e instanceof x4 ? e : x4.of(e, this.doc.length, this.facet(w3.lineSeparator));
    }
    toText(e) {
        return v5.of(e.split(this.facet(w3.lineSeparator) || ue4));
    }
    sliceDoc(e = 0, t = this.doc.length) {
        return this.doc.sliceString(e, t, this.lineBreak);
    }
    facet(e) {
        let t = this.config.address[e.id];
        return t == null ? e.default : (K5(this, t), re2(this, t));
    }
    toJSON(e) {
        let t = {
            doc: this.sliceDoc(),
            selection: this.selection.toJSON()
        };
        if (e) for(let n in e){
            let i1 = e[n];
            i1 instanceof F3 && (t[n] = i1.spec.toJSON(this.field(e[n]), this));
        }
        return t;
    }
    static fromJSON(e, t = {}, n) {
        if (!e || typeof e.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
        let i1 = [];
        if (n) for(let s in n){
            let r = n[s], h = e[s];
            i1.push(r.init((o)=>r.spec.fromJSON(h, o)));
        }
        return w3.create({
            doc: e.doc,
            selection: g5.fromJSON(e.selection),
            extensions: t.extensions ? i1.concat([
                t.extensions
            ]) : i1
        });
    }
    static create(e = {}) {
        let t = G2.resolve(e.extensions || [], new Map), n = e.doc instanceof v5 ? e.doc : v5.of((e.doc || "").split(t.staticFacet(w3.lineSeparator) || ue4)), i1 = e.selection ? e.selection instanceof g5 ? e.selection : g5.single(e.selection.anchor, e.selection.head) : g5.single(0);
        return Ve2(i1, n.length), t.staticFacet(De3) || (i1 = i1.asSingle()), new w3(t, n, i1, t.dynamicSlots.map(()=>null), (s, r)=>r.create(s), null);
    }
    get tabSize() {
        return this.facet(w3.tabSize);
    }
    get lineBreak() {
        return this.facet(w3.lineSeparator) || `
`;
    }
    get readOnly() {
        return this.facet(We3);
    }
    phrase(e, ...t) {
        for (let n of this.facet(w3.phrases))if (Object.prototype.hasOwnProperty.call(n, e)) {
            e = n[e];
            break;
        }
        return t.length && (e = e.replace(/\$(\$|\d*)/g, (n, i1)=>{
            if (i1 == "$") return "$";
            let s = +(i1 || 1);
            return s > t.length ? n : t[s - 1];
        })), e;
    }
    languageDataAt(e, t, n = -1) {
        let i1 = [];
        for (let s of this.facet(Ne3))for (let r of s(this, t, n))Object.prototype.hasOwnProperty.call(r, e) && i1.push(r[e]);
        return i1;
    }
    charCategorizer(e) {
        return it3(this.languageDataAt("wordChars", e).join(""));
    }
    wordAt(e) {
        let { text: t , from: n , length: i1  } = this.doc.lineAt(e), s = this.charCategorizer(e), r = e - n, h = e - n;
        for(; r > 0;){
            let o = ie4(t, r, !1);
            if (s(t.slice(o, r)) != R4.Word) break;
            r = o;
        }
        for(; h < i1;){
            let o1 = ie4(t, h);
            if (s(t.slice(h, o1)) != R4.Word) break;
            h = o1;
        }
        return r == h ? null : g5.range(r + n, h + n);
    }
};
w3.allowMultipleSelections = De3;
w3.tabSize = A3.define({
    combine: (l)=>l.length ? l[0] : 4
});
w3.lineSeparator = qe2;
w3.readOnly = We3;
w3.phrases = A3.define({
    compare (l, e) {
        let t = Object.keys(l), n = Object.keys(e);
        return t.length == n.length && t.every((i1)=>l[i1] == e[i1]);
    }
});
w3.languageData = Ne3;
w3.changeFilter = Le3;
w3.transactionFilter = $e3;
w3.transactionExtender = ze2;
U2.reconfigure = y4.define();
function ht3(l, e, t = {}) {
    let n = {};
    for (let i1 of l)for (let s of Object.keys(i1)){
        let r = i1[s], h = n[s];
        if (h === void 0) n[s] = r;
        else if (!(h === r || r === void 0)) if (Object.hasOwnProperty.call(t, s)) n[s] = t[s](h, r);
        else throw new Error("Config merge conflict for field " + s);
    }
    for(let i11 in e)n[i11] === void 0 && (n[i11] = e[i11]);
    return n;
}
var j3 = class {
    eq(e) {
        return this == e;
    }
    range(e, t = e) {
        return D4.create(e, t, this);
    }
};
j3.prototype.startSide = j3.prototype.endSide = 0;
j3.prototype.point = !1;
j3.prototype.mapMode = M5.TrackDel;
var D4 = class {
    constructor(e, t, n){
        this.from = e, this.to = t, this.value = n;
    }
    static create(e, t, n) {
        return new D4(e, t, n);
    }
};
function ke3(l, e) {
    return l.from - e.from || l.value.startSide - e.value.startSide;
}
var X3 = class {
    constructor(e, t, n, i1){
        this.from = e, this.to = t, this.value = n, this.maxPoint = i1;
    }
    get length() {
        return this.to[this.to.length - 1];
    }
    findIndex(e, t, n, i1 = 0) {
        let s = n ? this.to : this.from;
        for(let r = i1, h = s.length;;){
            if (r == h) return r;
            let o = r + h >> 1, a = s[o] - e || (n ? this.value[o].endSide : this.value[o].startSide) - t;
            if (o == r) return a >= 0 ? r : h;
            a >= 0 ? h = o : r = o + 1;
        }
    }
    between(e, t, n, i1) {
        for(let s = this.findIndex(t, -1e9, !0), r = this.findIndex(n, 1e9, !1, s); s < r; s++)if (i1(this.from[s] + e, this.to[s] + e, this.value[s]) === !1) return !1;
    }
    map(e, t) {
        let n = [], i1 = [], s = [], r = -1, h = -1;
        for(let o = 0; o < this.value.length; o++){
            let a = this.value[o], f = this.from[o] + e, u = this.to[o] + e, c, d1;
            if (f == u) {
                let p1 = t.mapPos(f, a.startSide, a.mapMode);
                if (p1 == null || (c = d1 = p1, a.startSide != a.endSide && (d1 = t.mapPos(f, a.endSide), d1 < c))) continue;
            } else if (c = t.mapPos(f, a.startSide), d1 = t.mapPos(u, a.endSide), c > d1 || c == d1 && a.startSide > 0 && a.endSide <= 0) continue;
            (d1 - c || a.endSide - a.startSide) < 0 || (r < 0 && (r = c), a.point && (h = Math.max(h, d1 - c)), n.push(a), i1.push(c - r), s.push(d1 - r));
        }
        return {
            mapped: n.length ? new X3(i1, s, n, h) : null,
            pos: r
        };
    }
}, P3 = class {
    constructor(e, t, n, i1){
        this.chunkPos = e, this.chunk = t, this.nextLayer = n, this.maxPoint = i1;
    }
    static create(e, t, n, i1) {
        return new P3(e, t, n, i1);
    }
    get length() {
        let e = this.chunk.length - 1;
        return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
    }
    get size() {
        if (this.isEmpty) return 0;
        let e = this.nextLayer.size;
        for (let t of this.chunk)e += t.value.length;
        return e;
    }
    chunkEnd(e) {
        return this.chunkPos[e] + this.chunk[e].length;
    }
    update(e) {
        let { add: t = [] , sort: n = !1 , filterFrom: i1 = 0 , filterTo: s = this.length  } = e, r = e.filter;
        if (t.length == 0 && !r) return this;
        if (n && (t = t.slice().sort(ke3)), this.isEmpty) return t.length ? P3.of(t) : this;
        let h = new le4(this, null, -1).goto(0), o = 0, a = [], f = new Z2;
        for(; h.value || o < t.length;)if (o < t.length && (h.from - t[o].from || h.startSide - t[o].value.startSide) >= 0) {
            let u = t[o++];
            f.addInner(u.from, u.to, u.value) || a.push(u);
        } else h.rangeIndex == 1 && h.chunkIndex < this.chunk.length && (o == t.length || this.chunkEnd(h.chunkIndex) < t[o].from) && (!r || i1 > this.chunkEnd(h.chunkIndex) || s < this.chunkPos[h.chunkIndex]) && f.addChunk(this.chunkPos[h.chunkIndex], this.chunk[h.chunkIndex]) ? h.nextChunk() : ((!r || i1 > h.to || s < h.from || r(h.from, h.to, h.value)) && (f.addInner(h.from, h.to, h.value) || a.push(D4.create(h.from, h.to, h.value))), h.next());
        return f.finishInner(this.nextLayer.isEmpty && !a.length ? P3.empty : this.nextLayer.update({
            add: a,
            filter: r,
            filterFrom: i1,
            filterTo: s
        }));
    }
    map(e) {
        if (e.empty || this.isEmpty) return this;
        let t = [], n = [], i1 = -1;
        for(let r = 0; r < this.chunk.length; r++){
            let h = this.chunkPos[r], o = this.chunk[r], a = e.touchesRange(h, h + o.length);
            if (a === !1) i1 = Math.max(i1, o.maxPoint), t.push(o), n.push(e.mapPos(h));
            else if (a === !0) {
                let { mapped: f , pos: u  } = o.map(h, e);
                f && (i1 = Math.max(i1, f.maxPoint), t.push(f), n.push(u));
            }
        }
        let s = this.nextLayer.map(e);
        return t.length == 0 ? s : new P3(n, t, s || P3.empty, i1);
    }
    between(e, t, n) {
        if (!this.isEmpty) {
            for(let i1 = 0; i1 < this.chunk.length; i1++){
                let s = this.chunkPos[i1], r = this.chunk[i1];
                if (t >= s && e <= s + r.length && r.between(s, e - s, t - s, n) === !1) return;
            }
            this.nextLayer.between(e, t, n);
        }
    }
    iter(e = 0) {
        return q3.from([
            this
        ]).goto(e);
    }
    get isEmpty() {
        return this.nextLayer == this;
    }
    static iter(e, t = 0) {
        return q3.from(e).goto(t);
    }
    static compare(e, t, n, i1, s = -1) {
        let r = e.filter((u)=>u.maxPoint > 0 || !u.isEmpty && u.maxPoint >= s), h = t.filter((u)=>u.maxPoint > 0 || !u.isEmpty && u.maxPoint >= s), o = Be2(r, h, n), a = new J3(r, o, s), f = new J3(h, o, s);
        n.iterGaps((u, c, d1)=>Me3(a, u, f, c, d1, i1)), n.empty && n.length == 0 && Me3(a, 0, f, 0, 0, i1);
    }
    static eq(e, t, n = 0, i1) {
        i1 == null && (i1 = 1e9);
        let s = e.filter((f)=>!f.isEmpty && t.indexOf(f) < 0), r = t.filter((f)=>!f.isEmpty && e.indexOf(f) < 0);
        if (s.length != r.length) return !1;
        if (!s.length) return !0;
        let h = Be2(s, r), o = new J3(s, h, 0).goto(n), a = new J3(r, h, 0).goto(n);
        for(;;){
            if (o.to != a.to || !xe1(o.active, a.active) || o.point && (!a.point || !o.point.eq(a.point))) return !1;
            if (o.to > i1) return !0;
            o.next(), a.next();
        }
    }
    static spans(e, t, n, i1, s = -1) {
        let r = new J3(e, null, s).goto(t), h = t, o = r.openStart;
        for(;;){
            let a = Math.min(r.to, n);
            if (r.point ? (i1.point(h, a, r.point, r.activeForPoint(r.to), o, r.pointRank), o = r.openEnd(a) + (r.to > a ? 1 : 0)) : a > h && (i1.span(h, a, r.active, o), o = r.openEnd(a)), r.to > n) break;
            h = r.to, r.next();
        }
        return o;
    }
    static of(e, t = !1) {
        let n = new Z2;
        for (let i1 of e instanceof D4 ? [
            e
        ] : t ? st3(e) : e)n.add(i1.from, i1.to, i1.value);
        return n.finish();
    }
};
P3.empty = new P3([], [], null, -1);
function st3(l) {
    if (l.length > 1) for(let e = l[0], t = 1; t < l.length; t++){
        let n = l[t];
        if (ke3(e, n) > 0) return l.slice().sort(ke3);
        e = n;
    }
    return l;
}
P3.empty.nextLayer = P3.empty;
var Z2 = class {
    constructor(){
        this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
    }
    finishChunk(e) {
        this.chunks.push(new X3(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
    }
    add(e, t, n) {
        this.addInner(e, t, n) || (this.nextLayer || (this.nextLayer = new Z2)).add(e, t, n);
    }
    addInner(e, t, n) {
        let i1 = e - this.lastTo || n.startSide - this.last.endSide;
        if (i1 <= 0 && (e - this.lastFrom || n.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
        return i1 < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t - this.chunkStart), this.last = n, this.lastFrom = e, this.lastTo = t, this.value.push(n), n.point && (this.maxPoint = Math.max(this.maxPoint, t - e)), !0);
    }
    addChunk(e, t) {
        if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0) return !1;
        this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint), this.chunks.push(t), this.chunkPos.push(e);
        let n = t.value.length - 1;
        return this.last = t.value[n], this.lastFrom = t.from[n] + e, this.lastTo = t.to[n] + e, !0;
    }
    finish() {
        return this.finishInner(P3.empty);
    }
    finishInner(e) {
        if (this.from.length && this.finishChunk(!1), this.chunks.length == 0) return e;
        let t = P3.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
        return this.from = null, t;
    }
};
function Be2(l, e, t) {
    let n = new Map;
    for (let s of l)for(let r = 0; r < s.chunk.length; r++)s.chunk[r].maxPoint <= 0 && n.set(s.chunk[r], s.chunkPos[r]);
    let i1 = new Set;
    for (let s1 of e)for(let r1 = 0; r1 < s1.chunk.length; r1++){
        let h = n.get(s1.chunk[r1]);
        h != null && (t ? t.mapPos(h) : h) == s1.chunkPos[r1] && !t?.touchesRange(h, h + s1.chunk[r1].length) && i1.add(s1.chunk[r1]);
    }
    return i1;
}
var le4 = class {
    constructor(e, t, n, i1 = 0){
        this.layer = e, this.skip = t, this.minPoint = n, this.rank = i1;
    }
    get startSide() {
        return this.value ? this.value.startSide : 0;
    }
    get endSide() {
        return this.value ? this.value.endSide : 0;
    }
    goto(e, t = -1e9) {
        return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t, !1), this;
    }
    gotoInner(e, t, n) {
        for(; this.chunkIndex < this.layer.chunk.length;){
            let i1 = this.layer.chunk[this.chunkIndex];
            if (!(this.skip && this.skip.has(i1) || this.layer.chunkEnd(this.chunkIndex) < e || i1.maxPoint < this.minPoint)) break;
            this.chunkIndex++, n = !1;
        }
        if (this.chunkIndex < this.layer.chunk.length) {
            let i11 = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
            (!n || this.rangeIndex < i11) && this.setRangeIndex(i11);
        }
        this.next();
    }
    forward(e, t) {
        (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0);
    }
    next() {
        for(;;)if (this.chunkIndex == this.layer.chunk.length) {
            this.from = this.to = 1e9, this.value = null;
            break;
        } else {
            let e = this.layer.chunkPos[this.chunkIndex], t = this.layer.chunk[this.chunkIndex], n = e + t.from[this.rangeIndex];
            if (this.from = n, this.to = e + t.to[this.rangeIndex], this.value = t.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
        }
    }
    setRangeIndex(e) {
        if (e == this.layer.chunk[this.chunkIndex].value.length) {
            if (this.chunkIndex++, this.skip) for(; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]);)this.chunkIndex++;
            this.rangeIndex = 0;
        } else this.rangeIndex = e;
    }
    nextChunk() {
        this.chunkIndex++, this.rangeIndex = 0, this.next();
    }
    compare(e) {
        return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
    }
}, q3 = class {
    constructor(e){
        this.heap = e;
    }
    static from(e, t = null, n = -1) {
        let i1 = [];
        for(let s = 0; s < e.length; s++)for(let r = e[s]; !r.isEmpty; r = r.nextLayer)r.maxPoint >= n && i1.push(new le4(r, t, n, s));
        return i1.length == 1 ? i1[0] : new q3(i1);
    }
    get startSide() {
        return this.value ? this.value.startSide : 0;
    }
    goto(e, t = -1e9) {
        for (let n of this.heap)n.goto(e, t);
        for(let n1 = this.heap.length >> 1; n1 >= 0; n1--)ae3(this.heap, n1);
        return this.next(), this;
    }
    forward(e, t) {
        for (let n of this.heap)n.forward(e, t);
        for(let n1 = this.heap.length >> 1; n1 >= 0; n1--)ae3(this.heap, n1);
        (this.to - e || this.value.endSide - t) < 0 && this.next();
    }
    next() {
        if (this.heap.length == 0) this.from = this.to = 1e9, this.value = null, this.rank = -1;
        else {
            let e = this.heap[0];
            this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), ae3(this.heap, 0);
        }
    }
};
function ae3(l, e) {
    for(let t = l[e];;){
        let n = (e << 1) + 1;
        if (n >= l.length) break;
        let i1 = l[n];
        if (n + 1 < l.length && i1.compare(l[n + 1]) >= 0 && (i1 = l[n + 1], n++), t.compare(i1) < 0) break;
        l[n] = t, l[e] = i1, e = n;
    }
}
var J3 = class {
    constructor(e, t, n){
        this.minPoint = n, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = q3.from(e, t, n);
    }
    goto(e, t = -1e9) {
        return this.cursor.goto(e, t), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t, this.openStart = -1, this.next(), this;
    }
    forward(e, t) {
        for(; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0;)this.removeActive(this.minActive);
        this.cursor.forward(e, t);
    }
    removeActive(e) {
        Y2(this.active, e), Y2(this.activeTo, e), Y2(this.activeRank, e), this.minActive = Re3(this.active, this.activeTo);
    }
    addActive(e) {
        let t = 0, { value: n , to: i1 , rank: s  } = this.cursor;
        for(; t < this.activeRank.length && this.activeRank[t] <= s;)t++;
        _3(this.active, t, n), _3(this.activeTo, t, i1), _3(this.activeRank, t, s), e && _3(e, t, this.cursor.from), this.minActive = Re3(this.active, this.activeTo);
    }
    next() {
        let e = this.to, t = this.point;
        this.point = null;
        let n = this.openStart < 0 ? [] : null, i1 = 0;
        for(;;){
            let s = this.minActive;
            if (s > -1 && (this.activeTo[s] - this.cursor.from || this.active[s].endSide - this.cursor.startSide) < 0) {
                if (this.activeTo[s] > e) {
                    this.to = this.activeTo[s], this.endSide = this.active[s].endSide;
                    break;
                }
                this.removeActive(s), n && Y2(n, s);
            } else if (this.cursor.value) if (this.cursor.from > e) {
                this.to = this.cursor.from, this.endSide = this.cursor.startSide;
                break;
            } else {
                let r = this.cursor.value;
                if (!r.point) this.addActive(n), this.cursor.next();
                else if (t && this.cursor.to == this.to && this.cursor.from < this.cursor.to) this.cursor.next();
                else {
                    this.point = r, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = r.endSide, this.cursor.from < e && (i1 = 1), this.cursor.next(), this.forward(this.to, this.endSide);
                    break;
                }
            }
            else {
                this.to = this.endSide = 1e9;
                break;
            }
        }
        if (n) {
            let s1 = 0;
            for(; s1 < n.length && n[s1] < e;)s1++;
            this.openStart = s1 + i1;
        }
    }
    activeForPoint(e) {
        if (!this.active.length) return this.active;
        let t = [];
        for(let n = this.active.length - 1; n >= 0 && !(this.activeRank[n] < this.pointRank); n--)(this.activeTo[n] > e || this.activeTo[n] == e && this.active[n].endSide >= this.point.endSide) && t.push(this.active[n]);
        return t.reverse();
    }
    openEnd(e) {
        let t = 0;
        for(let n = this.activeTo.length - 1; n >= 0 && this.activeTo[n] > e; n--)t++;
        return t;
    }
};
function Me3(l, e, t, n, i1, s) {
    l.goto(e), t.goto(n);
    let r = n + i1, h = n, o = n - e;
    for(;;){
        let a = l.to + o - t.to || l.endSide - t.endSide, f = a < 0 ? l.to + o : t.to, u = Math.min(f, r);
        if (l.point || t.point ? l.point && t.point && (l.point == t.point || l.point.eq(t.point)) && xe1(l.activeForPoint(l.to + o), t.activeForPoint(t.to)) || s.comparePoint(h, u, l.point, t.point) : u > h && !xe1(l.active, t.active) && s.compareRange(h, u, l.active, t.active), f > r) break;
        h = f, a <= 0 && l.next(), a >= 0 && t.next();
    }
}
function xe1(l, e) {
    if (l.length != e.length) return !1;
    for(let t = 0; t < l.length; t++)if (l[t] != e[t] && !l[t].eq(e[t])) return !1;
    return !0;
}
function Y2(l, e) {
    for(let t = e, n = l.length - 1; t < n; t++)l[t] = l[t + 1];
    l.pop();
}
function _3(l, e, t) {
    for(let n = l.length - 1; n >= e; n--)l[n + 1] = l[n];
    l[e] = t;
}
function Re3(l, e) {
    let t = -1, n = 1e9;
    for(let i1 = 0; i1 < e.length; i1++)(e[i1] - n || l[i1].endSide - l[t].endSide) < 0 && (t = i1, n = e[i1]);
    return t;
}
function ot3(l, e, t = l.length) {
    let n = 0;
    for(let i1 = 0; i1 < t;)l.charCodeAt(i1) == 9 ? (n += e - n % e, i1++) : (n++, i1 = ie4(l, i1));
    return n;
}
function at3(l, e, t, n) {
    for(let i1 = 0, s = 0;;){
        if (s >= e) return i1;
        if (i1 == l.length) break;
        s += l.charCodeAt(i1) == 9 ? t - s % t : 1, i1 = ie4(l, i1);
    }
    return n === !0 ? -1 : l.length;
}
var S5 = "\u037C", w4 = typeof Symbol > "u" ? "__" + S5 : Symbol.for(S5), c3 = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), b3 = typeof globalThis < "u" ? globalThis : typeof document < "u" ? window : {}, T6 = class {
    constructor(e, l){
        this.rules = [];
        let { finish: u  } = l || {};
        function n(t) {
            return /^@/.test(t) ? [
                t
            ] : t.split(/,\s*/);
        }
        function s(t, i1, h, x1) {
            let d1 = [], r = /^@(\w+)\b/.exec(t[0]), g = r && r[1] == "keyframes";
            if (r && i1 == null) return h.push(t[0] + ";");
            for(let a in i1){
                let o = i1[a];
                if (/&/.test(a)) s(a.split(/,\s*/).map((f)=>t.map((y)=>f.replace(/&/, y))).reduce((f, y)=>f.concat(y)), o, h);
                else if (o && typeof o == "object") {
                    if (!r) throw new RangeError("The value of a property (" + a + ") should be a primitive value.");
                    s(n(a), o, d1, g);
                } else o != null && d1.push(a.replace(/_.*/, "").replace(/[A-Z]/g, (f)=>"-" + f.toLowerCase()) + ": " + o + ";");
            }
            (d1.length || g) && h.push((u && !r && !x1 ? t.map(u) : t).join(", ") + " {" + d1.join(" ") + "}");
        }
        for(let t in e)s(n(t), e[t], this.rules);
    }
    getRules() {
        return this.rules.join(`
`);
    }
    static newName() {
        let e = b3[w4] || 1;
        return b3[w4] = e + 1, S5 + e.toString(36);
    }
    static mount(e, l) {
        (e[c3] || new m5(e)).mount(Array.isArray(l) ? l : [
            l
        ]);
    }
}, p4 = null, m5 = class {
    constructor(e){
        if (!e.head && e.adoptedStyleSheets && typeof CSSStyleSheet < "u") {
            if (p4) return e.adoptedStyleSheets = [
                p4.sheet
            ].concat(e.adoptedStyleSheets), e[c3] = p4;
            this.sheet = new CSSStyleSheet, e.adoptedStyleSheets = [
                this.sheet
            ].concat(e.adoptedStyleSheets), p4 = this;
        } else {
            this.styleTag = (e.ownerDocument || e).createElement("style");
            let l = e.head || e;
            l.insertBefore(this.styleTag, l.firstChild);
        }
        this.modules = [], e[c3] = this;
    }
    mount(e) {
        let l = this.sheet, u = 0, n = 0;
        for(let s = 0; s < e.length; s++){
            let t = e[s], i1 = this.modules.indexOf(t);
            if (i1 < n && i1 > -1 && (this.modules.splice(i1, 1), n--, i1 = -1), i1 == -1) {
                if (this.modules.splice(n++, 0, t), l) for(let h = 0; h < t.rules.length; h++)l.insertRule(t.rules[h], u++);
            } else {
                for(; n < i1;)u += this.modules[n++].rules.length;
                u += t.rules.length, n++;
            }
        }
        if (!l) {
            let s1 = "";
            for(let t1 = 0; t1 < this.modules.length; t1++)s1 += this.modules[t1].getRules() + `
`;
            this.styleTag.textContent = s1;
        }
    }
};
var t4 = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
}, i2 = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: '"'
}, n4 = typeof navigator < "u" && /Chrome\/(\d+)/.exec(navigator.userAgent), p5 = typeof navigator < "u" && /Gecko\/\d+/.test(navigator.userAgent), g6 = typeof navigator < "u" && /Mac/.test(navigator.platform), d4 = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent), y5 = g6 || n4 && +n4[1] < 57;
for(r2 = 0; r2 < 10; r2++)t4[48 + r2] = t4[96 + r2] = String(r2);
var r2;
for(r2 = 1; r2 <= 24; r2++)t4[r2 + 111] = "F" + r2;
var r2;
for(r2 = 65; r2 <= 90; r2++)t4[r2] = String.fromCharCode(r2 + 32), i2[r2] = String.fromCharCode(r2);
var r2;
for(a3 in t4)i2.hasOwnProperty(a3) || (i2[a3] = t4[a3]);
var a3;
function s4(o) {
    var f = y5 && (o.ctrlKey || o.altKey || o.metaKey) || d4 && o.shiftKey && o.key && o.key.length == 1 || o.key == "Unidentified", e = !f && o.key || (o.shiftKey ? i2 : t4)[o.keyCode] || o.key || "Unidentified";
    return e == "Esc" && (e = "Escape"), e == "Del" && (e = "Delete"), e == "Left" && (e = "ArrowLeft"), e == "Up" && (e = "ArrowUp"), e == "Right" && (e = "ArrowRight"), e == "Down" && (e = "ArrowDown"), e;
}
function ee3(n) {
    let t;
    return n.nodeType == 11 ? t = n.getSelection ? n : n.ownerDocument : t = n, t.getSelection();
}
function yt3(n, t) {
    return t ? n == t || n.contains(t.nodeType != 1 ? t.parentNode : t) : !1;
}
function gn1() {
    let n = document.activeElement;
    for(; n && n.shadowRoot;)n = n.shadowRoot.activeElement;
    return n;
}
function Re4(n, t) {
    if (!t.anchorNode) return !1;
    try {
        return yt3(n, t.anchorNode);
    } catch  {
        return !1;
    }
}
function Nt3(n) {
    return n.nodeType == 3 ? Vt2(n, 0, n.nodeValue.length).getClientRects() : n.nodeType == 1 ? n.getClientRects() : [];
}
function ie5(n, t, e, i1) {
    return e ? xi2(n, t, e, i1, -1) || xi2(n, t, e, i1, 1) : !1;
}
function Le4(n) {
    for(var t = 0;; t++)if (n = n.previousSibling, !n) return t;
}
function xi2(n, t, e, i1, s) {
    for(;;){
        if (n == e && t == i1) return !0;
        if (t == (s < 0 ? 0 : se4(n))) {
            if (n.nodeName == "DIV") return !1;
            let r = n.parentNode;
            if (!r || r.nodeType != 1) return !1;
            t = Le4(n) + (s < 0 ? 0 : 1), n = r;
        } else if (n.nodeType == 1) {
            if (n = n.childNodes[t + (s < 0 ? -1 : 0)], n.nodeType == 1 && n.contentEditable == "false") return !1;
            t = s < 0 ? se4(n) : 0;
        } else return !1;
    }
}
function se4(n) {
    return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
var us1 = {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
};
function we4(n, t) {
    let e = t ? n.left : n.right;
    return {
        left: e,
        right: e,
        top: n.top,
        bottom: n.bottom
    };
}
function bn1(n) {
    return {
        left: 0,
        right: n.innerWidth,
        top: 0,
        bottom: n.innerHeight
    };
}
function yn1(n, t, e, i1, s, r, o, l) {
    let h = n.ownerDocument, a = h.defaultView;
    for(let c = n; c;)if (c.nodeType == 1) {
        let f, d1 = c == h.body;
        if (d1) f = bn1(a);
        else {
            if (c.scrollHeight <= c.clientHeight && c.scrollWidth <= c.clientWidth) {
                c = c.parentNode;
                continue;
            }
            let m = c.getBoundingClientRect();
            f = {
                left: m.left,
                right: m.left + c.clientWidth,
                top: m.top,
                bottom: m.top + c.clientHeight
            };
        }
        let u = 0, p1 = 0;
        if (s == "nearest") t.top < f.top ? (p1 = -(f.top - t.top + o), e > 0 && t.bottom > f.bottom + p1 && (p1 = t.bottom - f.bottom + p1 + o)) : t.bottom > f.bottom && (p1 = t.bottom - f.bottom + o, e < 0 && t.top - p1 < f.top && (p1 = -(f.top + p1 - t.top + o)));
        else {
            let m1 = t.bottom - t.top, b = f.bottom - f.top;
            p1 = (s == "center" && m1 <= b ? t.top + m1 / 2 - b / 2 : s == "start" || s == "center" && e < 0 ? t.top - o : t.bottom - b + o) - f.top;
        }
        if (i1 == "nearest" ? t.left < f.left ? (u = -(f.left - t.left + r), e > 0 && t.right > f.right + u && (u = t.right - f.right + u + r)) : t.right > f.right && (u = t.right - f.right + r, e < 0 && t.left < f.left + u && (u = -(f.left + u - t.left + r))) : u = (i1 == "center" ? t.left + (t.right - t.left) / 2 - (f.right - f.left) / 2 : i1 == "start" == l ? t.left - r : t.right - (f.right - f.left) + r) - f.left, u || p1) if (d1) a.scrollBy(u, p1);
        else {
            if (p1) {
                let m2 = c.scrollTop;
                c.scrollTop += p1, p1 = c.scrollTop - m2;
            }
            if (u) {
                let m3 = c.scrollLeft;
                c.scrollLeft += u, u = c.scrollLeft - m3;
            }
            t = {
                left: t.left - u,
                top: t.top - p1,
                right: t.right - u,
                bottom: t.bottom - p1
            };
        }
        if (d1) break;
        c = c.assignedSlot || c.parentNode, i1 = s = "nearest";
    } else if (c.nodeType == 11) c = c.host;
    else break;
}
var Ee4 = class {
    constructor(){
        this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
    }
    eq(t) {
        return this.anchorNode == t.anchorNode && this.anchorOffset == t.anchorOffset && this.focusNode == t.focusNode && this.focusOffset == t.focusOffset;
    }
    setRange(t) {
        this.set(t.anchorNode, t.anchorOffset, t.focusNode, t.focusOffset);
    }
    set(t, e, i1, s) {
        this.anchorNode = t, this.anchorOffset = e, this.focusNode = i1, this.focusOffset = s;
    }
}, ut3 = null;
function ds1(n) {
    if (n.setActive) return n.setActive();
    if (ut3) return n.focus(ut3);
    let t = [];
    for(let e = n; e && (t.push(e, e.scrollTop, e.scrollLeft), e != e.ownerDocument); e = e.parentNode);
    if (n.focus(ut3 == null ? {
        get preventScroll () {
            return ut3 = {
                preventScroll: !0
            }, !0;
        }
    } : void 0), !ut3) {
        ut3 = !1;
        for(let e1 = 0; e1 < t.length;){
            let i1 = t[e1++], s = t[e1++], r = t[e1++];
            i1.scrollTop != s && (i1.scrollTop = s), i1.scrollLeft != r && (i1.scrollLeft = r);
        }
    }
}
var Si2;
function Vt2(n, t, e = t) {
    let i1 = Si2 || (Si2 = document.createRange());
    return i1.setEnd(n, e), i1.setStart(n, t), i1;
}
function Lt3(n, t, e) {
    let i1 = {
        key: t,
        code: t,
        keyCode: e,
        which: e,
        cancelable: !0
    }, s = new KeyboardEvent("keydown", i1);
    s.synthetic = !0, n.dispatchEvent(s);
    let r = new KeyboardEvent("keyup", i1);
    return r.synthetic = !0, n.dispatchEvent(r), s.defaultPrevented || r.defaultPrevented;
}
function wn1(n) {
    for(; n;){
        if (n && (n.nodeType == 9 || n.nodeType == 11 && n.host)) return n;
        n = n.assignedSlot || n.parentNode;
    }
    return null;
}
function ps1(n) {
    for(; n.attributes.length;)n.removeAttributeNode(n.attributes[0]);
}
var B5 = class {
    constructor(t, e, i1 = !0){
        this.node = t, this.offset = e, this.precise = i1;
    }
    static before(t, e) {
        return new B5(t.parentNode, Le4(t), e);
    }
    static after(t, e) {
        return new B5(t.parentNode, Le4(t) + 1, e);
    }
}, mi2 = [], O4 = class {
    constructor(){
        this.parent = null, this.dom = null, this.dirty = 2;
    }
    get editorView() {
        if (!this.parent) throw new Error("Accessing view in orphan content view");
        return this.parent.editorView;
    }
    get overrideDOMText() {
        return null;
    }
    get posAtStart() {
        return this.parent ? this.parent.posBefore(this) : 0;
    }
    get posAtEnd() {
        return this.posAtStart + this.length;
    }
    posBefore(t) {
        let e = this.posAtStart;
        for (let i1 of this.children){
            if (i1 == t) return e;
            e += i1.length + i1.breakAfter;
        }
        throw new RangeError("Invalid child in posBefore");
    }
    posAfter(t) {
        return this.posBefore(t) + t.length;
    }
    coordsAt(t, e) {
        return null;
    }
    sync(t) {
        if (this.dirty & 2) {
            let e = this.dom, i1 = null, s;
            for (let r of this.children){
                if (r.dirty) {
                    if (!r.dom && (s = i1 ? i1.nextSibling : e.firstChild)) {
                        let o = O4.get(s);
                        (!o || !o.parent && o.constructor == r.constructor) && r.reuseDOM(s);
                    }
                    r.sync(t), r.dirty = 0;
                }
                if (s = i1 ? i1.nextSibling : e.firstChild, t && !t.written && t.node == e && s != r.dom && (t.written = !0), r.dom.parentNode == e) for(; s && s != r.dom;)s = Ci2(s);
                else e.insertBefore(r.dom, s);
                i1 = r.dom;
            }
            for(s = i1 ? i1.nextSibling : e.firstChild, s && t && t.node == e && (t.written = !0); s;)s = Ci2(s);
        } else if (this.dirty & 1) for (let e1 of this.children)e1.dirty && (e1.sync(t), e1.dirty = 0);
    }
    reuseDOM(t) {}
    localPosFromDOM(t, e) {
        let i1;
        if (t == this.dom) i1 = this.dom.childNodes[e];
        else {
            let s = se4(t) == 0 ? 0 : e == 0 ? -1 : 1;
            for(;;){
                let r = t.parentNode;
                if (r == this.dom) break;
                s == 0 && r.firstChild != r.lastChild && (t == r.firstChild ? s = -1 : s = 1), t = r;
            }
            s < 0 ? i1 = t : i1 = t.nextSibling;
        }
        if (i1 == this.dom.firstChild) return 0;
        for(; i1 && !O4.get(i1);)i1 = i1.nextSibling;
        if (!i1) return this.length;
        for(let s1 = 0, r1 = 0;; s1++){
            let o = this.children[s1];
            if (o.dom == i1) return r1;
            r1 += o.length + o.breakAfter;
        }
    }
    domBoundsAround(t, e, i1 = 0) {
        let s = -1, r = -1, o = -1, l = -1;
        for(let h = 0, a = i1, c = i1; h < this.children.length; h++){
            let f = this.children[h], d1 = a + f.length;
            if (a < t && d1 > e) return f.domBoundsAround(t, e, a);
            if (d1 >= t && s == -1 && (s = h, r = a), a > e && f.dom.parentNode == this.dom) {
                o = h, l = c;
                break;
            }
            c = d1, a = d1 + f.breakAfter;
        }
        return {
            from: r,
            to: l < 0 ? i1 + this.length : l,
            startDOM: (s ? this.children[s - 1].dom.nextSibling : null) || this.dom.firstChild,
            endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
        };
    }
    markDirty(t = !1) {
        this.dirty |= 2, this.markParentsDirty(t);
    }
    markParentsDirty(t) {
        for(let e = this.parent; e; e = e.parent){
            if (t && (e.dirty |= 2), e.dirty & 1) return;
            e.dirty |= 1, t = !1;
        }
    }
    setParent(t) {
        this.parent != t && (this.parent = t, this.dirty && this.markParentsDirty(!0));
    }
    setDOM(t) {
        this.dom && (this.dom.cmView = null), this.dom = t, t.cmView = this;
    }
    get rootView() {
        for(let t = this;;){
            let e = t.parent;
            if (!e) return t;
            t = e;
        }
    }
    replaceChildren(t, e, i1 = mi2) {
        this.markDirty();
        for(let s = t; s < e; s++){
            let r = this.children[s];
            r.parent == this && r.destroy();
        }
        this.children.splice(t, e - t, ...i1);
        for(let s1 = 0; s1 < i1.length; s1++)i1[s1].setParent(this);
    }
    ignoreMutation(t) {
        return !1;
    }
    ignoreEvent(t) {
        return !1;
    }
    childCursor(t = this.length) {
        return new ne4(this.children, t, this.children.length);
    }
    childPos(t, e = 1) {
        return this.childCursor().findPos(t, e);
    }
    toString() {
        let t = this.constructor.name.replace("View", "");
        return t + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (t == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
    static get(t) {
        return t.cmView;
    }
    get isEditable() {
        return !0;
    }
    merge(t, e, i1, s, r, o) {
        return !1;
    }
    become(t) {
        return !1;
    }
    getSide() {
        return 0;
    }
    destroy() {
        this.parent = null;
    }
};
O4.prototype.breakAfter = 0;
function Ci2(n) {
    let t = n.nextSibling;
    return n.parentNode.removeChild(n), t;
}
var ne4 = class {
    constructor(t, e, i1){
        this.children = t, this.pos = e, this.i = i1, this.off = 0;
    }
    findPos(t, e = 1) {
        for(;;){
            if (t > this.pos || t == this.pos && (e > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) return this.off = t - this.pos, this;
            let i1 = this.children[--this.i];
            this.pos -= i1.length + i1.breakAfter;
        }
    }
};
function ms1(n, t, e, i1, s, r, o, l, h) {
    let { children: a  } = n, c = a.length ? a[t] : null, f = r.length ? r[r.length - 1] : null, d1 = f ? f.breakAfter : o;
    if (!(t == i1 && c && !o && !d1 && r.length < 2 && c.merge(e, s, r.length ? f : null, e == 0, l, h))) {
        if (i1 < a.length) {
            let u = a[i1];
            u && s < u.length ? (t == i1 && (u = u.split(s), s = 0), !d1 && f && u.merge(0, s, f, !0, 0, h) ? r[r.length - 1] = u : (s && u.merge(0, s, null, !1, 0, h), r.push(u))) : u?.breakAfter && (f ? f.breakAfter = 1 : o = 1), i1++;
        }
        for(c && (c.breakAfter = o, e > 0 && (!o && r.length && c.merge(e, c.length, r[0], !1, l, 0) ? c.breakAfter = r.shift().breakAfter : (e < c.length || c.children.length && c.children[c.children.length - 1].length == 0) && c.merge(e, c.length, null, !1, l, 0), t++)); t < i1 && r.length;)if (a[i1 - 1].become(r[r.length - 1])) i1--, r.pop(), h = r.length ? 0 : l;
        else if (a[t].become(r[0])) t++, r.shift(), l = r.length ? 0 : h;
        else break;
        !r.length && t && i1 < a.length && !a[t - 1].breakAfter && a[i1].merge(0, 0, a[t - 1], !1, l, h) && t--, (t < i1 || r.length) && n.replaceChildren(t, i1, r);
    }
}
function gs1(n, t, e, i1, s, r) {
    let o = n.childCursor(), { i: l , off: h  } = o.findPos(e, 1), { i: a , off: c  } = o.findPos(t, -1), f = t - e;
    for (let d1 of i1)f += d1.length;
    n.length += f, ms1(n, a, c, l, h, i1, 0, s, r);
}
var F4 = typeof navigator < "u" ? navigator : {
    userAgent: "",
    vendor: "",
    platform: ""
}, Be3 = typeof document < "u" ? document : {
    documentElement: {
        style: {}
    }
}, Pe3 = /Edge\/(\d+)/.exec(F4.userAgent), bs2 = /MSIE \d/.test(F4.userAgent), He3 = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(F4.userAgent), ve4 = !!(bs2 || He3 || Pe3), Mi2 = !ve4 && /gecko\/(\d+)/i.test(F4.userAgent), xe2 = !ve4 && /Chrome\/(\d+)/.exec(F4.userAgent), ki2 = "webkitFontSmoothing" in Be3.documentElement.style, ys2 = !ve4 && /Apple Computer/.test(F4.vendor), Ai2 = ys2 && (/Mobile\/\w+/.test(F4.userAgent) || F4.maxTouchPoints > 2), g7 = {
    mac: Ai2 || /Mac/.test(F4.platform),
    windows: /Win/.test(F4.platform),
    linux: /Linux|X11/.test(F4.platform),
    ie: ve4,
    ie_version: bs2 ? Be3.documentMode || 6 : He3 ? +He3[1] : Pe3 ? +Pe3[1] : 0,
    gecko: Mi2,
    gecko_version: Mi2 ? +(/Firefox\/(\d+)/.exec(F4.userAgent) || [
        0,
        0
    ])[1] : 0,
    chrome: !!xe2,
    chrome_version: xe2 ? +xe2[1] : 0,
    ios: Ai2,
    android: /Android\b/.test(F4.userAgent),
    webkit: ki2,
    safari: ys2,
    webkit_version: ki2 ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [
        0,
        0
    ])[1] : 0,
    tabSize: Be3.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
}, vn1 = 256, G3 = class extends O4 {
    constructor(t){
        super(), this.text = t;
    }
    get length() {
        return this.text.length;
    }
    createDOM(t) {
        this.setDOM(t || document.createTextNode(this.text));
    }
    sync(t) {
        this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t && t.node == this.dom && (t.written = !0), this.dom.nodeValue = this.text);
    }
    reuseDOM(t) {
        t.nodeType == 3 && this.createDOM(t);
    }
    merge(t, e, i1) {
        return i1 && (!(i1 instanceof G3) || this.length - (e - t) + i1.length > vn1) ? !1 : (this.text = this.text.slice(0, t) + (i1 ? i1.text : "") + this.text.slice(e), this.markDirty(), !0);
    }
    split(t) {
        let e = new G3(this.text.slice(t));
        return this.text = this.text.slice(0, t), this.markDirty(), e;
    }
    localPosFromDOM(t, e) {
        return t == this.dom ? e : e ? this.text.length : 0;
    }
    domAtPos(t) {
        return new B5(this.dom, t);
    }
    domBoundsAround(t, e, i1) {
        return {
            from: i1,
            to: i1 + this.length,
            startDOM: this.dom,
            endDOM: this.dom.nextSibling
        };
    }
    coordsAt(t, e) {
        return Ne4(this.dom, t, e);
    }
}, q4 = class extends O4 {
    constructor(t, e = [], i1 = 0){
        super(), this.mark = t, this.children = e, this.length = i1;
        for (let s of e)s.setParent(this);
    }
    setAttrs(t) {
        if (ps1(t), this.mark.class && (t.className = this.mark.class), this.mark.attrs) for(let e in this.mark.attrs)t.setAttribute(e, this.mark.attrs[e]);
        return t;
    }
    reuseDOM(t) {
        t.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(t), this.dirty |= 6);
    }
    sync(t) {
        this.dom ? this.dirty & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(t);
    }
    merge(t, e, i1, s, r, o) {
        return i1 && (!(i1 instanceof q4 && i1.mark.eq(this.mark)) || t && r <= 0 || e < this.length && o <= 0) ? !1 : (gs1(this, t, e, i1 ? i1.children : [], r - 1, o - 1), this.markDirty(), !0);
    }
    split(t) {
        let e = [], i1 = 0, s = -1, r = 0;
        for (let l of this.children){
            let h = i1 + l.length;
            h > t && e.push(i1 < t ? l.split(t - i1) : l), s < 0 && i1 >= t && (s = r), i1 = h, r++;
        }
        let o = this.length - t;
        return this.length = t, s > -1 && (this.children.length = s, this.markDirty()), new q4(this.mark, e, o);
    }
    domAtPos(t) {
        return vs1(this.dom, this.children, t);
    }
    coordsAt(t, e) {
        return Ss1(this, t, e);
    }
};
function Ne4(n, t, e) {
    let i1 = n.nodeValue.length;
    t > i1 && (t = i1);
    let s = t, r = t, o = 0;
    t == 0 && e < 0 || t == i1 && e >= 0 ? g7.chrome || g7.gecko || (t ? (s--, o = 1) : r < i1 && (r++, o = -1)) : e < 0 ? s-- : r < i1 && r++;
    let l = Vt2(n, s, r).getClientRects();
    if (!l.length) return us1;
    let h = l[(o ? o < 0 : e >= 0) ? 0 : l.length - 1];
    return g7.safari && !o && h.width == 0 && (h = Array.prototype.find.call(l, (a)=>a.width) || h), o ? we4(h, o < 0) : h || null;
}
var j4 = class extends O4 {
    constructor(t, e, i1){
        super(), this.widget = t, this.length = e, this.side = i1, this.prevWidget = null;
    }
    static create(t, e, i1) {
        return new (t.customView || j4)(t, e, i1);
    }
    split(t) {
        let e = j4.create(this.widget, this.length - t, this.side);
        return this.length -= t, e;
    }
    sync() {
        (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
    }
    getSide() {
        return this.side;
    }
    merge(t, e, i1, s, r, o) {
        return i1 && (!(i1 instanceof j4) || !this.widget.compare(i1.widget) || t > 0 && r <= 0 || e < this.length && o <= 0) ? !1 : (this.length = t + (i1 ? i1.length : 0) + (this.length - e), !0);
    }
    become(t) {
        return t.length == this.length && t instanceof j4 && t.side == this.side && this.widget.constructor == t.widget.constructor ? (this.widget.eq(t.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t.widget, !0) : !1;
    }
    ignoreMutation() {
        return !0;
    }
    ignoreEvent(t) {
        return this.widget.ignoreEvent(t);
    }
    get overrideDOMText() {
        if (this.length == 0) return v5.empty;
        let t = this;
        for(; t.parent;)t = t.parent;
        let e = t.editorView, i1 = e && e.state.doc, s = this.posAtStart;
        return i1 ? i1.slice(s, s + this.length) : v5.empty;
    }
    domAtPos(t) {
        return t == 0 ? B5.before(this.dom) : B5.after(this.dom, t == this.length);
    }
    domBoundsAround() {
        return null;
    }
    coordsAt(t, e) {
        let i1 = this.dom.getClientRects(), s = null;
        if (!i1.length) return us1;
        for(let r = t > 0 ? i1.length - 1 : 0; s = i1[r], !(t > 0 ? r == 0 : r == i1.length - 1 || s.top < s.bottom); r += t > 0 ? -1 : 1);
        return t == 0 && e > 0 || t == this.length && e <= 0 ? s : we4(s, t == 0);
    }
    get isEditable() {
        return !1;
    }
    destroy() {
        super.destroy(), this.dom && this.widget.destroy(this.dom);
    }
}, re3 = class extends j4 {
    domAtPos(t) {
        let { topView: e , text: i1  } = this.widget;
        return e ? Ve3(t, 0, e, i1, (s, r)=>s.domAtPos(r), (s)=>new B5(i1, Math.min(s, i1.nodeValue.length))) : new B5(i1, Math.min(t, i1.nodeValue.length));
    }
    sync() {
        this.setDOM(this.widget.toDOM());
    }
    localPosFromDOM(t, e) {
        let { topView: i1 , text: s  } = this.widget;
        return i1 ? ws2(t, e, i1, s) : Math.min(e, this.length);
    }
    ignoreMutation() {
        return !1;
    }
    get overrideDOMText() {
        return null;
    }
    coordsAt(t, e) {
        let { topView: i1 , text: s  } = this.widget;
        return i1 ? Ve3(t, e, i1, s, (r, o, l)=>r.coordsAt(o, l), (r, o)=>Ne4(s, r, o)) : Ne4(s, t, e);
    }
    destroy() {
        var t;
        super.destroy(), (t = this.widget.topView) === null || t === void 0 || t.destroy();
    }
    get isEditable() {
        return !0;
    }
};
function Ve3(n, t, e, i1, s, r) {
    if (e instanceof q4) {
        for (let o of e.children){
            let l = yt3(o.dom, i1), h = l ? i1.nodeValue.length : o.length;
            if (n < h || n == h && o.getSide() <= 0) return l ? Ve3(n, t, o, i1, s, r) : s(o, n, t);
            n -= h;
        }
        return s(e, e.length, -1);
    } else return e.dom == i1 ? r(n, t) : s(e, n, t);
}
function ws2(n, t, e, i1) {
    if (e instanceof q4) for (let s of e.children){
        let r = 0, o = yt3(s.dom, i1);
        if (yt3(s.dom, n)) return r + (o ? ws2(n, t, s, i1) : s.localPosFromDOM(n, t));
        r += o ? i1.nodeValue.length : s.length;
    }
    else if (e.dom == i1) return Math.min(t, i1.nodeValue.length);
    return e.localPosFromDOM(n, t);
}
var lt4 = class extends O4 {
    constructor(t){
        super(), this.side = t;
    }
    get length() {
        return 0;
    }
    merge() {
        return !1;
    }
    become(t) {
        return t instanceof lt4 && t.side == this.side;
    }
    split() {
        return new lt4(this.side);
    }
    sync() {
        if (!this.dom) {
            let t = document.createElement("img");
            t.className = "cm-widgetBuffer", t.setAttribute("aria-hidden", "true"), this.setDOM(t);
        }
    }
    getSide() {
        return this.side;
    }
    domAtPos(t) {
        return B5.before(this.dom);
    }
    localPosFromDOM() {
        return 0;
    }
    domBoundsAround() {
        return null;
    }
    coordsAt(t) {
        let e = this.dom.getBoundingClientRect(), i1 = xn1(this, this.side > 0 ? -1 : 1);
        return i1 && i1.top < e.bottom && i1.bottom > e.top ? {
            left: e.left,
            right: e.right,
            top: i1.top,
            bottom: i1.bottom
        } : e;
    }
    get overrideDOMText() {
        return v5.empty;
    }
};
G3.prototype.children = j4.prototype.children = lt4.prototype.children = mi2;
function xn1(n, t) {
    let e = n.parent, i1 = e ? e.children.indexOf(n) : -1;
    for(; e && i1 >= 0;)if (t < 0 ? i1 > 0 : i1 < e.children.length) {
        let s = e.children[i1 + t];
        if (s instanceof G3) {
            let r = s.coordsAt(t < 0 ? s.length : 0, t);
            if (r) return r;
        }
        i1 += t;
    } else if (e instanceof q4 && e.parent) i1 = e.parent.children.indexOf(e) + (t < 0 ? 0 : 1), e = e.parent;
    else {
        let s1 = e.dom.lastChild;
        if (s1 && s1.nodeName == "BR") return s1.getClientRects()[0];
        break;
    }
}
function vs1(n, t, e) {
    let i1 = 0;
    for(let s = 0; i1 < t.length; i1++){
        let r = t[i1], o = s + r.length;
        if (!(o == s && r.getSide() <= 0)) {
            if (e > s && e < o && r.dom.parentNode == n) return r.domAtPos(e - s);
            if (e <= s) break;
            s = o;
        }
    }
    for(; i1 > 0; i1--){
        let s1 = t[i1 - 1].dom;
        if (s1.parentNode == n) return B5.after(s1);
    }
    return new B5(n, 0);
}
function xs1(n, t, e) {
    let i1, { children: s  } = n;
    e > 0 && t instanceof q4 && s.length && (i1 = s[s.length - 1]) instanceof q4 && i1.mark.eq(t.mark) ? xs1(i1, t.children[0], e - 1) : (s.push(t), t.setParent(n)), n.length += t.length;
}
function Ss1(n, t, e) {
    for(let r = 0, o = 0; o < n.children.length; o++){
        let l = n.children[o], h = r + l.length, a;
        if ((e <= 0 || h == n.length || l.getSide() > 0 ? h >= t : h > t) && (t < h || o + 1 == n.children.length || (a = n.children[o + 1]).length || a.getSide() > 0)) {
            let c = 0;
            if (h == r) {
                if (l.getSide() <= 0) continue;
                c = e = -l.getSide();
            }
            let f = l.coordsAt(Math.max(0, t - r), e);
            return c && f ? we4(f, e < 0) : f;
        }
        r = h;
    }
    let i1 = n.dom.lastChild;
    if (!i1) return n.dom.getBoundingClientRect();
    let s = Nt3(i1);
    return s[s.length - 1] || null;
}
function We4(n, t) {
    for(let e in n)e == "class" && t.class ? t.class += " " + n.class : e == "style" && t.style ? t.style += ";" + n.style : t[e] = n[e];
    return t;
}
function gi2(n, t) {
    if (n == t) return !0;
    if (!n || !t) return !1;
    let e = Object.keys(n), i1 = Object.keys(t);
    if (e.length != i1.length) return !1;
    for (let s of e)if (i1.indexOf(s) == -1 || n[s] !== t[s]) return !1;
    return !0;
}
function ze3(n, t, e) {
    let i1 = null;
    if (t) for(let s in t)e && s in e || n.removeAttribute(i1 = s);
    if (e) for(let s1 in e)t && t[s1] == e[s1] || n.setAttribute(i1 = s1, e[s1]);
    return !!i1;
}
var X4 = class {
    eq(t) {
        return !1;
    }
    updateDOM(t) {
        return !1;
    }
    compare(t) {
        return this == t || this.constructor == t.constructor && this.eq(t);
    }
    get estimatedHeight() {
        return -1;
    }
    ignoreEvent(t) {
        return !0;
    }
    get customView() {
        return null;
    }
    destroy(t) {}
}, D5 = function(n) {
    return n[n.Text = 0] = "Text", n[n.WidgetBefore = 1] = "WidgetBefore", n[n.WidgetAfter = 2] = "WidgetAfter", n[n.WidgetRange = 3] = "WidgetRange", n;
}(D5 || (D5 = {})), M6 = class extends j3 {
    constructor(t, e, i1, s){
        super(), this.startSide = t, this.endSide = e, this.widget = i1, this.spec = s;
    }
    get heightRelevant() {
        return !1;
    }
    static mark(t) {
        return new wt3(t);
    }
    static widget(t) {
        let e = t.side || 0, i1 = !!t.block;
        return e += i1 ? e > 0 ? 3e8 : -4e8 : e > 0 ? 1e8 : -1e8, new U3(t, e, e, i1, t.widget || null, !1);
    }
    static replace(t) {
        let e = !!t.block, i1, s;
        if (t.isBlockGap) i1 = -5e8, s = 4e8;
        else {
            let { start: r , end: o  } = Cs1(t, e);
            i1 = (r ? e ? -3e8 : -1 : 5e8) - 1, s = (o ? e ? 2e8 : 1 : -6e8) + 1;
        }
        return new U3(t, i1, s, e, t.widget || null, !0);
    }
    static line(t) {
        return new ct3(t);
    }
    static set(t, e = !1) {
        return P3.of(t, e);
    }
    hasHeight() {
        return this.widget ? this.widget.estimatedHeight > -1 : !1;
    }
};
M6.none = P3.empty;
var wt3 = class extends M6 {
    constructor(t){
        let { start: e , end: i1  } = Cs1(t);
        super(e ? -1 : 5e8, i1 ? 1 : -6e8, null, t), this.tagName = t.tagName || "span", this.class = t.class || "", this.attrs = t.attributes || null;
    }
    eq(t) {
        return this == t || t instanceof wt3 && this.tagName == t.tagName && this.class == t.class && gi2(this.attrs, t.attrs);
    }
    range(t, e = t) {
        if (t >= e) throw new RangeError("Mark decorations may not be empty");
        return super.range(t, e);
    }
};
wt3.prototype.point = !1;
var ct3 = class extends M6 {
    constructor(t){
        super(-2e8, -2e8, null, t);
    }
    eq(t) {
        return t instanceof ct3 && gi2(this.spec.attributes, t.spec.attributes);
    }
    range(t, e = t) {
        if (e != t) throw new RangeError("Line decoration ranges must be zero-length");
        return super.range(t, e);
    }
};
ct3.prototype.mapMode = M5.TrackBefore;
ct3.prototype.point = !0;
var U3 = class extends M6 {
    constructor(t, e, i1, s, r, o){
        super(e, i1, r, t), this.block = s, this.isReplace = o, this.mapMode = s ? e <= 0 ? M5.TrackBefore : M5.TrackAfter : M5.TrackDel;
    }
    get type() {
        return this.startSide < this.endSide ? D5.WidgetRange : this.startSide <= 0 ? D5.WidgetBefore : D5.WidgetAfter;
    }
    get heightRelevant() {
        return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
    }
    eq(t) {
        return t instanceof U3 && Sn1(this.widget, t.widget) && this.block == t.block && this.startSide == t.startSide && this.endSide == t.endSide;
    }
    range(t, e = t) {
        if (this.isReplace && (t > e || t == e && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
        if (!this.isReplace && e != t) throw new RangeError("Widget decorations can only have zero-length ranges");
        return super.range(t, e);
    }
};
U3.prototype.point = !0;
function Cs1(n, t = !1) {
    let { inclusiveStart: e , inclusiveEnd: i1  } = n;
    return e == null && (e = n.inclusive), i1 == null && (i1 = n.inclusive), {
        start: e ?? t,
        end: i1 ?? t
    };
}
function Sn1(n, t) {
    return n == t || !!(n && t && n.compare(t));
}
function Fe3(n, t, e, i1 = 0) {
    let s = e.length - 1;
    s >= 0 && e[s] + i1 >= n ? e[s] = Math.max(e[s], t) : e.push(n, t);
}
var H4 = class extends O4 {
    constructor(){
        super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
    }
    merge(t, e, i1, s, r, o) {
        if (i1) {
            if (!(i1 instanceof H4)) return !1;
            this.dom || i1.transferDOM(this);
        }
        return s && this.setDeco(i1 ? i1.attrs : null), gs1(this, t, e, i1 ? i1.children : [], r, o), !0;
    }
    split(t) {
        let e = new H4;
        if (e.breakAfter = this.breakAfter, this.length == 0) return e;
        let { i: i1 , off: s  } = this.childPos(t);
        s && (e.append(this.children[i1].split(s), 0), this.children[i1].merge(s, this.children[i1].length, null, !1, 0, 0), i1++);
        for(let r = i1; r < this.children.length; r++)e.append(this.children[r], 0);
        for(; i1 > 0 && this.children[i1 - 1].length == 0;)this.children[--i1].destroy();
        return this.children.length = i1, this.markDirty(), this.length = t, e;
    }
    transferDOM(t) {
        !this.dom || (this.markDirty(), t.setDOM(this.dom), t.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
    }
    setDeco(t) {
        gi2(this.attrs, t) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = t);
    }
    append(t, e) {
        xs1(this, t, e);
    }
    addLineDeco(t) {
        let e = t.spec.attributes, i1 = t.spec.class;
        e && (this.attrs = We4(e, this.attrs || {})), i1 && (this.attrs = We4({
            class: i1
        }, this.attrs || {}));
    }
    domAtPos(t) {
        return vs1(this.dom, this.children, t);
    }
    reuseDOM(t) {
        t.nodeName == "DIV" && (this.setDOM(t), this.dirty |= 6);
    }
    sync(t) {
        var e;
        this.dom ? this.dirty & 4 && (ps1(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (ze3(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(t);
        let i1 = this.dom.lastChild;
        for(; i1 && O4.get(i1) instanceof q4;)i1 = i1.lastChild;
        if (!i1 || !this.length || i1.nodeName != "BR" && ((e = O4.get(i1)) === null || e === void 0 ? void 0 : e.isEditable) == !1 && (!g7.ios || !this.children.some((s)=>s instanceof G3))) {
            let s = document.createElement("BR");
            s.cmIgnore = !0, this.dom.appendChild(s);
        }
    }
    measureTextSize() {
        if (this.children.length == 0 || this.length > 20) return null;
        let t = 0;
        for (let e of this.children){
            if (!(e instanceof G3)) return null;
            let i1 = Nt3(e.dom);
            if (i1.length != 1) return null;
            t += i1[0].width;
        }
        return {
            lineHeight: this.dom.getBoundingClientRect().height,
            charWidth: t / this.length
        };
    }
    coordsAt(t, e) {
        return Ss1(this, t, e);
    }
    become(t) {
        return !1;
    }
    get type() {
        return D5.Text;
    }
    static find(t, e) {
        for(let i1 = 0, s = 0; i1 < t.children.length; i1++){
            let r = t.children[i1], o = s + r.length;
            if (o >= e) {
                if (r instanceof H4) return r;
                if (o > e) break;
            }
            s = o + r.breakAfter;
        }
        return null;
    }
}, Y3 = class extends O4 {
    constructor(t, e, i1){
        super(), this.widget = t, this.length = e, this.type = i1, this.breakAfter = 0, this.prevWidget = null;
    }
    merge(t, e, i1, s, r, o) {
        return i1 && (!(i1 instanceof Y3) || !this.widget.compare(i1.widget) || t > 0 && r <= 0 || e < this.length && o <= 0) ? !1 : (this.length = t + (i1 ? i1.length : 0) + (this.length - e), !0);
    }
    domAtPos(t) {
        return t == 0 ? B5.before(this.dom) : B5.after(this.dom, t == this.length);
    }
    split(t) {
        let e = this.length - t;
        this.length = t;
        let i1 = new Y3(this.widget, e, this.type);
        return i1.breakAfter = this.breakAfter, i1;
    }
    get children() {
        return mi2;
    }
    sync() {
        (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
    }
    get overrideDOMText() {
        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : v5.empty;
    }
    domBoundsAround() {
        return null;
    }
    become(t) {
        return t instanceof Y3 && t.type == this.type && t.widget.constructor == this.widget.constructor ? (t.widget.eq(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t.widget, this.length = t.length, this.breakAfter = t.breakAfter, !0) : !1;
    }
    ignoreMutation() {
        return !0;
    }
    ignoreEvent(t) {
        return this.widget.ignoreEvent(t);
    }
    destroy() {
        super.destroy(), this.dom && this.widget.destroy(this.dom);
    }
}, Wt3 = class {
    constructor(t, e, i1, s){
        this.doc = t, this.pos = e, this.end = i1, this.disallowBlockEffectsFor = s, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = t.iter(), this.skip = e;
    }
    posCovered() {
        if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
        let t = this.content[this.content.length - 1];
        return !t.breakAfter && !(t instanceof Y3 && t.type == D5.WidgetBefore);
    }
    getLine() {
        return this.curLine || (this.content.push(this.curLine = new H4), this.atCursorPos = !0), this.curLine;
    }
    flushBuffer(t) {
        this.pendingBuffer && (this.curLine.append(Yt3(new lt4(-1), t), t.length), this.pendingBuffer = 0);
    }
    addBlockWidget(t) {
        this.flushBuffer([]), this.curLine = null, this.content.push(t);
    }
    finish(t) {
        t ? this.pendingBuffer = 0 : this.flushBuffer([]), this.posCovered() || this.getLine();
    }
    buildText(t, e, i1) {
        for(; t > 0;){
            if (this.textOff == this.text.length) {
                let { value: r , lineBreak: o , done: l  } = this.cursor.next(this.skip);
                if (this.skip = 0, l) throw new Error("Ran out of text content when drawing inline views");
                if (o) {
                    this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer([]), this.curLine = null, t--;
                    continue;
                } else this.text = r, this.textOff = 0;
            }
            let s = Math.min(this.text.length - this.textOff, t, 512);
            this.flushBuffer(e.slice(0, i1)), this.getLine().append(Yt3(new G3(this.text.slice(this.textOff, this.textOff + s)), e), i1), this.atCursorPos = !0, this.textOff += s, t -= s, i1 = 0;
        }
    }
    span(t, e, i1, s) {
        this.buildText(e - t, i1, s), this.pos = e, this.openStart < 0 && (this.openStart = s);
    }
    point(t, e, i1, s, r, o) {
        if (this.disallowBlockEffectsFor[o] && i1 instanceof U3) {
            if (i1.block) throw new RangeError("Block decorations may not be specified via plugins");
            if (e > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
        }
        let l = e - t;
        if (i1 instanceof U3) if (i1.block) {
            let { type: h  } = i1;
            h == D5.WidgetAfter && !this.posCovered() && this.getLine(), this.addBlockWidget(new Y3(i1.widget || new oe5("div"), l, h));
        } else {
            let h1 = j4.create(i1.widget || new oe5("span"), l, i1.startSide), a = this.atCursorPos && !h1.isEditable && r <= s.length && (t < e || i1.startSide > 0), c = !h1.isEditable && (t < e || i1.startSide <= 0), f = this.getLine();
            this.pendingBuffer == 2 && !a && (this.pendingBuffer = 0), this.flushBuffer(s), a && (f.append(Yt3(new lt4(1), s), r), r = s.length + Math.max(0, r - s.length)), f.append(Yt3(h1, s), r), this.atCursorPos = c, this.pendingBuffer = c ? t < e ? 1 : 2 : 0;
        }
        else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i1);
        l && (this.textOff + l <= this.text.length ? this.textOff += l : (this.skip += l - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = e), this.openStart < 0 && (this.openStart = r);
    }
    static build(t, e, i1, s, r) {
        let o = new Wt3(t, e, i1, r);
        return o.openEnd = P3.spans(s, e, i1, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;
    }
};
function Yt3(n, t) {
    for (let e of t)n = new q4(e, [
        n
    ], n.length);
    return n;
}
var oe5 = class extends X4 {
    constructor(t){
        super(), this.tag = t;
    }
    eq(t) {
        return t.tag == this.tag;
    }
    toDOM() {
        return document.createElement(this.tag);
    }
    updateDOM(t) {
        return t.nodeName.toLowerCase() == this.tag;
    }
}, Ms2 = A3.define(), ks2 = A3.define(), As1 = A3.define(), Ds2 = A3.define(), Ie4 = A3.define(), Os2 = A3.define(), Ts2 = A3.define({
    combine: (n)=>n.some((t)=>t)
}), vt3 = class {
    constructor(t, e = "nearest", i1 = "nearest", s = 5, r = 5){
        this.range = t, this.y = e, this.x = i1, this.yMargin = s, this.xMargin = r;
    }
    map(t) {
        return t.empty ? this : new vt3(this.range.map(t), this.y, this.x, this.yMargin, this.xMargin);
    }
}, Di2 = y4.define({
    map: (n, t)=>n.map(t)
});
function nt4(n, t, e) {
    let i1 = n.facet(Ds2);
    i1.length ? i1[0](t) : window.onerror ? window.onerror(String(t), e, void 0, void 0, t) : e ? console.error(e + ":", t) : console.error(t);
}
var jt3 = A3.define({
    combine: (n)=>n.length ? n[0] : !0
}), Cn1 = 0, kt2 = A3.define(), V4 = class {
    constructor(t, e, i1, s){
        this.id = t, this.create = e, this.domEventHandlers = i1, this.extension = s(this);
    }
    static define(t, e) {
        let { eventHandlers: i1 , provide: s , decorations: r  } = e || {};
        return new V4(Cn1++, t, i1, (o)=>{
            let l = [
                kt2.of(o)
            ];
            return r && l.push(zt3.of((h)=>{
                let a = h.plugin(o);
                return a ? r(a) : M6.none;
            })), s && l.push(s(o)), l;
        });
    }
    static fromClass(t, e) {
        return V4.define((i1)=>new t(i1), e);
    }
}, Et3 = class {
    constructor(t){
        this.spec = t, this.mustUpdate = null, this.value = null;
    }
    update(t) {
        if (this.value) {
            if (this.mustUpdate) {
                let e = this.mustUpdate;
                if (this.mustUpdate = null, this.value.update) try {
                    this.value.update(e);
                } catch (i1) {
                    if (nt4(e.state, i1, "CodeMirror plugin crashed"), this.value.destroy) try {
                        this.value.destroy();
                    } catch  {}
                    this.deactivate();
                }
            }
        } else if (this.spec) try {
            this.value = this.spec.create(t);
        } catch (e1) {
            nt4(t.state, e1, "CodeMirror plugin crashed"), this.deactivate();
        }
        return this;
    }
    destroy(t) {
        var e;
        if (!((e = this.value) === null || e === void 0) && e.destroy) try {
            this.value.destroy();
        } catch (i1) {
            nt4(t.state, i1, "CodeMirror plugin crashed");
        }
    }
    deactivate() {
        this.spec = this.value = null;
    }
}, Rs2 = A3.define(), bi2 = A3.define(), zt3 = A3.define(), Ls1 = A3.define(), Es2 = A3.define(), At3 = A3.define(), I3 = class {
    constructor(t, e, i1, s){
        this.fromA = t, this.toA = e, this.fromB = i1, this.toB = s;
    }
    join(t) {
        return new I3(Math.min(this.fromA, t.fromA), Math.max(this.toA, t.toA), Math.min(this.fromB, t.fromB), Math.max(this.toB, t.toB));
    }
    addToSet(t) {
        let e = t.length, i1 = this;
        for(; e > 0; e--){
            let s = t[e - 1];
            if (!(s.fromA > i1.toA)) {
                if (s.toA < i1.fromA) break;
                i1 = i1.join(s), t.splice(e - 1, 1);
            }
        }
        return t.splice(e, 0, i1), t;
    }
    static extendWithRanges(t, e) {
        if (e.length == 0) return t;
        let i1 = [];
        for(let s = 0, r = 0, o = 0, l = 0;; s++){
            let h = s == t.length ? null : t[s], a = o - l, c = h ? h.fromB : 1e9;
            for(; r < e.length && e[r] < c;){
                let f = e[r], d1 = e[r + 1], u = Math.max(l, f), p1 = Math.min(c, d1);
                if (u <= p1 && new I3(u + a, p1 + a, u, p1).addToSet(i1), d1 > c) break;
                r += 2;
            }
            if (!h) return i1;
            new I3(h.fromA, h.toA, h.fromB, h.toB).addToSet(i1), o = h.toA, l = h.toB;
        }
    }
}, xt3 = class {
    constructor(t, e, i1){
        this.view = t, this.state = e, this.transactions = i1, this.flags = 0, this.startState = t.state, this.changes = x4.empty(this.startState.doc.length);
        for (let o of i1)this.changes = this.changes.compose(o.changes);
        let s = [];
        this.changes.iterChangedRanges((o, l, h, a)=>s.push(new I3(o, l, h, a))), this.changedRanges = s;
        let r = t.hasFocus;
        r != t.inputState.notifiedFocused && (t.inputState.notifiedFocused = r, this.flags |= 1);
    }
    static create(t, e, i1) {
        return new xt3(t, e, i1);
    }
    get viewportChanged() {
        return (this.flags & 4) > 0;
    }
    get heightChanged() {
        return (this.flags & 2) > 0;
    }
    get geometryChanged() {
        return this.docChanged || (this.flags & 10) > 0;
    }
    get focusChanged() {
        return (this.flags & 1) > 0;
    }
    get docChanged() {
        return !this.changes.empty;
    }
    get selectionSet() {
        return this.transactions.some((t)=>t.selection);
    }
    get empty() {
        return this.flags == 0 && this.transactions.length == 0;
    }
}, R5 = function(n) {
    return n[n.LTR = 0] = "LTR", n[n.RTL = 1] = "RTL", n;
}(R5 || (R5 = {})), qe3 = R5.LTR, Mn1 = R5.RTL;
function Bs1(n) {
    let t = [];
    for(let e = 0; e < n.length; e++)t.push(1 << +n[e]);
    return t;
}
var kn1 = Bs1("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), An1 = Bs1("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), Ke4 = Object.create(null), K6 = [];
for (let n5 of [
    "()",
    "[]",
    "{}"
]){
    let t5 = n5.charCodeAt(0), e3 = n5.charCodeAt(1);
    Ke4[t5] = e3, Ke4[e3] = -t5;
}
function Dn1(n) {
    return n <= 247 ? kn1[n] : 1424 <= n && n <= 1524 ? 2 : 1536 <= n && n <= 1785 ? An1[n - 1536] : 1774 <= n && n <= 2220 ? 4 : 8192 <= n && n <= 8203 || n == 8204 ? 256 : 1;
}
var On1 = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/, rt4 = class {
    constructor(t, e, i1){
        this.from = t, this.to = e, this.level = i1;
    }
    get dir() {
        return this.level % 2 ? Mn1 : qe3;
    }
    side(t, e) {
        return this.dir == e == t ? this.to : this.from;
    }
    static find(t, e, i1, s) {
        let r = -1;
        for(let o = 0; o < t.length; o++){
            let l = t[o];
            if (l.from <= e && l.to >= e) {
                if (l.level == i1) return o;
                (r < 0 || (s != 0 ? s < 0 ? l.from < e : l.to > e : t[r].level > l.level)) && (r = o);
            }
        }
        if (r < 0) throw new RangeError("Index out of range");
        return r;
    }
}, T7 = [];
function Ps2(n, t) {
    let e = n.length, i1 = t == qe3 ? 1 : 2, s = t == qe3 ? 2 : 1;
    if (!n || i1 == 1 && !On1.test(n)) return Hs2(e);
    for(let o = 0, l = i1, h = i1; o < e; o++){
        let a = Dn1(n.charCodeAt(o));
        a == 512 ? a = l : a == 8 && h == 4 && (a = 16), T7[o] = a == 4 ? 2 : a, a & 7 && (h = a), l = a;
    }
    for(let o1 = 0, l1 = i1, h1 = i1; o1 < e; o1++){
        let a1 = T7[o1];
        if (a1 == 128) o1 < e - 1 && l1 == T7[o1 + 1] && l1 & 24 ? a1 = T7[o1] = l1 : T7[o1] = 256;
        else if (a1 == 64) {
            let c = o1 + 1;
            for(; c < e && T7[c] == 64;)c++;
            let f = o1 && l1 == 8 || c < e && T7[c] == 8 ? h1 == 1 ? 1 : 8 : 256;
            for(let d1 = o1; d1 < c; d1++)T7[d1] = f;
            o1 = c - 1;
        } else a1 == 8 && h1 == 1 && (T7[o1] = 1);
        l1 = a1, a1 & 7 && (h1 = a1);
    }
    for(let o2 = 0, l2 = 0, h2 = 0, a2, c1, f1; o2 < e; o2++)if (c1 = Ke4[a2 = n.charCodeAt(o2)]) if (c1 < 0) {
        for(let d11 = l2 - 3; d11 >= 0; d11 -= 3)if (K6[d11 + 1] == -c1) {
            let u = K6[d11 + 2], p1 = u & 2 ? i1 : u & 4 ? u & 1 ? s : i1 : 0;
            p1 && (T7[o2] = T7[K6[d11]] = p1), l2 = d11;
            break;
        }
    } else {
        if (K6.length == 189) break;
        K6[l2++] = o2, K6[l2++] = a2, K6[l2++] = h2;
    }
    else if ((f1 = T7[o2]) == 2 || f1 == 1) {
        let d2 = f1 == i1;
        h2 = d2 ? 0 : 1;
        for(let u1 = l2 - 3; u1 >= 0; u1 -= 3){
            let p11 = K6[u1 + 2];
            if (p11 & 2) break;
            if (d2) K6[u1 + 2] |= 2;
            else {
                if (p11 & 4) break;
                K6[u1 + 2] |= 4;
            }
        }
    }
    for(let o3 = 0; o3 < e; o3++)if (T7[o3] == 256) {
        let l3 = o3 + 1;
        for(; l3 < e && T7[l3] == 256;)l3++;
        let h3 = (o3 ? T7[o3 - 1] : i1) == 1, a3 = (l3 < e ? T7[l3] : i1) == 1, c2 = h3 == a3 ? h3 ? 1 : 2 : i1;
        for(let f2 = o3; f2 < l3; f2++)T7[f2] = c2;
        o3 = l3 - 1;
    }
    let r = [];
    if (i1 == 1) for(let o4 = 0; o4 < e;){
        let l4 = o4, h4 = T7[o4++] != 1;
        for(; o4 < e && h4 == (T7[o4] != 1);)o4++;
        if (h4) for(let a4 = o4; a4 > l4;){
            let c3 = a4, f3 = T7[--a4] != 2;
            for(; a4 > l4 && f3 == (T7[a4 - 1] != 2);)a4--;
            r.push(new rt4(a4, c3, f3 ? 2 : 1));
        }
        else r.push(new rt4(l4, o4, 0));
    }
    else for(let o5 = 0; o5 < e;){
        let l5 = o5, h5 = T7[o5++] == 2;
        for(; o5 < e && h5 == (T7[o5] == 2);)o5++;
        r.push(new rt4(l5, o5, h5 ? 1 : 2));
    }
    return r;
}
function Hs2(n) {
    return [
        new rt4(0, n, 0)
    ];
}
var Ns1 = "";
function Vs2(n, t, e, i1, s) {
    var r;
    let o = i1.head - n.from, l = -1;
    if (o == 0) {
        if (!s || !n.length) return null;
        t[0].level != e && (o = t[0].side(!1, e), l = 0);
    } else if (o == n.length) {
        if (s) return null;
        let d1 = t[t.length - 1];
        d1.level != e && (o = d1.side(!0, e), l = t.length - 1);
    }
    l < 0 && (l = rt4.find(t, o, (r = i1.bidiLevel) !== null && r !== void 0 ? r : -1, i1.assoc));
    let h = t[l];
    o == h.side(s, e) && (h = t[l += s ? 1 : -1], o = h.side(!s, e));
    let a = s == (h.dir == e), c = ie4(n.text, o, a);
    if (Ns1 = n.text.slice(Math.min(o, c), Math.max(o, c)), c != h.side(s, e)) return g5.cursor(c + n.from, a ? -1 : 1, h.level);
    let f = l == (s ? t.length - 1 : 0) ? null : t[l + (s ? 1 : -1)];
    return !f && h.level != e ? g5.cursor(s ? n.to : n.from, s ? -1 : 1, e) : f && f.level < h.level ? g5.cursor(f.side(!s, e) + n.from, s ? 1 : -1, f.level) : g5.cursor(c + n.from, s ? -1 : 1, h.level);
}
var st4 = "\uFFFF", le5 = class {
    constructor(t, e){
        this.points = t, this.text = "", this.lineSeparator = e.facet(w3.lineSeparator);
    }
    append(t) {
        this.text += t;
    }
    lineBreak() {
        this.text += st4;
    }
    readRange(t, e) {
        if (!t) return this;
        let i1 = t.parentNode;
        for(let s = t;;){
            this.findPointBefore(i1, s), this.readNode(s);
            let r = s.nextSibling;
            if (r == e) break;
            let o = O4.get(s), l = O4.get(r);
            (o && l ? o.breakAfter : (o ? o.breakAfter : Oi2(s)) || Oi2(r) && (s.nodeName != "BR" || s.cmIgnore)) && this.lineBreak(), s = r;
        }
        return this.findPointBefore(i1, e), this;
    }
    readTextNode(t) {
        let e = t.nodeValue;
        for (let i1 of this.points)i1.node == t && (i1.pos = this.text.length + Math.min(i1.offset, e.length));
        for(let i11 = 0, s = this.lineSeparator ? null : /\r\n?|\n/g;;){
            let r = -1, o = 1, l;
            if (this.lineSeparator ? (r = e.indexOf(this.lineSeparator, i11), o = this.lineSeparator.length) : (l = s.exec(e)) && (r = l.index, o = l[0].length), this.append(e.slice(i11, r < 0 ? e.length : r)), r < 0) break;
            if (this.lineBreak(), o > 1) for (let h of this.points)h.node == t && h.pos > this.text.length && (h.pos -= o - 1);
            i11 = r + o;
        }
    }
    readNode(t) {
        if (t.cmIgnore) return;
        let e = O4.get(t), i1 = e && e.overrideDOMText;
        if (i1 != null) {
            this.findPointInside(t, i1.length);
            for(let s = i1.iter(); !s.next().done;)s.lineBreak ? this.lineBreak() : this.append(s.value);
        } else t.nodeType == 3 ? this.readTextNode(t) : t.nodeName == "BR" ? t.nextSibling && this.lineBreak() : t.nodeType == 1 && this.readRange(t.firstChild, null);
    }
    findPointBefore(t, e) {
        for (let i1 of this.points)i1.node == t && t.childNodes[i1.offset] == e && (i1.pos = this.text.length);
    }
    findPointInside(t, e) {
        for (let i1 of this.points)(t.nodeType == 3 ? i1.node == t : t.contains(i1.node)) && (i1.pos = this.text.length + Math.min(e, i1.offset));
    }
};
function Oi2(n) {
    return n.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n.nodeName);
}
var he4 = class {
    constructor(t, e){
        this.node = t, this.offset = e, this.pos = -1;
    }
}, ae4 = class extends O4 {
    constructor(t){
        super(), this.view = t, this.compositionDeco = M6.none, this.decorations = [], this.dynamicDecorationMap = [], this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(t.contentDOM), this.children = [
            new H4
        ], this.children[0].setParent(this), this.updateDeco(), this.updateInner([
            new I3(0, 0, 0, t.state.doc.length)
        ], 0);
    }
    get root() {
        return this.view.root;
    }
    get editorView() {
        return this.view;
    }
    get length() {
        return this.view.state.doc.length;
    }
    update(t) {
        let e = t.changedRanges;
        this.minWidth > 0 && e.length && (e.every(({ fromA: o , toA: l  })=>l < this.minWidthFrom || o > this.minWidthTo) ? (this.minWidthFrom = t.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = t.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.view.inputState.composing < 0 ? this.compositionDeco = M6.none : (t.transactions.length || this.dirty) && (this.compositionDeco = Rn1(this.view, t.changes)), (g7.ie || g7.chrome) && !this.compositionDeco.size && t && t.state.doc.lines != t.startState.doc.lines && (this.forceSelection = !0);
        let i1 = this.decorations, s = this.updateDeco(), r = En1(i1, s, t.changes);
        return e = I3.extendWithRanges(e, r), this.dirty == 0 && e.length == 0 ? !1 : (this.updateInner(e, t.startState.doc.length), t.transactions.length && (this.lastUpdate = Date.now()), !0);
    }
    updateInner(t, e) {
        this.view.viewState.mustMeasureContent = !0, this.updateChildren(t, e);
        let { observer: i1  } = this.view;
        i1.ignore(()=>{
            this.dom.style.height = this.view.viewState.contentHeight + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
            let r = g7.chrome || g7.ios ? {
                node: i1.selectionRange.focusNode,
                written: !1
            } : void 0;
            this.sync(r), this.dirty = 0, r && (r.written || i1.selectionRange.focusNode != r.node) && (this.forceSelection = !0), this.dom.style.height = "";
        });
        let s = [];
        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) for (let r of this.children)r instanceof Y3 && r.widget instanceof ce5 && s.push(r.dom);
        i1.updateGaps(s);
    }
    updateChildren(t, e) {
        let i1 = this.childCursor(e);
        for(let s = t.length - 1;; s--){
            let r = s >= 0 ? t[s] : null;
            if (!r) break;
            let { fromA: o , toA: l , fromB: h , toB: a  } = r, { content: c , breakAtStart: f , openStart: d1 , openEnd: u  } = Wt3.build(this.view.state.doc, h, a, this.decorations, this.dynamicDecorationMap), { i: p1 , off: m  } = i1.findPos(l, 1), { i: b , off: y  } = i1.findPos(o, -1);
            ms1(this, b, y, p1, m, c, f, d1, u);
        }
    }
    updateSelection(t = !1, e = !1) {
        if (t && this.view.observer.readSelectionRange(), !(e || this.mayControlSelection()) || g7.ios && this.view.inputState.rapidCompositionStart) return;
        let i1 = this.forceSelection;
        this.forceSelection = !1;
        let s = this.view.state.selection.main, r = this.domAtPos(s.anchor), o = s.empty ? r : this.domAtPos(s.head);
        if (g7.gecko && s.empty && Tn1(r)) {
            let h = document.createTextNode("");
            this.view.observer.ignore(()=>r.node.insertBefore(h, r.node.childNodes[r.offset] || null)), r = o = new B5(h, 0), i1 = !0;
        }
        let l = this.view.observer.selectionRange;
        (i1 || !l.focusNode || !ie5(r.node, r.offset, l.anchorNode, l.anchorOffset) || !ie5(o.node, o.offset, l.focusNode, l.focusOffset)) && (this.view.observer.ignore(()=>{
            g7.android && g7.chrome && this.dom.contains(l.focusNode) && Bn1(l.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({
                preventScroll: !0
            }));
            let h = ee3(this.root);
            if (s.empty) {
                if (g7.gecko) {
                    let a = Ln1(r.node, r.offset);
                    if (a && a != 3) {
                        let c = zs2(r.node, r.offset, a == 1 ? 1 : -1);
                        c && (r = new B5(c, a == 1 ? 0 : c.nodeValue.length));
                    }
                }
                h.collapse(r.node, r.offset), s.bidiLevel != null && l.cursorBidiLevel != null && (l.cursorBidiLevel = s.bidiLevel);
            } else if (h.extend) h.collapse(r.node, r.offset), h.extend(o.node, o.offset);
            else {
                let a1 = document.createRange();
                s.anchor > s.head && ([r, o] = [
                    o,
                    r
                ]), a1.setEnd(o.node, o.offset), a1.setStart(r.node, r.offset), h.removeAllRanges(), h.addRange(a1);
            }
        }), this.view.observer.setSelectionRange(r, o)), this.impreciseAnchor = r.precise ? null : new B5(l.anchorNode, l.anchorOffset), this.impreciseHead = o.precise ? null : new B5(l.focusNode, l.focusOffset);
    }
    enforceCursorAssoc() {
        if (this.compositionDeco.size) return;
        let t = this.view.state.selection.main, e = ee3(this.root);
        if (!t.empty || !t.assoc || !e.modify) return;
        let i1 = H4.find(this, t.head);
        if (!i1) return;
        let s = i1.posAtStart;
        if (t.head == s || t.head == s + i1.length) return;
        let r = this.coordsAt(t.head, -1), o = this.coordsAt(t.head, 1);
        if (!r || !o || r.bottom > o.top) return;
        let l = this.domAtPos(t.head + t.assoc);
        e.collapse(l.node, l.offset), e.modify("move", t.assoc < 0 ? "forward" : "backward", "lineboundary");
    }
    mayControlSelection() {
        return this.view.state.facet(jt3) ? this.root.activeElement == this.dom : Re4(this.dom, this.view.observer.selectionRange);
    }
    nearest(t) {
        for(let e = t; e;){
            let i1 = O4.get(e);
            if (i1 && i1.rootView == this) return i1;
            e = e.parentNode;
        }
        return null;
    }
    posFromDOM(t, e) {
        let i1 = this.nearest(t);
        if (!i1) throw new RangeError("Trying to find position for a DOM position outside of the document");
        return i1.localPosFromDOM(t, e) + i1.posAtStart;
    }
    domAtPos(t) {
        let { i: e , off: i1  } = this.childCursor().findPos(t, -1);
        for(; e < this.children.length - 1;){
            let s = this.children[e];
            if (i1 < s.length || s instanceof H4) break;
            e++, i1 = 0;
        }
        return this.children[e].domAtPos(i1);
    }
    coordsAt(t, e) {
        for(let i1 = this.length, s = this.children.length - 1;; s--){
            let r = this.children[s], o = i1 - r.breakAfter - r.length;
            if (t > o || t == o && r.type != D5.WidgetBefore && r.type != D5.WidgetAfter && (!s || e == 2 || this.children[s - 1].breakAfter || this.children[s - 1].type == D5.WidgetBefore && e > -2)) return r.coordsAt(t - o, e);
            i1 = o;
        }
    }
    measureVisibleLineHeights(t) {
        let e = [], { from: i1 , to: s  } = t, r = this.view.contentDOM.clientWidth, o = r > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l = -1, h = this.view.textDirection == R5.LTR;
        for(let a = 0, c = 0; c < this.children.length; c++){
            let f = this.children[c], d1 = a + f.length;
            if (d1 > s) break;
            if (a >= i1) {
                let u = f.dom.getBoundingClientRect();
                if (e.push(u.height), o) {
                    let p1 = f.dom.lastChild, m = p1 ? Nt3(p1) : [];
                    if (m.length) {
                        let b = m[m.length - 1], y = h ? b.right - u.left : u.right - b.left;
                        y > l && (l = y, this.minWidth = r, this.minWidthFrom = a, this.minWidthTo = d1);
                    }
                }
            }
            a = d1 + f.breakAfter;
        }
        return e;
    }
    textDirectionAt(t) {
        let { i: e  } = this.childPos(t, 1);
        return getComputedStyle(this.children[e].dom).direction == "rtl" ? R5.RTL : R5.LTR;
    }
    measureTextSize() {
        for (let s of this.children)if (s instanceof H4) {
            let r = s.measureTextSize();
            if (r) return r;
        }
        let t = document.createElement("div"), e, i1;
        return t.className = "cm-line", t.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(()=>{
            this.dom.appendChild(t);
            let s = Nt3(t.firstChild)[0];
            e = t.getBoundingClientRect().height, i1 = s ? s.width / 27 : 7, t.remove();
        }), {
            lineHeight: e,
            charWidth: i1
        };
    }
    childCursor(t = this.length) {
        let e = this.children.length;
        return e && (t -= this.children[--e].length), new ne4(this.children, t, e);
    }
    computeBlockGapDeco() {
        let t = [], e = this.view.viewState;
        for(let i1 = 0, s = 0;; s++){
            let r = s == e.viewports.length ? null : e.viewports[s], o = r ? r.from - 1 : this.length;
            if (o > i1) {
                let l = e.lineBlockAt(o).bottom - e.lineBlockAt(i1).top;
                t.push(M6.replace({
                    widget: new ce5(l),
                    block: !0,
                    inclusive: !0,
                    isBlockGap: !0
                }).range(i1, o));
            }
            if (!r) break;
            i1 = r.to + 1;
        }
        return M6.set(t);
    }
    updateDeco() {
        let t = this.view.state.facet(zt3).map((e, i1)=>(this.dynamicDecorationMap[i1] = typeof e == "function") ? e(this.view) : e);
        for(let e = t.length; e < t.length + 3; e++)this.dynamicDecorationMap[e] = !1;
        return this.decorations = [
            ...t,
            this.compositionDeco,
            this.computeBlockGapDeco(),
            this.view.viewState.lineGapDeco
        ];
    }
    scrollIntoView(t) {
        let { range: e  } = t, i1 = this.coordsAt(e.head, e.empty ? e.assoc : e.head > e.anchor ? -1 : 1), s;
        if (!i1) return;
        !e.empty && (s = this.coordsAt(e.anchor, e.anchor > e.head ? -1 : 1)) && (i1 = {
            left: Math.min(i1.left, s.left),
            top: Math.min(i1.top, s.top),
            right: Math.max(i1.right, s.right),
            bottom: Math.max(i1.bottom, s.bottom)
        });
        let r = 0, o = 0, l = 0, h = 0;
        for (let c of this.view.state.facet(Es2).map((f)=>f(this.view)))if (c) {
            let { left: f , right: d1 , top: u , bottom: p1  } = c;
            f != null && (r = Math.max(r, f)), d1 != null && (o = Math.max(o, d1)), u != null && (l = Math.max(l, u)), p1 != null && (h = Math.max(h, p1));
        }
        let a = {
            left: i1.left - r,
            top: i1.top - l,
            right: i1.right + o,
            bottom: i1.bottom + h
        };
        yn1(this.view.scrollDOM, a, e.head < e.anchor ? -1 : 1, t.x, t.y, t.xMargin, t.yMargin, this.view.textDirection == R5.LTR);
    }
};
function Tn1(n) {
    return n.node.nodeType == 1 && n.node.firstChild && (n.offset == 0 || n.node.childNodes[n.offset - 1].contentEditable == "false") && (n.offset == n.node.childNodes.length || n.node.childNodes[n.offset].contentEditable == "false");
}
var ce5 = class extends X4 {
    constructor(t){
        super(), this.height = t;
    }
    toDOM() {
        let t = document.createElement("div");
        return this.updateDOM(t), t;
    }
    eq(t) {
        return t.height == this.height;
    }
    updateDOM(t) {
        return t.style.height = this.height + "px", !0;
    }
    get estimatedHeight() {
        return this.height;
    }
};
function Ws2(n) {
    let t = n.observer.selectionRange, e = t.focusNode && zs2(t.focusNode, t.focusOffset, 0);
    if (!e) return null;
    let i1 = n.docView.nearest(e);
    if (!i1) return null;
    if (i1 instanceof H4) {
        let s = e;
        for(; s.parentNode != i1.dom;)s = s.parentNode;
        let r = s.previousSibling;
        for(; r && !O4.get(r);)r = r.previousSibling;
        let o = r ? O4.get(r).posAtEnd : i1.posAtStart;
        return {
            from: o,
            to: o,
            node: s,
            text: e
        };
    } else {
        for(;;){
            let { parent: r1  } = i1;
            if (!r1) return null;
            if (r1 instanceof H4) break;
            i1 = r1;
        }
        let s1 = i1.posAtStart;
        return {
            from: s1,
            to: s1 + i1.length,
            node: i1.dom,
            text: e
        };
    }
}
function Rn1(n, t) {
    let e = Ws2(n);
    if (!e) return M6.none;
    let { from: i1 , to: s , node: r , text: o  } = e, l = t.mapPos(i1, 1), h = Math.max(l, t.mapPos(s, -1)), { state: a  } = n, c = r.nodeType == 3 ? r.nodeValue : new le5([], a).readRange(r.firstChild, null).text;
    if (h - l < c.length) if (a.doc.sliceString(l, Math.min(a.doc.length, l + c.length), st4) == c) h = l + c.length;
    else if (a.doc.sliceString(Math.max(0, h - c.length), h, st4) == c) l = h - c.length;
    else return M6.none;
    else if (a.doc.sliceString(l, h, st4) != c) return M6.none;
    let f = O4.get(r);
    return f instanceof re3 ? f = f.widget.topView : f && (f.parent = null), M6.set(M6.replace({
        widget: new je3(r, o, f),
        inclusive: !0
    }).range(l, h));
}
var je3 = class extends X4 {
    constructor(t, e, i1){
        super(), this.top = t, this.text = e, this.topView = i1;
    }
    eq(t) {
        return this.top == t.top && this.text == t.text;
    }
    toDOM() {
        return this.top;
    }
    ignoreEvent() {
        return !1;
    }
    get customView() {
        return re3;
    }
};
function zs2(n, t, e) {
    for(;;){
        if (n.nodeType == 3) return n;
        if (n.nodeType == 1 && t > 0 && e <= 0) n = n.childNodes[t - 1], t = se4(n);
        else if (n.nodeType == 1 && t < n.childNodes.length && e >= 0) n = n.childNodes[t], t = 0;
        else return null;
    }
}
function Ln1(n, t) {
    return n.nodeType != 1 ? 0 : (t && n.childNodes[t - 1].contentEditable == "false" ? 1 : 0) | (t < n.childNodes.length && n.childNodes[t].contentEditable == "false" ? 2 : 0);
}
var $e4 = class {
    constructor(){
        this.changes = [];
    }
    compareRange(t, e) {
        Fe3(t, e, this.changes);
    }
    comparePoint(t, e) {
        Fe3(t, e, this.changes);
    }
};
function En1(n, t, e) {
    let i1 = new $e4;
    return P3.compare(n, t, e, i1), i1.changes;
}
function Bn1(n, t) {
    for(let e = n; e && e != t; e = e.assignedSlot || e.parentNode)if (e.nodeType == 1 && e.contentEditable == "false") return !0;
    return !1;
}
function Pn1(n, t, e = 1) {
    let i1 = n.charCategorizer(t), s = n.doc.lineAt(t), r = t - s.from;
    if (s.length == 0) return g5.cursor(t);
    r == 0 ? e = 1 : r == s.length && (e = -1);
    let o = r, l = r;
    e < 0 ? o = ie4(s.text, r, !1) : l = ie4(s.text, r);
    let h = i1(s.text.slice(o, l));
    for(; o > 0;){
        let a = ie4(s.text, o, !1);
        if (i1(s.text.slice(a, o)) != h) break;
        o = a;
    }
    for(; l < s.length;){
        let a1 = ie4(s.text, l);
        if (i1(s.text.slice(l, a1)) != h) break;
        l = a1;
    }
    return g5.range(o + s.from, l + s.from);
}
function Hn1(n, t) {
    return t.left > n ? t.left - n : Math.max(0, n - t.right);
}
function Nn1(n, t) {
    return t.top > n ? t.top - n : Math.max(0, n - t.bottom);
}
function Se4(n, t) {
    return n.top < t.bottom - 1 && n.bottom > t.top + 1;
}
function Ti1(n, t) {
    return t < n.top ? {
        top: t,
        left: n.left,
        right: n.right,
        bottom: n.bottom
    } : n;
}
function Ri2(n, t) {
    return t > n.bottom ? {
        top: n.top,
        left: n.left,
        right: n.right,
        bottom: t
    } : n;
}
function Ge3(n, t, e) {
    let i1, s, r, o, l, h, a, c;
    for(let u = n.firstChild; u; u = u.nextSibling){
        let p1 = Nt3(u);
        for(let m = 0; m < p1.length; m++){
            let b = p1[m];
            s && Se4(s, b) && (b = Ti1(Ri2(b, s.bottom), s.top));
            let y = Hn1(t, b), k = Nn1(e, b);
            if (y == 0 && k == 0) return u.nodeType == 3 ? Li2(u, t, e) : Ge3(u, t, e);
            (!i1 || o > k || o == k && r > y) && (i1 = u, s = b, r = y, o = k), y == 0 ? e > b.bottom && (!a || a.bottom < b.bottom) ? (l = u, a = b) : e < b.top && (!c || c.top > b.top) && (h = u, c = b) : a && Se4(a, b) ? a = Ri2(a, b.bottom) : c && Se4(c, b) && (c = Ti1(c, b.top));
        }
    }
    if (a && a.bottom >= e ? (i1 = l, s = a) : c && c.top <= e && (i1 = h, s = c), !i1) return {
        node: n,
        offset: 0
    };
    let f = Math.max(s.left, Math.min(s.right, t));
    if (i1.nodeType == 3) return Li2(i1, f, e);
    if (!r && i1.contentEditable == "true") return Ge3(i1, f, e);
    let d1 = Array.prototype.indexOf.call(n.childNodes, i1) + (t >= (s.left + s.right) / 2 ? 1 : 0);
    return {
        node: n,
        offset: d1
    };
}
function Li2(n, t, e) {
    let i1 = n.nodeValue.length, s = -1, r = 1e9, o = 0;
    for(let l = 0; l < i1; l++){
        let h = Vt2(n, l, l + 1).getClientRects();
        for(let a = 0; a < h.length; a++){
            let c = h[a];
            if (c.top == c.bottom) continue;
            o || (o = t - c.left);
            let f = (c.top > e ? c.top - e : e - c.bottom) - 1;
            if (c.left - 1 <= t && c.right + 1 >= t && f < r) {
                let d1 = t >= (c.left + c.right) / 2, u = d1;
                if ((g7.chrome || g7.gecko) && Vt2(n, l).getBoundingClientRect().left == c.right && (u = !d1), f <= 0) return {
                    node: n,
                    offset: l + (u ? 1 : 0)
                };
                s = l + (u ? 1 : 0), r = f;
            }
        }
    }
    return {
        node: n,
        offset: s > -1 ? s : o > 0 ? n.nodeValue.length : 0
    };
}
function Fs2(n, { x: t , y: e  }, i1, s = -1) {
    var r;
    let o = n.contentDOM.getBoundingClientRect(), l = o.top + n.viewState.paddingTop, h, { docHeight: a  } = n.viewState, c = e - l;
    if (c < 0) return 0;
    if (c > a) return n.state.doc.length;
    for(let y = n.defaultLineHeight / 2, k = !1; h = n.elementAtHeight(c), h.type != D5.Text;)for(; c = s > 0 ? h.bottom + y : h.top - y, !(c >= 0 && c <= a);){
        if (k) return i1 ? null : 0;
        k = !0, s = -s;
    }
    e = l + c;
    let f = h.from;
    if (f < n.viewport.from) return n.viewport.from == 0 ? 0 : i1 ? null : Ei2(n, o, h, t, e);
    if (f > n.viewport.to) return n.viewport.to == n.state.doc.length ? n.state.doc.length : i1 ? null : Ei2(n, o, h, t, e);
    let d1 = n.dom.ownerDocument, u = n.root.elementFromPoint ? n.root : d1, p1 = u.elementFromPoint(t, e);
    p1 && !n.contentDOM.contains(p1) && (p1 = null), p1 || (t = Math.max(o.left + 1, Math.min(o.right - 1, t)), p1 = u.elementFromPoint(t, e), p1 && !n.contentDOM.contains(p1) && (p1 = null));
    let m, b = -1;
    if (p1 && ((r = n.docView.nearest(p1)) === null || r === void 0 ? void 0 : r.isEditable) != !1) {
        if (d1.caretPositionFromPoint) {
            let y1 = d1.caretPositionFromPoint(t, e);
            y1 && ({ offsetNode: m , offset: b  } = y1);
        } else if (d1.caretRangeFromPoint) {
            let y2 = d1.caretRangeFromPoint(t, e);
            y2 && ({ startContainer: m , startOffset: b  } = y2, g7.safari && Vn1(m, b, t) && (m = void 0));
        }
    }
    if (!m || !n.docView.dom.contains(m)) {
        let y3 = H4.find(n.docView, f);
        if (!y3) return c > h.top + h.height / 2 ? h.to : h.from;
        ({ node: m , offset: b  } = Ge3(y3.dom, t, e));
    }
    return n.docView.posFromDOM(m, b);
}
function Ei2(n, t, e, i1, s) {
    let r = Math.round((i1 - t.left) * n.defaultCharacterWidth);
    n.lineWrapping && e.height > n.defaultLineHeight * 1.5 && (r += Math.floor((s - e.top) / n.defaultLineHeight) * n.viewState.heightOracle.lineLength);
    let o = n.state.sliceDoc(e.from, e.to);
    return e.from + at3(o, r, n.state.tabSize);
}
function Vn1(n, t, e) {
    let i1;
    if (n.nodeType != 3 || t != (i1 = n.nodeValue.length)) return !1;
    for(let s = n.nextSibling; s; s = s.nextSibling)if (s.nodeType != 1 || s.nodeName != "BR") return !1;
    return Vt2(n, i1 - 1, i1).getBoundingClientRect().left > e;
}
function Wn1(n, t, e, i1) {
    let s = n.state.doc.lineAt(t.head), r = !i1 || !n.lineWrapping ? null : n.coordsAtPos(t.assoc < 0 && t.head > s.from ? t.head - 1 : t.head);
    if (r) {
        let h = n.dom.getBoundingClientRect(), a = n.textDirectionAt(s.from), c = n.posAtCoords({
            x: e == (a == R5.LTR) ? h.right - 1 : h.left + 1,
            y: (r.top + r.bottom) / 2
        });
        if (c != null) return g5.cursor(c, e ? -1 : 1);
    }
    let o = H4.find(n.docView, t.head), l = o ? e ? o.posAtEnd : o.posAtStart : e ? s.to : s.from;
    return g5.cursor(l, e ? -1 : 1);
}
function Bi2(n, t, e, i1) {
    let s = n.state.doc.lineAt(t.head), r = n.bidiSpans(s), o = n.textDirectionAt(s.from);
    for(let l = t, h = null;;){
        let a = Vs2(s, r, o, l, e), c = Ns1;
        if (!a) {
            if (s.number == (e ? n.state.doc.lines : 1)) return l;
            c = `
`, s = n.state.doc.line(s.number + (e ? 1 : -1)), r = n.bidiSpans(s), a = g5.cursor(e ? s.from : s.to);
        }
        if (h) {
            if (!h(c)) return l;
        } else {
            if (!i1) return a;
            h = i1(c);
        }
        l = a;
    }
}
function zn1(n, t, e) {
    let i1 = n.state.charCategorizer(t), s = i1(e);
    return (r)=>{
        let o = i1(r);
        return s == R4.Space && (s = o), s == o;
    };
}
function Fn1(n, t, e, i1) {
    let s = t.head, r = e ? 1 : -1;
    if (s == (e ? n.state.doc.length : 0)) return g5.cursor(s, t.assoc);
    let o = t.goalColumn, l, h = n.contentDOM.getBoundingClientRect(), a = n.coordsAtPos(s), c = n.documentTop;
    if (a) o == null && (o = a.left - h.left), l = r < 0 ? a.top : a.bottom;
    else {
        let u = n.viewState.lineBlockAt(s);
        o == null && (o = Math.min(h.right - h.left, n.defaultCharacterWidth * (s - u.from))), l = (r < 0 ? u.top : u.bottom) + c;
    }
    let f = h.left + o, d1 = i1 ?? n.defaultLineHeight >> 1;
    for(let u1 = 0;; u1 += 10){
        let p1 = l + (d1 + u1) * r, m = Fs2(n, {
            x: f,
            y: p1
        }, !1, r);
        if (p1 < h.top || p1 > h.bottom || (r < 0 ? m < s : m > s)) return g5.cursor(m, t.assoc, void 0, o);
    }
}
function Ce4(n, t, e) {
    let i1 = n.state.facet(Ls1).map((s)=>s(n));
    for(;;){
        let s = !1;
        for (let r of i1)r.between(e.from - 1, e.from + 1, (o, l, h)=>{
            e.from > o && e.from < l && (e = t.from > e.from ? g5.cursor(o, 1) : g5.cursor(l, -1), s = !0);
        });
        if (!s) return e;
    }
}
var _e4 = class {
    constructor(t){
        this.lastKeyCode = 0, this.lastKeyTime = 0, this.chromeScrollHack = -1, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.registeredEvents = [], this.customHandlers = [], this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.rapidCompositionStart = !1, this.mouseSelection = null;
        for(let e in P4){
            let i1 = P4[e];
            t.contentDOM.addEventListener(e, (s)=>{
                !Pi1(t, s) || this.ignoreDuringComposition(s) || e == "keydown" && this.keydown(t, s) || (this.mustFlushObserver(s) && t.observer.forceFlush(), this.runCustomHandlers(e, t, s) ? s.preventDefault() : i1(t, s));
            }), this.registeredEvents.push(e);
        }
        g7.chrome && g7.chrome_version >= 102 && t.scrollDOM.addEventListener("wheel", ()=>{
            this.chromeScrollHack < 0 ? t.contentDOM.style.pointerEvents = "none" : window.clearTimeout(this.chromeScrollHack), this.chromeScrollHack = setTimeout(()=>{
                this.chromeScrollHack = -1, t.contentDOM.style.pointerEvents = "";
            }, 100);
        }, {
            passive: !0
        }), this.notifiedFocused = t.hasFocus, g7.safari && t.contentDOM.addEventListener("input", ()=>null);
    }
    setSelectionOrigin(t) {
        this.lastSelectionOrigin = t, this.lastSelectionTime = Date.now();
    }
    ensureHandlers(t, e) {
        var i1;
        let s;
        this.customHandlers = [];
        for (let r of e)if (s = (i1 = r.update(t).spec) === null || i1 === void 0 ? void 0 : i1.domEventHandlers) {
            this.customHandlers.push({
                plugin: r.value,
                handlers: s
            });
            for(let o in s)this.registeredEvents.indexOf(o) < 0 && o != "scroll" && (this.registeredEvents.push(o), t.contentDOM.addEventListener(o, (l)=>{
                !Pi1(t, l) || this.runCustomHandlers(o, t, l) && l.preventDefault();
            }));
        }
    }
    runCustomHandlers(t, e, i1) {
        for (let s of this.customHandlers){
            let r = s.handlers[t];
            if (r) try {
                if (r.call(s.plugin, i1, e) || i1.defaultPrevented) return !0;
            } catch (o) {
                nt4(e.state, o);
            }
        }
        return !1;
    }
    runScrollHandlers(t, e) {
        for (let i1 of this.customHandlers){
            let s = i1.handlers.scroll;
            if (s) try {
                s.call(i1.plugin, e, t);
            } catch (r) {
                nt4(t.state, r);
            }
        }
    }
    keydown(t, e) {
        if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && Date.now() < this.lastEscPress + 2e3) return !0;
        if (g7.android && g7.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8)) return t.observer.delayAndroidKey(e.key, e.keyCode), !0;
        let i1;
        return g7.ios && (i1 = Is2.find((s)=>s.keyCode == e.keyCode)) && !(e.ctrlKey || e.altKey || e.metaKey) && !e.synthetic ? (this.pendingIOSKey = i1, setTimeout(()=>this.flushIOSKey(t), 250), !0) : !1;
    }
    flushIOSKey(t) {
        let e = this.pendingIOSKey;
        return e ? (this.pendingIOSKey = void 0, Lt3(t.contentDOM, e.key, e.keyCode)) : !1;
    }
    ignoreDuringComposition(t) {
        return /^key/.test(t.type) ? this.composing > 0 ? !0 : g7.safari && Date.now() - this.compositionEndedAt < 100 ? (this.compositionEndedAt = 0, !0) : !1 : !1;
    }
    mustFlushObserver(t) {
        return t.type == "keydown" && t.keyCode != 229 || t.type == "compositionend" && !g7.ios;
    }
    startMouseSelection(t) {
        this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = t;
    }
    update(t) {
        this.mouseSelection && this.mouseSelection.update(t), t.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
    }
    destroy() {
        this.mouseSelection && this.mouseSelection.destroy();
    }
}, Is2 = [
    {
        key: "Backspace",
        keyCode: 8,
        inputType: "deleteContentBackward"
    },
    {
        key: "Enter",
        keyCode: 13,
        inputType: "insertParagraph"
    },
    {
        key: "Delete",
        keyCode: 46,
        inputType: "deleteContentForward"
    }
], qs2 = [
    16,
    17,
    18,
    20,
    91,
    92,
    224,
    225
], Ye3 = class {
    constructor(t, e, i1, s){
        this.view = t, this.style = i1, this.mustSelect = s, this.lastEvent = e;
        let r = t.contentDOM.ownerDocument;
        r.addEventListener("mousemove", this.move = this.move.bind(this)), r.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = e.shiftKey, this.multiple = t.state.facet(w3.allowMultipleSelections) && In1(t, e), this.dragMove = qn1(t, e), this.dragging = Kn(t, e) && yi2(e) == 1 ? null : !1, this.dragging === !1 && (e.preventDefault(), this.select(e));
    }
    move(t) {
        if (t.buttons == 0) return this.destroy();
        this.dragging === !1 && this.select(this.lastEvent = t);
    }
    up(t) {
        this.dragging == null && this.select(this.lastEvent), this.dragging || t.preventDefault(), this.destroy();
    }
    destroy() {
        let t = this.view.contentDOM.ownerDocument;
        t.removeEventListener("mousemove", this.move), t.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = null;
    }
    select(t) {
        let e = this.style.get(t, this.extend, this.multiple);
        (this.mustSelect || !e.eq(this.view.state.selection) || e.main.assoc != this.view.state.selection.main.assoc) && this.view.dispatch({
            selection: e,
            userEvent: "select.pointer",
            scrollIntoView: !0
        }), this.mustSelect = !1;
    }
    update(t) {
        t.docChanged && this.dragging && (this.dragging = this.dragging.map(t.changes)), this.style.update(t) && setTimeout(()=>this.select(this.lastEvent), 20);
    }
};
function In1(n, t) {
    let e = n.state.facet(Ms2);
    return e.length ? e[0](t) : g7.mac ? t.metaKey : t.ctrlKey;
}
function qn1(n, t) {
    let e = n.state.facet(ks2);
    return e.length ? e[0](t) : g7.mac ? !t.altKey : !t.ctrlKey;
}
function Kn(n, t) {
    let { main: e  } = n.state.selection;
    if (e.empty) return !1;
    let i1 = ee3(n.root);
    if (i1.rangeCount == 0) return !0;
    let s = i1.getRangeAt(0).getClientRects();
    for(let r = 0; r < s.length; r++){
        let o = s[r];
        if (o.left <= t.clientX && o.right >= t.clientX && o.top <= t.clientY && o.bottom >= t.clientY) return !0;
    }
    return !1;
}
function Pi1(n, t) {
    if (!t.bubbles) return !0;
    if (t.defaultPrevented) return !1;
    for(let e = t.target, i1; e != n.contentDOM; e = e.parentNode)if (!e || e.nodeType == 11 || (i1 = O4.get(e)) && i1.ignoreEvent(t)) return !1;
    return !0;
}
var P4 = Object.create(null), Ks2 = g7.ie && g7.ie_version < 15 || g7.ios && g7.webkit_version < 604;
function jn1(n) {
    let t = n.dom.parentNode;
    if (!t) return;
    let e = t.appendChild(document.createElement("textarea"));
    e.style.cssText = "position: fixed; left: -10000px; top: 10px", e.focus(), setTimeout(()=>{
        n.focus(), e.remove(), js2(n, e.value);
    }, 50);
}
function js2(n, t) {
    let { state: e  } = n, i1, s = 1, r = e.toText(t), o = r.lines == e.selection.ranges.length;
    if (Xe3 != null && e.selection.ranges.every((h)=>h.empty) && Xe3 == r.toString()) {
        let h = -1;
        i1 = e.changeByRange((a)=>{
            let c = e.doc.lineAt(a.from);
            if (c.from == h) return {
                range: a
            };
            h = c.from;
            let f = e.toText((o ? r.line(s++).text : t) + e.lineBreak);
            return {
                changes: {
                    from: c.from,
                    insert: f
                },
                range: g5.cursor(a.from + f.length)
            };
        });
    } else o ? i1 = e.changeByRange((h)=>{
        let a = r.line(s++);
        return {
            changes: {
                from: h.from,
                to: h.to,
                insert: a.text
            },
            range: g5.cursor(h.from + a.length)
        };
    }) : i1 = e.replaceSelection(r);
    n.dispatch(i1, {
        userEvent: "input.paste",
        scrollIntoView: !0
    });
}
P4.keydown = (n, t)=>{
    n.inputState.setSelectionOrigin("select"), t.keyCode == 27 ? n.inputState.lastEscPress = Date.now() : qs2.indexOf(t.keyCode) < 0 && (n.inputState.lastEscPress = 0);
};
var $s2 = 0;
P4.touchstart = (n, t)=>{
    $s2 = Date.now(), n.inputState.setSelectionOrigin("select.pointer");
};
P4.touchmove = (n)=>{
    n.inputState.setSelectionOrigin("select.pointer");
};
P4.mousedown = (n, t)=>{
    if (n.observer.flush(), $s2 > Date.now() - 2e3 && yi2(t) == 1) return;
    let e = null;
    for (let i1 of n.state.facet(As1))if (e = i1(n, t), e) break;
    if (!e && t.button == 0 && (e = _n1(n, t)), e) {
        let i11 = n.root.activeElement != n.contentDOM;
        i11 && n.observer.ignore(()=>ds1(n.contentDOM)), n.inputState.startMouseSelection(new Ye3(n, t, e, i11));
    }
};
function Hi2(n, t, e, i1) {
    if (i1 == 1) return g5.cursor(t, e);
    if (i1 == 2) return Pn1(n.state, t, e);
    {
        let s = H4.find(n.docView, t), r = n.state.doc.lineAt(s ? s.posAtEnd : t), o = s ? s.posAtStart : r.from, l = s ? s.posAtEnd : r.to;
        return l < n.state.doc.length && l == r.to && l++, g5.range(o, l);
    }
}
var Gs2 = (n, t)=>n >= t.top && n <= t.bottom, Ni2 = (n, t, e)=>Gs2(t, e) && n >= e.left && n <= e.right;
function $n1(n, t, e, i1) {
    let s = H4.find(n.docView, t);
    if (!s) return 1;
    let r = t - s.posAtStart;
    if (r == 0) return 1;
    if (r == s.length) return -1;
    let o = s.coordsAt(r, -1);
    if (o && Ni2(e, i1, o)) return -1;
    let l = s.coordsAt(r, 1);
    return l && Ni2(e, i1, l) ? 1 : o && Gs2(i1, o) ? -1 : 1;
}
function Vi1(n, t) {
    let e = n.posAtCoords({
        x: t.clientX,
        y: t.clientY
    }, !1);
    return {
        pos: e,
        bias: $n1(n, e, t.clientX, t.clientY)
    };
}
var Gn1 = g7.ie && g7.ie_version <= 11, Wi2 = null, zi1 = 0, Fi2 = 0;
function yi2(n) {
    if (!Gn1) return n.detail;
    let t = Wi2, e = Fi2;
    return Wi2 = n, Fi2 = Date.now(), zi1 = !t || e > Date.now() - 400 && Math.abs(t.clientX - n.clientX) < 2 && Math.abs(t.clientY - n.clientY) < 2 ? (zi1 + 1) % 3 : 1;
}
function _n1(n, t) {
    let e = Vi1(n, t), i1 = yi2(t), s = n.state.selection, r = e, o = t;
    return {
        update (l) {
            l.docChanged && (e && (e.pos = l.changes.mapPos(e.pos)), s = s.map(l.changes), o = null);
        },
        get (l, h, a) {
            let c;
            if (o && l.clientX == o.clientX && l.clientY == o.clientY ? c = r : (c = r = Vi1(n, l), o = l), !c || !e) return s;
            let f = Hi2(n, c.pos, c.bias, i1);
            if (e.pos != c.pos && !h) {
                let d1 = Hi2(n, e.pos, e.bias, i1), u = Math.min(d1.from, f.from), p1 = Math.max(d1.to, f.to);
                f = u < f.from ? g5.range(u, p1) : g5.range(p1, u);
            }
            return h ? s.replaceRange(s.main.extend(f.from, f.to)) : a ? s.addRange(f) : g5.create([
                f
            ]);
        }
    };
}
P4.dragstart = (n, t)=>{
    let { selection: { main: e  }  } = n.state, { mouseSelection: i1  } = n.inputState;
    i1 && (i1.dragging = e), t.dataTransfer && (t.dataTransfer.setData("Text", n.state.sliceDoc(e.from, e.to)), t.dataTransfer.effectAllowed = "copyMove");
};
function Ii2(n, t, e, i1) {
    if (!e) return;
    let s = n.posAtCoords({
        x: t.clientX,
        y: t.clientY
    }, !1);
    t.preventDefault();
    let { mouseSelection: r  } = n.inputState, o = i1 && r && r.dragging && r.dragMove ? {
        from: r.dragging.from,
        to: r.dragging.to
    } : null, l = {
        from: s,
        insert: e
    }, h = n.state.changes(o ? [
        o,
        l
    ] : l);
    n.focus(), n.dispatch({
        changes: h,
        selection: {
            anchor: h.mapPos(s, -1),
            head: h.mapPos(s, 1)
        },
        userEvent: o ? "move.drop" : "input.drop"
    });
}
P4.drop = (n, t)=>{
    if (!t.dataTransfer) return;
    if (n.state.readOnly) return t.preventDefault();
    let e = t.dataTransfer.files;
    if (e && e.length) {
        t.preventDefault();
        let i1 = Array(e.length), s = 0, r = ()=>{
            ++s == e.length && Ii2(n, t, i1.filter((o)=>o != null).join(n.state.lineBreak), !1);
        };
        for(let o = 0; o < e.length; o++){
            let l = new FileReader;
            l.onerror = r, l.onload = ()=>{
                /[\x00-\x08\x0e-\x1f]{2}/.test(l.result) || (i1[o] = l.result), r();
            }, l.readAsText(e[o]);
        }
    } else Ii2(n, t, t.dataTransfer.getData("Text"), !0);
};
P4.paste = (n, t)=>{
    if (n.state.readOnly) return t.preventDefault();
    n.observer.flush();
    let e = Ks2 ? null : t.clipboardData;
    e ? (js2(n, e.getData("text/plain")), t.preventDefault()) : jn1(n);
};
function Yn1(n, t) {
    let e = n.dom.parentNode;
    if (!e) return;
    let i1 = e.appendChild(document.createElement("textarea"));
    i1.style.cssText = "position: fixed; left: -10000px; top: 10px", i1.value = t, i1.focus(), i1.selectionEnd = t.length, i1.selectionStart = 0, setTimeout(()=>{
        i1.remove(), n.focus();
    }, 50);
}
function Xn1(n) {
    let t = [], e = [], i1 = !1;
    for (let s of n.selection.ranges)s.empty || (t.push(n.sliceDoc(s.from, s.to)), e.push(s));
    if (!t.length) {
        let s1 = -1;
        for (let { from: r  } of n.selection.ranges){
            let o = n.doc.lineAt(r);
            o.number > s1 && (t.push(o.text), e.push({
                from: o.from,
                to: Math.min(n.doc.length, o.to + 1)
            })), s1 = o.number;
        }
        i1 = !0;
    }
    return {
        text: t.join(n.lineBreak),
        ranges: e,
        linewise: i1
    };
}
var Xe3 = null;
P4.copy = P4.cut = (n, t)=>{
    let { text: e , ranges: i1 , linewise: s  } = Xn1(n.state);
    if (!e && !s) return;
    Xe3 = s ? e : null;
    let r = Ks2 ? null : t.clipboardData;
    r ? (t.preventDefault(), r.clearData(), r.setData("text/plain", e)) : Yn1(n, e), t.type == "cut" && !n.state.readOnly && n.dispatch({
        changes: i1,
        scrollIntoView: !0,
        userEvent: "delete.cut"
    });
};
function _s2(n) {
    setTimeout(()=>{
        n.hasFocus != n.inputState.notifiedFocused && n.update([]);
    }, 10);
}
P4.focus = _s2;
P4.blur = (n)=>{
    n.observer.clearSelectionRange(), _s2(n);
};
function Ys2(n, t) {
    if (n.docView.compositionDeco.size) {
        n.inputState.rapidCompositionStart = t;
        try {
            n.update([]);
        } finally{
            n.inputState.rapidCompositionStart = !1;
        }
    }
}
P4.compositionstart = P4.compositionupdate = (n)=>{
    n.inputState.compositionFirstChange == null && (n.inputState.compositionFirstChange = !0), n.inputState.composing < 0 && (n.inputState.composing = 0, n.docView.compositionDeco.size && (n.observer.flush(), Ys2(n, !0)));
};
P4.compositionend = (n)=>{
    n.inputState.composing = -1, n.inputState.compositionEndedAt = Date.now(), n.inputState.compositionFirstChange = null, setTimeout(()=>{
        n.inputState.composing < 0 && Ys2(n, !1);
    }, 50);
};
P4.contextmenu = (n)=>{
    n.inputState.lastContextMenu = Date.now();
};
P4.beforeinput = (n, t)=>{
    var e;
    let i1;
    if (g7.chrome && g7.android && (i1 = Is2.find((s)=>s.inputType == t.inputType)) && (n.observer.delayAndroidKey(i1.key, i1.keyCode), i1.key == "Backspace" || i1.key == "Delete")) {
        let s = ((e = window.visualViewport) === null || e === void 0 ? void 0 : e.height) || 0;
        setTimeout(()=>{
            var r;
            (((r = window.visualViewport) === null || r === void 0 ? void 0 : r.height) || 0) > s + 10 && n.hasFocus && (n.contentDOM.blur(), n.focus());
        }, 100);
    }
};
var qi2 = [
    "pre-wrap",
    "normal",
    "pre-line",
    "break-spaces"
], fe4 = class {
    constructor(){
        this.doc = v5.empty, this.lineWrapping = !1, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.lineLength = 30, this.heightChanged = !1;
    }
    heightForGap(t, e) {
        let i1 = this.doc.lineAt(e).number - this.doc.lineAt(t).number + 1;
        return this.lineWrapping && (i1 += Math.ceil((e - t - i1 * this.lineLength * .5) / this.lineLength)), this.lineHeight * i1;
    }
    heightForLine(t) {
        return this.lineWrapping ? (1 + Math.max(0, Math.ceil((t - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
    }
    setDoc(t) {
        return this.doc = t, this;
    }
    mustRefreshForWrapping(t) {
        return qi2.indexOf(t) > -1 != this.lineWrapping;
    }
    mustRefreshForHeights(t) {
        let e = !1;
        for(let i1 = 0; i1 < t.length; i1++){
            let s = t[i1];
            s < 0 ? i1++ : this.heightSamples[Math.floor(s * 10)] || (e = !0, this.heightSamples[Math.floor(s * 10)] = !0);
        }
        return e;
    }
    refresh(t, e, i1, s, r) {
        let o = qi2.indexOf(t) > -1, l = Math.round(e) != Math.round(this.lineHeight) || this.lineWrapping != o;
        if (this.lineWrapping = o, this.lineHeight = e, this.charWidth = i1, this.lineLength = s, l) {
            this.heightSamples = {};
            for(let h = 0; h < r.length; h++){
                let a = r[h];
                a < 0 ? h++ : this.heightSamples[Math.floor(a * 10)] = !0;
            }
        }
        return l;
    }
}, ue5 = class {
    constructor(t, e){
        this.from = t, this.heights = e, this.index = 0;
    }
    get more() {
        return this.index < this.heights.length;
    }
}, $3 = class {
    constructor(t, e, i1, s, r){
        this.from = t, this.length = e, this.top = i1, this.height = s, this.type = r;
    }
    get to() {
        return this.from + this.length;
    }
    get bottom() {
        return this.top + this.height;
    }
    join(t) {
        let e = (Array.isArray(this.type) ? this.type : [
            this
        ]).concat(Array.isArray(t.type) ? t.type : [
            t
        ]);
        return new $3(this.from, this.length + t.length, this.top, this.height + t.height, e);
    }
}, A4 = function(n) {
    return n[n.ByPos = 0] = "ByPos", n[n.ByHeight = 1] = "ByHeight", n[n.ByPosNoHeight = 2] = "ByPosNoHeight", n;
}(A4 || (A4 = {})), Jt3 = .001, N3 = class {
    constructor(t, e, i1 = 2){
        this.length = t, this.height = e, this.flags = i1;
    }
    get outdated() {
        return (this.flags & 2) > 0;
    }
    set outdated(t) {
        this.flags = (t ? 2 : 0) | this.flags & -3;
    }
    setHeight(t, e) {
        this.height != e && (Math.abs(this.height - e) > Jt3 && (t.heightChanged = !0), this.height = e);
    }
    replace(t, e, i1) {
        return N3.of(i1);
    }
    decomposeLeft(t, e) {
        e.push(this);
    }
    decomposeRight(t, e) {
        e.push(this);
    }
    applyChanges(t, e, i1, s) {
        let r = this;
        for(let o = s.length - 1; o >= 0; o--){
            let { fromA: l , toA: h , fromB: a , toB: c  } = s[o], f = r.lineAt(l, A4.ByPosNoHeight, e, 0, 0), d1 = f.to >= h ? f : r.lineAt(h, A4.ByPosNoHeight, e, 0, 0);
            for(c += d1.to - h, h = d1.to; o > 0 && f.from <= s[o - 1].toA;)l = s[o - 1].fromA, a = s[o - 1].fromB, o--, l < f.from && (f = r.lineAt(l, A4.ByPosNoHeight, e, 0, 0));
            a += f.from - l, l = f.from;
            let u = Ft3.build(i1, t, a, c);
            r = r.replace(l, h, u);
        }
        return r.updateHeight(i1, 0);
    }
    static empty() {
        return new W3(0, 0);
    }
    static of(t) {
        if (t.length == 1) return t[0];
        let e = 0, i1 = t.length, s = 0, r = 0;
        for(;;)if (e == i1) if (s > r * 2) {
            let l = t[e - 1];
            l.break ? t.splice(--e, 1, l.left, null, l.right) : t.splice(--e, 1, l.left, l.right), i1 += 1 + l.break, s -= l.size;
        } else if (r > s * 2) {
            let l1 = t[i1];
            l1.break ? t.splice(i1, 1, l1.left, null, l1.right) : t.splice(i1, 1, l1.left, l1.right), i1 += 2 + l1.break, r -= l1.size;
        } else break;
        else if (s < r) {
            let l2 = t[e++];
            l2 && (s += l2.size);
        } else {
            let l3 = t[--i1];
            l3 && (r += l3.size);
        }
        let o = 0;
        return t[e - 1] == null ? (o = 1, e--) : t[e] == null && (o = 1, i1++), new Ue4(N3.of(t.slice(0, e)), o, N3.of(t.slice(i1)));
    }
};
N3.prototype.size = 1;
var de4 = class extends N3 {
    constructor(t, e, i1){
        super(t, e), this.type = i1;
    }
    blockAt(t, e, i1, s) {
        return new $3(s, this.length, i1, this.height, this.type);
    }
    lineAt(t, e, i1, s, r) {
        return this.blockAt(0, i1, s, r);
    }
    forEachLine(t, e, i1, s, r, o) {
        t <= r + this.length && e >= r && o(this.blockAt(0, i1, s, r));
    }
    updateHeight(t, e = 0, i1 = !1, s) {
        return s && s.from <= e && s.more && this.setHeight(t, s.heights[s.index++]), this.outdated = !1, this;
    }
    toString() {
        return `block(${this.length})`;
    }
}, W3 = class extends de4 {
    constructor(t, e){
        super(t, e, D5.Text), this.collapsed = 0, this.widgetHeight = 0;
    }
    replace(t, e, i1) {
        let s = i1[0];
        return i1.length == 1 && (s instanceof W3 || s instanceof E6 && s.flags & 4) && Math.abs(this.length - s.length) < 10 ? (s instanceof E6 ? s = new W3(s.length, this.height) : s.height = this.height, this.outdated || (s.outdated = !1), s) : N3.of(i1);
    }
    updateHeight(t, e = 0, i1 = !1, s) {
        return s && s.from <= e && s.more ? this.setHeight(t, s.heights[s.index++]) : (i1 || this.outdated) && this.setHeight(t, Math.max(this.widgetHeight, t.heightForLine(this.length - this.collapsed))), this.outdated = !1, this;
    }
    toString() {
        return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
    }
}, E6 = class extends N3 {
    constructor(t){
        super(t, 0);
    }
    lines(t, e) {
        let i1 = t.lineAt(e).number, s = t.lineAt(e + this.length).number;
        return {
            firstLine: i1,
            lastLine: s,
            lineHeight: this.height / (s - i1 + 1)
        };
    }
    blockAt(t, e, i1, s) {
        let { firstLine: r , lastLine: o , lineHeight: l  } = this.lines(e, s), h = Math.max(0, Math.min(o - r, Math.floor((t - i1) / l))), { from: a , length: c  } = e.line(r + h);
        return new $3(a, c, i1 + l * h, l, D5.Text);
    }
    lineAt(t, e, i1, s, r) {
        if (e == A4.ByHeight) return this.blockAt(t, i1, s, r);
        if (e == A4.ByPosNoHeight) {
            let { from: f , to: d1  } = i1.lineAt(t);
            return new $3(f, d1 - f, 0, 0, D5.Text);
        }
        let { firstLine: o , lineHeight: l  } = this.lines(i1, r), { from: h , length: a , number: c  } = i1.lineAt(t);
        return new $3(h, a, s + l * (c - o), l, D5.Text);
    }
    forEachLine(t, e, i1, s, r, o) {
        let { firstLine: l , lineHeight: h  } = this.lines(i1, r);
        for(let a = Math.max(t, r), c = Math.min(r + this.length, e); a <= c;){
            let f = i1.lineAt(a);
            a == t && (s += h * (f.number - l)), o(new $3(f.from, f.length, s, h, D5.Text)), s += h, a = f.to + 1;
        }
    }
    replace(t, e, i1) {
        let s = this.length - e;
        if (s > 0) {
            let r = i1[i1.length - 1];
            r instanceof E6 ? i1[i1.length - 1] = new E6(r.length + s) : i1.push(null, new E6(s - 1));
        }
        if (t > 0) {
            let r1 = i1[0];
            r1 instanceof E6 ? i1[0] = new E6(t + r1.length) : i1.unshift(new E6(t - 1), null);
        }
        return N3.of(i1);
    }
    decomposeLeft(t, e) {
        e.push(new E6(t - 1), null);
    }
    decomposeRight(t, e) {
        e.push(null, new E6(this.length - t - 1));
    }
    updateHeight(t, e = 0, i1 = !1, s) {
        let r = e + this.length;
        if (s && s.from <= e + this.length && s.more) {
            let o = [], l = Math.max(e, s.from), h = -1, a = t.heightChanged;
            for(s.from > e && o.push(new E6(s.from - e - 1).updateHeight(t, e)); l <= r && s.more;){
                let f = t.doc.lineAt(l).length;
                o.length && o.push(null);
                let d1 = s.heights[s.index++];
                h == -1 ? h = d1 : Math.abs(d1 - h) >= Jt3 && (h = -2);
                let u = new W3(f, d1);
                u.outdated = !1, o.push(u), l += f + 1;
            }
            l <= r && o.push(null, new E6(r - l).updateHeight(t, l));
            let c = N3.of(o);
            return t.heightChanged = a || h < 0 || Math.abs(c.height - this.height) >= Jt3 || Math.abs(h - this.lines(t.doc, e).lineHeight) >= Jt3, c;
        } else (i1 || this.outdated) && (this.setHeight(t, t.heightForGap(e, e + this.length)), this.outdated = !1);
        return this;
    }
    toString() {
        return `gap(${this.length})`;
    }
}, Ue4 = class extends N3 {
    constructor(t, e, i1){
        super(t.length + e + i1.length, t.height + i1.height, e | (t.outdated || i1.outdated ? 2 : 0)), this.left = t, this.right = i1, this.size = t.size + i1.size;
    }
    get break() {
        return this.flags & 1;
    }
    blockAt(t, e, i1, s) {
        let r = i1 + this.left.height;
        return t < r ? this.left.blockAt(t, e, i1, s) : this.right.blockAt(t, e, r, s + this.left.length + this.break);
    }
    lineAt(t, e, i1, s, r) {
        let o = s + this.left.height, l = r + this.left.length + this.break, h = e == A4.ByHeight ? t < o : t < l, a = h ? this.left.lineAt(t, e, i1, s, r) : this.right.lineAt(t, e, i1, o, l);
        if (this.break || (h ? a.to < l : a.from > l)) return a;
        let c = e == A4.ByPosNoHeight ? A4.ByPosNoHeight : A4.ByPos;
        return h ? a.join(this.right.lineAt(l, c, i1, o, l)) : this.left.lineAt(l, c, i1, s, r).join(a);
    }
    forEachLine(t, e, i1, s, r, o) {
        let l = s + this.left.height, h = r + this.left.length + this.break;
        if (this.break) t < h && this.left.forEachLine(t, e, i1, s, r, o), e >= h && this.right.forEachLine(t, e, i1, l, h, o);
        else {
            let a = this.lineAt(h, A4.ByPos, i1, s, r);
            t < a.from && this.left.forEachLine(t, a.from - 1, i1, s, r, o), a.to >= t && a.from <= e && o(a), e > a.to && this.right.forEachLine(a.to + 1, e, i1, l, h, o);
        }
    }
    replace(t, e, i1) {
        let s = this.left.length + this.break;
        if (e < s) return this.balanced(this.left.replace(t, e, i1), this.right);
        if (t > this.left.length) return this.balanced(this.left, this.right.replace(t - s, e - s, i1));
        let r = [];
        t > 0 && this.decomposeLeft(t, r);
        let o = r.length;
        for (let l of i1)r.push(l);
        if (t > 0 && Ki2(r, o - 1), e < this.length) {
            let l1 = r.length;
            this.decomposeRight(e, r), Ki2(r, l1);
        }
        return N3.of(r);
    }
    decomposeLeft(t, e) {
        let i1 = this.left.length;
        if (t <= i1) return this.left.decomposeLeft(t, e);
        e.push(this.left), this.break && (i1++, t >= i1 && e.push(null)), t > i1 && this.right.decomposeLeft(t - i1, e);
    }
    decomposeRight(t, e) {
        let i1 = this.left.length, s = i1 + this.break;
        if (t >= s) return this.right.decomposeRight(t - s, e);
        t < i1 && this.left.decomposeRight(t, e), this.break && t < s && e.push(null), e.push(this.right);
    }
    balanced(t, e) {
        return t.size > 2 * e.size || e.size > 2 * t.size ? N3.of(this.break ? [
            t,
            null,
            e
        ] : [
            t,
            e
        ]) : (this.left = t, this.right = e, this.height = t.height + e.height, this.outdated = t.outdated || e.outdated, this.size = t.size + e.size, this.length = t.length + this.break + e.length, this);
    }
    updateHeight(t, e = 0, i1 = !1, s) {
        let { left: r , right: o  } = this, l = e + r.length + this.break, h = null;
        return s && s.from <= e + r.length && s.more ? h = r = r.updateHeight(t, e, i1, s) : r.updateHeight(t, e, i1), s && s.from <= l + o.length && s.more ? h = o = o.updateHeight(t, l, i1, s) : o.updateHeight(t, l, i1), h ? this.balanced(r, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
    }
    toString() {
        return this.left + (this.break ? " " : "-") + this.right;
    }
};
function Ki2(n, t) {
    let e, i1;
    n[t] == null && (e = n[t - 1]) instanceof E6 && (i1 = n[t + 1]) instanceof E6 && n.splice(t - 1, 3, new E6(e.length + 1 + i1.length));
}
var Un1 = 5, Ft3 = class {
    constructor(t, e){
        this.pos = t, this.oracle = e, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = t;
    }
    get isCovered() {
        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
    span(t, e) {
        if (this.lineStart > -1) {
            let i1 = Math.min(e, this.lineEnd), s = this.nodes[this.nodes.length - 1];
            s instanceof W3 ? s.length += i1 - this.pos : (i1 > this.pos || !this.isCovered) && this.nodes.push(new W3(i1 - this.pos, -1)), this.writtenTo = i1, e > i1 && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
        }
        this.pos = e;
    }
    point(t, e, i1) {
        if (t < e || i1.heightRelevant) {
            let s = i1.widget ? i1.widget.estimatedHeight : 0;
            s < 0 && (s = this.oracle.lineHeight);
            let r = e - t;
            i1.block ? this.addBlock(new de4(r, s, i1.type)) : (r || s >= Un1) && this.addLineDeco(s, r);
        } else e > t && this.span(t, e);
        this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
    }
    enterLine() {
        if (this.lineStart > -1) return;
        let { from: t , to: e  } = this.oracle.doc.lineAt(this.pos);
        this.lineStart = t, this.lineEnd = e, this.writtenTo < t && ((this.writtenTo < t - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, t - 1)), this.nodes.push(null)), this.pos > t && this.nodes.push(new W3(this.pos - t, -1)), this.writtenTo = this.pos;
    }
    blankContent(t, e) {
        let i1 = new E6(e - t);
        return this.oracle.doc.lineAt(t).to == e && (i1.flags |= 4), i1;
    }
    ensureLine() {
        this.enterLine();
        let t = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
        if (t instanceof W3) return t;
        let e = new W3(0, -1);
        return this.nodes.push(e), e;
    }
    addBlock(t) {
        this.enterLine(), t.type == D5.WidgetAfter && !this.isCovered && this.ensureLine(), this.nodes.push(t), this.writtenTo = this.pos = this.pos + t.length, t.type != D5.WidgetBefore && (this.covering = t);
    }
    addLineDeco(t, e) {
        let i1 = this.ensureLine();
        i1.length += e, i1.collapsed += e, i1.widgetHeight = Math.max(i1.widgetHeight, t), this.writtenTo = this.pos = this.pos + e;
    }
    finish(t) {
        let e = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
        this.lineStart > -1 && !(e instanceof W3) && !this.isCovered ? this.nodes.push(new W3(0, -1)) : (this.writtenTo < this.pos || e == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
        let i1 = t;
        for (let s of this.nodes)s instanceof W3 && s.updateHeight(this.oracle, i1), i1 += s ? s.length : 1;
        return this.nodes;
    }
    static build(t, e, i1, s) {
        let r = new Ft3(i1, t);
        return P3.spans(e, i1, s, r, 0), r.finish(i1);
    }
};
function Jn1(n, t, e) {
    let i1 = new Je3;
    return P3.compare(n, t, e, i1, 0), i1.changes;
}
var Je3 = class {
    constructor(){
        this.changes = [];
    }
    compareRange() {}
    comparePoint(t, e, i1, s) {
        (t < e || i1 && i1.heightRelevant || s && s.heightRelevant) && Fe3(t, e, this.changes, 5);
    }
};
function Zn1(n, t) {
    let e = n.getBoundingClientRect(), i1 = Math.max(0, e.left), s = Math.min(innerWidth, e.right), r = Math.max(0, e.top), o = Math.min(innerHeight, e.bottom), l = n.ownerDocument.body;
    for(let h = n.parentNode; h && h != l;)if (h.nodeType == 1) {
        let a = h, c = window.getComputedStyle(a);
        if ((a.scrollHeight > a.clientHeight || a.scrollWidth > a.clientWidth) && c.overflow != "visible") {
            let f = a.getBoundingClientRect();
            i1 = Math.max(i1, f.left), s = Math.min(s, f.right), r = Math.max(r, f.top), o = Math.min(o, f.bottom);
        }
        h = c.position == "absolute" || c.position == "fixed" ? a.offsetParent : a.parentNode;
    } else if (h.nodeType == 11) h = h.host;
    else break;
    return {
        left: i1 - e.left,
        right: Math.max(i1, s) - e.left,
        top: r - (e.top + t),
        bottom: Math.max(r, o) - (e.top + t)
    };
}
function Qn1(n, t) {
    let e = n.getBoundingClientRect();
    return {
        left: 0,
        right: e.right - e.left,
        top: t,
        bottom: e.bottom - (e.top + t)
    };
}
var Bt3 = class {
    constructor(t, e, i1){
        this.from = t, this.to = e, this.size = i1;
    }
    static same(t, e) {
        if (t.length != e.length) return !1;
        for(let i1 = 0; i1 < t.length; i1++){
            let s = t[i1], r = e[i1];
            if (s.from != r.from || s.to != r.to || s.size != r.size) return !1;
        }
        return !0;
    }
    draw(t) {
        return M6.replace({
            widget: new Ze5(this.size, t)
        }).range(this.from, this.to);
    }
}, Ze5 = class extends X4 {
    constructor(t, e){
        super(), this.size = t, this.vertical = e;
    }
    eq(t) {
        return t.size == this.size && t.vertical == this.vertical;
    }
    toDOM() {
        let t = document.createElement("div");
        return this.vertical ? t.style.height = this.size + "px" : (t.style.width = this.size + "px", t.style.height = "2px", t.style.display = "inline-block"), t;
    }
    get estimatedHeight() {
        return this.vertical ? this.size : -1;
    }
}, pe3 = class {
    constructor(t){
        this.state = t, this.pixelViewport = {
            left: 0,
            right: window.innerWidth,
            top: 0,
            bottom: 0
        }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.heightOracle = new fe4, this.scaler = Gi1, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = R5.RTL, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1, this.stateDeco = t.facet(zt3).filter((e)=>typeof e != "function"), this.heightMap = N3.empty().applyChanges(this.stateDeco, v5.empty, this.heightOracle.setDoc(t.doc), [
            new I3(0, 0, 0, t.doc.length)
        ]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = M6.set(this.lineGaps.map((e)=>e.draw(!1))), this.computeVisibleRanges();
    }
    updateForViewport() {
        let t = [
            this.viewport
        ], { main: e  } = this.state.selection;
        for(let i1 = 0; i1 <= 1; i1++){
            let s = i1 ? e.head : e.anchor;
            if (!t.some(({ from: r , to: o  })=>s >= r && s <= o)) {
                let { from: r , to: o  } = this.lineBlockAt(s);
                t.push(new dt4(r, o));
            }
        }
        this.viewports = t.sort((i1, s)=>i1.from - s.from), this.scaler = this.heightMap.height <= 7e6 ? Gi1 : new Qe4(this.heightOracle.doc, this.heightMap, this.viewports);
    }
    updateViewportLines() {
        this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, (t)=>{
            this.viewportLines.push(this.scaler.scale == 1 ? t : Dt3(t, this.scaler));
        });
    }
    update(t, e = null) {
        this.state = t.state;
        let i1 = this.stateDeco;
        this.stateDeco = this.state.facet(zt3).filter((a)=>typeof a != "function");
        let s = t.changedRanges, r = I3.extendWithRanges(s, Jn1(i1, this.stateDeco, t ? t.changes : x4.empty(this.state.doc.length))), o = this.heightMap.height;
        this.heightMap = this.heightMap.applyChanges(this.stateDeco, t.startState.doc, this.heightOracle.setDoc(this.state.doc), r), this.heightMap.height != o && (t.flags |= 2);
        let l = r.length ? this.mapViewport(this.viewport, t.changes) : this.viewport;
        (e && (e.range.head < l.from || e.range.head > l.to) || !this.viewportIsAppropriate(l)) && (l = this.getViewport(0, e));
        let h = !t.changes.empty || t.flags & 2 || l.from != this.viewport.from || l.to != this.viewport.to;
        this.viewport = l, this.updateForViewport(), h && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, t.changes))), t.flags |= this.computeVisibleRanges(), e && (this.scrollTarget = e), !this.mustEnforceCursorAssoc && t.selectionSet && t.view.lineWrapping && t.state.selection.main.empty && t.state.selection.main.assoc && (this.mustEnforceCursorAssoc = !0);
    }
    measure(t) {
        let e = t.contentDOM, i1 = window.getComputedStyle(e), s = this.heightOracle, r = i1.whiteSpace;
        this.defaultTextDirection = i1.direction == "rtl" ? R5.RTL : R5.LTR;
        let o = this.heightOracle.mustRefreshForWrapping(r), l = o || this.mustMeasureContent || this.contentDOMHeight != e.clientHeight;
        this.contentDOMHeight = e.clientHeight, this.mustMeasureContent = !1;
        let h = 0, a = 0, c = parseInt(i1.paddingTop) || 0, f = parseInt(i1.paddingBottom) || 0;
        (this.paddingTop != c || this.paddingBottom != f) && (this.paddingTop = c, this.paddingBottom = f, h |= 10), this.editorWidth != t.scrollDOM.clientWidth && (s.lineWrapping && (l = !0), this.editorWidth = t.scrollDOM.clientWidth, h |= 8);
        let d1 = (this.printing ? Qn1 : Zn1)(e, this.paddingTop), u = d1.top - this.pixelViewport.top, p1 = d1.bottom - this.pixelViewport.bottom;
        this.pixelViewport = d1;
        let m = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
        if (m != this.inView && (this.inView = m, m && (l = !0)), !this.inView) return 0;
        let b = e.clientWidth;
        if ((this.contentDOMWidth != b || this.editorHeight != t.scrollDOM.clientHeight) && (this.contentDOMWidth = b, this.editorHeight = t.scrollDOM.clientHeight, h |= 8), l) {
            let k = t.docView.measureVisibleLineHeights(this.viewport);
            if (s.mustRefreshForHeights(k) && (o = !0), o || s.lineWrapping && Math.abs(b - this.contentDOMWidth) > s.charWidth) {
                let { lineHeight: v , charWidth: w  } = t.docView.measureTextSize();
                o = s.refresh(r, v, w, b / w, k), o && (t.docView.minWidth = 0, h |= 8);
            }
            u > 0 && p1 > 0 ? a = Math.max(u, p1) : u < 0 && p1 < 0 && (a = Math.min(u, p1)), s.heightChanged = !1;
            for (let v1 of this.viewports){
                let w1 = v1.from == this.viewport.from ? k : t.docView.measureVisibleLineHeights(v1);
                this.heightMap = this.heightMap.updateHeight(s, 0, o, new ue5(v1.from, w1));
            }
            s.heightChanged && (h |= 2);
        }
        let y = !this.viewportIsAppropriate(this.viewport, a) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
        return y && (this.viewport = this.getViewport(a, this.scrollTarget)), this.updateForViewport(), (h & 2 || y) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps)), h |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, t.docView.enforceCursorAssoc()), h;
    }
    get visibleTop() {
        return this.scaler.fromDOM(this.pixelViewport.top);
    }
    get visibleBottom() {
        return this.scaler.fromDOM(this.pixelViewport.bottom);
    }
    getViewport(t, e) {
        let i1 = .5 - Math.max(-.5, Math.min(.5, t / 1e3 / 2)), s = this.heightMap, r = this.state.doc, { visibleTop: o , visibleBottom: l  } = this, h = new dt4(s.lineAt(o - i1 * 1e3, A4.ByHeight, r, 0, 0).from, s.lineAt(l + (1 - i1) * 1e3, A4.ByHeight, r, 0, 0).to);
        if (e) {
            let { head: a  } = e.range;
            if (a < h.from || a > h.to) {
                let c = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f = s.lineAt(a, A4.ByPos, r, 0, 0), d1;
                e.y == "center" ? d1 = (f.top + f.bottom) / 2 - c / 2 : e.y == "start" || e.y == "nearest" && a < h.from ? d1 = f.top : d1 = f.bottom - c, h = new dt4(s.lineAt(d1 - 1e3 / 2, A4.ByHeight, r, 0, 0).from, s.lineAt(d1 + c + 1e3 / 2, A4.ByHeight, r, 0, 0).to);
            }
        }
        return h;
    }
    mapViewport(t, e) {
        let i1 = e.mapPos(t.from, -1), s = e.mapPos(t.to, 1);
        return new dt4(this.heightMap.lineAt(i1, A4.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(s, A4.ByPos, this.state.doc, 0, 0).to);
    }
    viewportIsAppropriate({ from: t , to: e  }, i1 = 0) {
        if (!this.inView) return !0;
        let { top: s  } = this.heightMap.lineAt(t, A4.ByPos, this.state.doc, 0, 0), { bottom: r  } = this.heightMap.lineAt(e, A4.ByPos, this.state.doc, 0, 0), { visibleTop: o , visibleBottom: l  } = this;
        return (t == 0 || s <= o - Math.max(10, Math.min(-i1, 250))) && (e == this.state.doc.length || r >= l + Math.max(10, Math.min(i1, 250))) && s > o - 2 * 1e3 && r < l + 2 * 1e3;
    }
    mapLineGaps(t, e) {
        if (!t.length || e.empty) return t;
        let i1 = [];
        for (let s of t)e.touchesRange(s.from, s.to) || i1.push(new Bt3(e.mapPos(s.from), e.mapPos(s.to), s.size));
        return i1;
    }
    ensureLineGaps(t) {
        let e = [];
        if (this.defaultTextDirection != R5.LTR) return e;
        for (let i1 of this.viewportLines){
            if (i1.length < 4e3) continue;
            let s = tr2(i1.from, i1.to, this.stateDeco);
            if (s.total < 4e3) continue;
            let r, o;
            if (this.heightOracle.lineWrapping) {
                let a = 2e3 / this.heightOracle.lineLength * this.heightOracle.lineHeight;
                r = Xt3(s, (this.visibleTop - i1.top - a) / i1.height), o = Xt3(s, (this.visibleBottom - i1.top + a) / i1.height);
            } else {
                let a1 = s.total * this.heightOracle.charWidth, c = 2e3 * this.heightOracle.charWidth;
                r = Xt3(s, (this.pixelViewport.left - c) / a1), o = Xt3(s, (this.pixelViewport.right + c) / a1);
            }
            let l = [];
            r > i1.from && l.push({
                from: i1.from,
                to: r
            }), o < i1.to && l.push({
                from: o,
                to: i1.to
            });
            let h = this.state.selection.main;
            h.from >= i1.from && h.from <= i1.to && $i2(l, h.from - 10, h.from + 10), !h.empty && h.to >= i1.from && h.to <= i1.to && $i2(l, h.to - 10, h.to + 10);
            for (let { from: a2 , to: c1  } of l)c1 - a2 > 1e3 && e.push(er2(t, (f)=>f.from >= i1.from && f.to <= i1.to && Math.abs(f.from - a2) < 1e3 && Math.abs(f.to - c1) < 1e3) || new Bt3(a2, c1, this.gapSize(i1, a2, c1, s)));
        }
        return e;
    }
    gapSize(t, e, i1, s) {
        let r = ji2(s, i1) - ji2(s, e);
        return this.heightOracle.lineWrapping ? t.height * r : s.total * this.heightOracle.charWidth * r;
    }
    updateLineGaps(t) {
        Bt3.same(t, this.lineGaps) || (this.lineGaps = t, this.lineGapDeco = M6.set(t.map((e)=>e.draw(this.heightOracle.lineWrapping))));
    }
    computeVisibleRanges() {
        let t = this.stateDeco;
        this.lineGaps.length && (t = t.concat(this.lineGapDeco));
        let e = [];
        P3.spans(t, this.viewport.from, this.viewport.to, {
            span (s, r) {
                e.push({
                    from: s,
                    to: r
                });
            },
            point () {}
        }, 20);
        let i1 = e.length != this.visibleRanges.length || this.visibleRanges.some((s, r)=>s.from != e[r].from || s.to != e[r].to);
        return this.visibleRanges = e, i1 ? 4 : 0;
    }
    lineBlockAt(t) {
        return t >= this.viewport.from && t <= this.viewport.to && this.viewportLines.find((e)=>e.from <= t && e.to >= t) || Dt3(this.heightMap.lineAt(t, A4.ByPos, this.state.doc, 0, 0), this.scaler);
    }
    lineBlockAtHeight(t) {
        return Dt3(this.heightMap.lineAt(this.scaler.fromDOM(t), A4.ByHeight, this.state.doc, 0, 0), this.scaler);
    }
    elementAtHeight(t) {
        return Dt3(this.heightMap.blockAt(this.scaler.fromDOM(t), this.state.doc, 0, 0), this.scaler);
    }
    get docHeight() {
        return this.scaler.toDOM(this.heightMap.height);
    }
    get contentHeight() {
        return this.docHeight + this.paddingTop + this.paddingBottom;
    }
}, dt4 = class {
    constructor(t, e){
        this.from = t, this.to = e;
    }
};
function tr2(n, t, e) {
    let i1 = [], s = n, r = 0;
    return P3.spans(e, n, t, {
        span () {},
        point (o, l) {
            o > s && (i1.push({
                from: s,
                to: o
            }), r += o - s), s = l;
        }
    }, 20), s < t && (i1.push({
        from: s,
        to: t
    }), r += t - s), {
        total: r,
        ranges: i1
    };
}
function Xt3({ total: n , ranges: t  }, e) {
    if (e <= 0) return t[0].from;
    if (e >= 1) return t[t.length - 1].to;
    let i1 = Math.floor(n * e);
    for(let s = 0;; s++){
        let { from: r , to: o  } = t[s], l = o - r;
        if (i1 <= l) return r + i1;
        i1 -= l;
    }
}
function ji2(n, t) {
    let e = 0;
    for (let { from: i1 , to: s  } of n.ranges){
        if (t <= s) {
            e += t - i1;
            break;
        }
        e += s - i1;
    }
    return e / n.total;
}
function $i2(n, t, e) {
    for(let i1 = 0; i1 < n.length; i1++){
        let s = n[i1];
        if (s.from < e && s.to > t) {
            let r = [];
            s.from < t && r.push({
                from: s.from,
                to: t
            }), s.to > e && r.push({
                from: e,
                to: s.to
            }), n.splice(i1, 1, ...r), i1 += r.length - 1;
        }
    }
}
function er2(n, t) {
    for (let e of n)if (t(e)) return e;
}
var Gi1 = {
    toDOM (n) {
        return n;
    },
    fromDOM (n) {
        return n;
    },
    scale: 1
}, Qe4 = class {
    constructor(t, e, i1){
        let s = 0, r = 0, o = 0;
        this.viewports = i1.map(({ from: l , to: h  })=>{
            let a = e.lineAt(l, A4.ByPos, t, 0, 0).top, c = e.lineAt(h, A4.ByPos, t, 0, 0).bottom;
            return s += c - a, {
                from: l,
                to: h,
                top: a,
                bottom: c,
                domTop: 0,
                domBottom: 0
            };
        }), this.scale = (7e6 - s) / (e.height - s);
        for (let l of this.viewports)l.domTop = o + (l.top - r) * this.scale, o = l.domBottom = l.domTop + (l.bottom - l.top), r = l.bottom;
    }
    toDOM(t) {
        for(let e = 0, i1 = 0, s = 0;; e++){
            let r = e < this.viewports.length ? this.viewports[e] : null;
            if (!r || t < r.top) return s + (t - i1) * this.scale;
            if (t <= r.bottom) return r.domTop + (t - r.top);
            i1 = r.bottom, s = r.domBottom;
        }
    }
    fromDOM(t) {
        for(let e = 0, i1 = 0, s = 0;; e++){
            let r = e < this.viewports.length ? this.viewports[e] : null;
            if (!r || t < r.domTop) return i1 + (t - s) / this.scale;
            if (t <= r.domBottom) return r.top + (t - r.domTop);
            i1 = r.bottom, s = r.domBottom;
        }
    }
};
function Dt3(n, t) {
    if (t.scale == 1) return n;
    let e = t.toDOM(n.top), i1 = t.toDOM(n.bottom);
    return new $3(n.from, n.length, e, i1 - e, Array.isArray(n.type) ? n.type.map((s)=>Dt3(s, t)) : n.type);
}
var Ut3 = A3.define({
    combine: (n)=>n.join(" ")
}), ti2 = A3.define({
    combine: (n)=>n.indexOf(!0) > -1
}), ei2 = T6.newName(), Xs2 = T6.newName(), Us1 = T6.newName(), Js1 = {
    "&light": "." + Xs2,
    "&dark": "." + Us1
};
function ii2(n, t, e) {
    return new T6(t, {
        finish (i1) {
            return /&/.test(i1) ? i1.replace(/&\w*/, (s)=>{
                if (s == "&") return n;
                if (!e || !e[s]) throw new RangeError(`Unsupported selector: ${s}`);
                return e[s];
            }) : n + " " + i1;
        }
    });
}
var ir2 = ii2("." + ei2, {
    "&.cm-editor": {
        position: "relative !important",
        boxSizing: "border-box",
        "&.cm-focused": {
            outline: "1px dotted #212121"
        },
        display: "flex !important",
        flexDirection: "column"
    },
    ".cm-scroller": {
        display: "flex !important",
        alignItems: "flex-start !important",
        fontFamily: "monospace",
        lineHeight: 1.4,
        height: "100%",
        overflowX: "auto",
        position: "relative",
        zIndex: 0
    },
    ".cm-content": {
        margin: 0,
        flexGrow: 2,
        minHeight: "100%",
        display: "block",
        whiteSpace: "pre",
        wordWrap: "normal",
        boxSizing: "border-box",
        padding: "4px 0",
        outline: "none",
        "&[contenteditable=true]": {
            WebkitUserModify: "read-write-plaintext-only"
        }
    },
    ".cm-lineWrapping": {
        whiteSpace_fallback: "pre-wrap",
        whiteSpace: "break-spaces",
        wordBreak: "break-word",
        overflowWrap: "anywhere"
    },
    "&light .cm-content": {
        caretColor: "black"
    },
    "&dark .cm-content": {
        caretColor: "white"
    },
    ".cm-line": {
        display: "block",
        padding: "0 2px 0 4px"
    },
    ".cm-selectionLayer": {
        zIndex: -1,
        contain: "size style"
    },
    ".cm-selectionBackground": {
        position: "absolute"
    },
    "&light .cm-selectionBackground": {
        background: "#d9d9d9"
    },
    "&dark .cm-selectionBackground": {
        background: "#222"
    },
    "&light.cm-focused .cm-selectionBackground": {
        background: "#d7d4f0"
    },
    "&dark.cm-focused .cm-selectionBackground": {
        background: "#233"
    },
    ".cm-cursorLayer": {
        zIndex: 100,
        contain: "size style",
        pointerEvents: "none"
    },
    "&.cm-focused .cm-cursorLayer": {
        animation: "steps(1) cm-blink 1.2s infinite"
    },
    "@keyframes cm-blink": {
        "0%": {},
        "50%": {
            visibility: "hidden"
        },
        "100%": {}
    },
    "@keyframes cm-blink2": {
        "0%": {},
        "50%": {
            visibility: "hidden"
        },
        "100%": {}
    },
    ".cm-cursor, .cm-dropCursor": {
        position: "absolute",
        borderLeft: "1.2px solid black",
        marginLeft: "-0.6px",
        pointerEvents: "none"
    },
    ".cm-cursor": {
        display: "none"
    },
    "&dark .cm-cursor": {
        borderLeftColor: "#444"
    },
    "&.cm-focused .cm-cursor": {
        display: "block"
    },
    "&light .cm-activeLine": {
        backgroundColor: "#f3f9ff"
    },
    "&dark .cm-activeLine": {
        backgroundColor: "#223039"
    },
    "&light .cm-specialChar": {
        color: "red"
    },
    "&dark .cm-specialChar": {
        color: "#f78"
    },
    ".cm-gutters": {
        display: "flex",
        height: "100%",
        boxSizing: "border-box",
        left: 0,
        zIndex: 200
    },
    "&light .cm-gutters": {
        backgroundColor: "#f5f5f5",
        color: "#6c6c6c",
        borderRight: "1px solid #ddd"
    },
    "&dark .cm-gutters": {
        backgroundColor: "#333338",
        color: "#ccc"
    },
    ".cm-gutter": {
        display: "flex !important",
        flexDirection: "column",
        flexShrink: 0,
        boxSizing: "border-box",
        minHeight: "100%",
        overflow: "hidden"
    },
    ".cm-gutterElement": {
        boxSizing: "border-box"
    },
    ".cm-lineNumbers .cm-gutterElement": {
        padding: "0 3px 0 5px",
        minWidth: "20px",
        textAlign: "right",
        whiteSpace: "nowrap"
    },
    "&light .cm-activeLineGutter": {
        backgroundColor: "#e2f2ff"
    },
    "&dark .cm-activeLineGutter": {
        backgroundColor: "#222227"
    },
    ".cm-panels": {
        boxSizing: "border-box",
        position: "sticky",
        left: 0,
        right: 0
    },
    "&light .cm-panels": {
        backgroundColor: "#f5f5f5",
        color: "black"
    },
    "&light .cm-panels-top": {
        borderBottom: "1px solid #ddd"
    },
    "&light .cm-panels-bottom": {
        borderTop: "1px solid #ddd"
    },
    "&dark .cm-panels": {
        backgroundColor: "#333338",
        color: "white"
    },
    ".cm-tab": {
        display: "inline-block",
        overflow: "hidden",
        verticalAlign: "bottom"
    },
    ".cm-widgetBuffer": {
        verticalAlign: "text-top",
        height: "1em",
        display: "inline"
    },
    ".cm-placeholder": {
        color: "#888",
        display: "inline-block",
        verticalAlign: "top"
    },
    ".cm-button": {
        verticalAlign: "middle",
        color: "inherit",
        fontSize: "70%",
        padding: ".2em 1em",
        borderRadius: "1px"
    },
    "&light .cm-button": {
        backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
        border: "1px solid #888",
        "&:active": {
            backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
        }
    },
    "&dark .cm-button": {
        backgroundImage: "linear-gradient(#393939, #111)",
        border: "1px solid #888",
        "&:active": {
            backgroundImage: "linear-gradient(#111, #333)"
        }
    },
    ".cm-textfield": {
        verticalAlign: "middle",
        color: "inherit",
        fontSize: "70%",
        border: "1px solid silver",
        padding: ".2em .5em"
    },
    "&light .cm-textfield": {
        backgroundColor: "white"
    },
    "&dark .cm-textfield": {
        border: "1px solid #555",
        backgroundColor: "inherit"
    }
}, Js1), sr2 = {
    childList: !0,
    characterData: !0,
    subtree: !0,
    attributes: !0,
    characterDataOldValue: !0
}, Me4 = g7.ie && g7.ie_version <= 11, si2 = class {
    constructor(t, e, i1){
        this.view = t, this.onChange = e, this.onScrollChanged = i1, this.active = !1, this.selectionRange = new Ee4, this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.scrollTargets = [], this.intersection = null, this.resize = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = t.contentDOM, this.observer = new MutationObserver((s)=>{
            for (let r of s)this.queue.push(r);
            (g7.ie && g7.ie_version <= 11 || g7.ios && t.composing) && s.some((r)=>r.type == "childList" && r.removedNodes.length || r.type == "characterData" && r.oldValue.length > r.target.nodeValue.length) ? this.flushSoon() : this.flush();
        }), Me4 && (this.onCharData = (s)=>{
            this.queue.push({
                target: s.target,
                type: "characterData",
                oldValue: s.prevValue
            }), this.flushSoon();
        }), this.onSelectionChange = this.onSelectionChange.bind(this), window.addEventListener("resize", this.onResize = this.onResize.bind(this)), typeof ResizeObserver == "function" && (this.resize = new ResizeObserver(()=>{
            this.view.docView.lastUpdate < Date.now() - 75 && this.onResize();
        }), this.resize.observe(t.scrollDOM)), window.addEventListener("beforeprint", this.onPrint = this.onPrint.bind(this)), this.start(), window.addEventListener("scroll", this.onScroll = this.onScroll.bind(this)), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((s)=>{
            this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), s.length > 0 && s[s.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
        }, {}), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((s)=>{
            s.length > 0 && s[s.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
        }, {})), this.listenForScroll(), this.readSelectionRange(), this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
    }
    onScroll(t) {
        this.intersecting && this.flush(!1), this.onScrollChanged(t);
    }
    onResize() {
        this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(()=>{
            this.resizeTimeout = -1, this.view.requestMeasure();
        }, 50));
    }
    onPrint() {
        this.view.viewState.printing = !0, this.view.measure(), setTimeout(()=>{
            this.view.viewState.printing = !1, this.view.requestMeasure();
        }, 500);
    }
    updateGaps(t) {
        if (this.gapIntersection && (t.length != this.gaps.length || this.gaps.some((e, i1)=>e != t[i1]))) {
            this.gapIntersection.disconnect();
            for (let e of t)this.gapIntersection.observe(e);
            this.gaps = t;
        }
    }
    onSelectionChange(t) {
        if (!this.readSelectionRange() || this.delayedAndroidKey) return;
        let { view: e  } = this, i1 = this.selectionRange;
        if (e.state.facet(jt3) ? e.root.activeElement != this.dom : !Re4(e.dom, i1)) return;
        let s = i1.anchorNode && e.docView.nearest(i1.anchorNode);
        s && s.ignoreEvent(t) || ((g7.ie && g7.ie_version <= 11 || g7.android && g7.chrome) && !e.state.selection.main.empty && i1.focusNode && ie5(i1.focusNode, i1.focusOffset, i1.anchorNode, i1.anchorOffset) ? this.flushSoon() : this.flush(!1));
    }
    readSelectionRange() {
        let { root: t  } = this.view, e = ee3(t), i1 = g7.safari && t.nodeType == 11 && gn1() == this.view.contentDOM && nr2(this.view) || e;
        return this.selectionRange.eq(i1) ? !1 : (this.selectionRange.setRange(i1), this.selectionChanged = !0);
    }
    setSelectionRange(t, e) {
        this.selectionRange.set(t.node, t.offset, e.node, e.offset), this.selectionChanged = !1;
    }
    clearSelectionRange() {
        this.selectionRange.set(null, 0, null, 0);
    }
    listenForScroll() {
        this.parentCheck = -1;
        let t = 0, e = null;
        for(let i1 = this.dom; i1;)if (i1.nodeType == 1) !e && t < this.scrollTargets.length && this.scrollTargets[t] == i1 ? t++ : e || (e = this.scrollTargets.slice(0, t)), e && e.push(i1), i1 = i1.assignedSlot || i1.parentNode;
        else if (i1.nodeType == 11) i1 = i1.host;
        else break;
        if (t < this.scrollTargets.length && !e && (e = this.scrollTargets.slice(0, t)), e) {
            for (let i11 of this.scrollTargets)i11.removeEventListener("scroll", this.onScroll);
            for (let i2 of this.scrollTargets = e)i2.addEventListener("scroll", this.onScroll);
        }
    }
    ignore(t) {
        if (!this.active) return t();
        try {
            return this.stop(), t();
        } finally{
            this.start(), this.clear();
        }
    }
    start() {
        this.active || (this.observer.observe(this.dom, sr2), Me4 && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
    }
    stop() {
        !this.active || (this.active = !1, this.observer.disconnect(), Me4 && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
    }
    clear() {
        this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
    }
    delayAndroidKey(t, e) {
        this.delayedAndroidKey || requestAnimationFrame(()=>{
            let i1 = this.delayedAndroidKey;
            this.delayedAndroidKey = null, this.delayedFlush = -1, this.flush() || Lt3(this.view.contentDOM, i1.key, i1.keyCode);
        }), (!this.delayedAndroidKey || t == "Enter") && (this.delayedAndroidKey = {
            key: t,
            keyCode: e
        });
    }
    flushSoon() {
        this.delayedFlush < 0 && (this.delayedFlush = window.setTimeout(()=>{
            this.delayedFlush = -1, this.flush();
        }, 20));
    }
    forceFlush() {
        this.delayedFlush >= 0 && (window.clearTimeout(this.delayedFlush), this.delayedFlush = -1, this.flush());
    }
    processRecords() {
        let t = this.queue;
        for (let r of this.observer.takeRecords())t.push(r);
        t.length && (this.queue = []);
        let e = -1, i1 = -1, s = !1;
        for (let r1 of t){
            let o = this.readMutation(r1);
            !o || (o.typeOver && (s = !0), e == -1 ? { from: e , to: i1  } = o : (e = Math.min(o.from, e), i1 = Math.max(o.to, i1)));
        }
        return {
            from: e,
            to: i1,
            typeOver: s
        };
    }
    flush(t = !0) {
        if (this.delayedFlush >= 0 || this.delayedAndroidKey) return;
        t && this.readSelectionRange();
        let { from: e , to: i1 , typeOver: s  } = this.processRecords(), r = this.selectionChanged && Re4(this.dom, this.selectionRange);
        if (e < 0 && !r) return;
        this.selectionChanged = !1;
        let o = this.view.state, l = this.onChange(e, i1, s);
        return this.view.state == o && this.view.update([]), l;
    }
    readMutation(t) {
        let e = this.view.docView.nearest(t.target);
        if (!e || e.ignoreMutation(t)) return null;
        if (e.markDirty(t.type == "attributes"), t.type == "attributes" && (e.dirty |= 4), t.type == "childList") {
            let i1 = _i2(e, t.previousSibling || t.target.previousSibling, -1), s = _i2(e, t.nextSibling || t.target.nextSibling, 1);
            return {
                from: i1 ? e.posAfter(i1) : e.posAtStart,
                to: s ? e.posBefore(s) : e.posAtEnd,
                typeOver: !1
            };
        } else return t.type == "characterData" ? {
            from: e.posAtStart,
            to: e.posAtEnd,
            typeOver: t.target.nodeValue == t.oldValue
        } : null;
    }
    destroy() {
        var t, e, i1;
        this.stop(), (t = this.intersection) === null || t === void 0 || t.disconnect(), (e = this.gapIntersection) === null || e === void 0 || e.disconnect(), (i1 = this.resize) === null || i1 === void 0 || i1.disconnect();
        for (let s of this.scrollTargets)s.removeEventListener("scroll", this.onScroll);
        window.removeEventListener("scroll", this.onScroll), window.removeEventListener("resize", this.onResize), window.removeEventListener("beforeprint", this.onPrint), this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout);
    }
};
function _i2(n, t, e) {
    for(; t;){
        let i1 = O4.get(t);
        if (i1 && i1.parent == n) return i1;
        let s = t.parentNode;
        t = s != n.dom ? s : e > 0 ? t.nextSibling : t.previousSibling;
    }
    return null;
}
function nr2(n) {
    let t = null;
    function e(h) {
        h.preventDefault(), h.stopImmediatePropagation(), t = h.getTargetRanges()[0];
    }
    if (n.contentDOM.addEventListener("beforeinput", e, !0), document.execCommand("indent"), n.contentDOM.removeEventListener("beforeinput", e, !0), !t) return null;
    let i1 = t.startContainer, s = t.startOffset, r = t.endContainer, o = t.endOffset, l = n.docView.domAtPos(n.state.selection.main.anchor);
    return ie5(l.node, l.offset, r, o) && ([i1, s, r, o] = [
        r,
        o,
        i1,
        s
    ]), {
        anchorNode: i1,
        anchorOffset: s,
        focusNode: r,
        focusOffset: o
    };
}
function rr2(n, t, e, i1) {
    let s, r, o = n.state.selection.main;
    if (t > -1) {
        let l = n.docView.domBoundsAround(t, e, 0);
        if (!l || n.state.readOnly) return !1;
        let { from: h , to: a  } = l, c = n.docView.impreciseHead || n.docView.impreciseAnchor ? [] : lr2(n), f = new le5(c, n.state);
        f.readRange(l.startDOM, l.endDOM);
        let d1 = o.from, u = null;
        (n.inputState.lastKeyCode === 8 && n.inputState.lastKeyTime > Date.now() - 100 || g7.android && f.text.length < a - h) && (d1 = o.to, u = "end");
        let p1 = or2(n.state.doc.sliceString(h, a, st4), f.text, d1 - h, u);
        p1 && (g7.chrome && n.inputState.lastKeyCode == 13 && p1.toB == p1.from + 2 && f.text.slice(p1.from, p1.toB) == st4 + st4 && p1.toB--, s = {
            from: h + p1.from,
            to: h + p1.toA,
            insert: v5.of(f.text.slice(p1.from, p1.toB).split(st4))
        }), r = hr2(c, h);
    } else if (n.hasFocus || !n.state.facet(jt3)) {
        let l1 = n.observer.selectionRange, { impreciseHead: h1 , impreciseAnchor: a1  } = n.docView, c1 = h1 && h1.node == l1.focusNode && h1.offset == l1.focusOffset || !yt3(n.contentDOM, l1.focusNode) ? n.state.selection.main.head : n.docView.posFromDOM(l1.focusNode, l1.focusOffset), f1 = a1 && a1.node == l1.anchorNode && a1.offset == l1.anchorOffset || !yt3(n.contentDOM, l1.anchorNode) ? n.state.selection.main.anchor : n.docView.posFromDOM(l1.anchorNode, l1.anchorOffset);
        (c1 != o.head || f1 != o.anchor) && (r = g5.single(f1, c1));
    }
    if (!s && !r) return !1;
    if (!s && i1 && !o.empty && r && r.main.empty ? s = {
        from: o.from,
        to: o.to,
        insert: n.state.doc.slice(o.from, o.to)
    } : s && s.from >= o.from && s.to <= o.to && (s.from != o.from || s.to != o.to) && o.to - o.from - (s.to - s.from) <= 4 ? s = {
        from: o.from,
        to: o.to,
        insert: n.state.doc.slice(o.from, s.from).append(s.insert).append(n.state.doc.slice(s.to, o.to))
    } : (g7.mac || g7.android) && s && s.from == s.to && s.from == o.head - 1 && s.insert.toString() == "." && (s = {
        from: o.from,
        to: o.to,
        insert: v5.of([
            " "
        ])
    }), s) {
        let l2 = n.state;
        if (g7.ios && n.inputState.flushIOSKey(n) || g7.android && (s.from == o.from && s.to == o.to && s.insert.length == 1 && s.insert.lines == 2 && Lt3(n.contentDOM, "Enter", 13) || s.from == o.from - 1 && s.to == o.to && s.insert.length == 0 && Lt3(n.contentDOM, "Backspace", 8) || s.from == o.from && s.to == o.to + 1 && s.insert.length == 0 && Lt3(n.contentDOM, "Delete", 46))) return !0;
        let h2 = s.insert.toString();
        if (n.state.facet(Os2).some((f)=>f(n, s.from, s.to, h2))) return !0;
        n.inputState.composing >= 0 && n.inputState.composing++;
        let a2;
        if (s.from >= o.from && s.to <= o.to && s.to - s.from >= (o.to - o.from) / 3 && (!r || r.main.empty && r.main.from == s.from + s.insert.length) && n.inputState.composing < 0) {
            let f2 = o.from < s.from ? l2.sliceDoc(o.from, s.from) : "", d11 = o.to > s.to ? l2.sliceDoc(s.to, o.to) : "";
            a2 = l2.replaceSelection(n.state.toText(f2 + s.insert.sliceString(0, void 0, n.state.lineBreak) + d11));
        } else {
            let f3 = l2.changes(s), d2 = r && !l2.selection.main.eq(r.main) && r.main.to <= f3.newLength ? r.main : void 0;
            if (l2.selection.ranges.length > 1 && n.inputState.composing >= 0 && s.to <= o.to && s.to >= o.to - 10) {
                let u1 = n.state.sliceDoc(s.from, s.to), p11 = Ws2(n) || n.state.doc.lineAt(o.head), m = o.to - s.to, b = o.to - o.from;
                a2 = l2.changeByRange((y)=>{
                    if (y.from == o.from && y.to == o.to) return {
                        changes: f3,
                        range: d2 || y.map(f3)
                    };
                    let k = y.to - m, v = k - u1.length;
                    if (y.to - y.from != b || n.state.sliceDoc(v, k) != u1 || p11 && y.to >= p11.from && y.from <= p11.to) return {
                        range: y
                    };
                    let w = l2.changes({
                        from: v,
                        to: k,
                        insert: s.insert
                    }), L = y.to - o.to;
                    return {
                        changes: w,
                        range: d2 ? g5.range(Math.max(0, d2.anchor + L), Math.max(0, d2.head + L)) : y.map(w)
                    };
                });
            } else a2 = {
                changes: f3,
                selection: d2 && l2.selection.replaceRange(d2)
            };
        }
        let c2 = "input.type";
        return n.composing && (c2 += ".compose", n.inputState.compositionFirstChange && (c2 += ".start", n.inputState.compositionFirstChange = !1)), n.dispatch(a2, {
            scrollIntoView: !0,
            userEvent: c2
        }), !0;
    } else if (r && !r.main.eq(o)) {
        let l3 = !1, h3 = "select";
        return n.inputState.lastSelectionTime > Date.now() - 50 && (n.inputState.lastSelectionOrigin == "select" && (l3 = !0), h3 = n.inputState.lastSelectionOrigin), n.dispatch({
            selection: r,
            scrollIntoView: l3,
            userEvent: h3
        }), !0;
    } else return !1;
}
function or2(n, t, e, i1) {
    let s = Math.min(n.length, t.length), r = 0;
    for(; r < s && n.charCodeAt(r) == t.charCodeAt(r);)r++;
    if (r == s && n.length == t.length) return null;
    let o = n.length, l = t.length;
    for(; o > 0 && l > 0 && n.charCodeAt(o - 1) == t.charCodeAt(l - 1);)o--, l--;
    if (i1 == "end") {
        let h = Math.max(0, r - Math.min(o, l));
        e -= o + h - r;
    }
    return o < r && n.length < t.length ? (r -= e <= r && e >= o ? r - e : 0, l = r + (l - o), o = r) : l < r && (r -= e <= r && e >= l ? r - e : 0, o = r + (o - l), l = r), {
        from: r,
        toA: o,
        toB: l
    };
}
function lr2(n) {
    let t = [];
    if (n.root.activeElement != n.contentDOM) return t;
    let { anchorNode: e , anchorOffset: i1 , focusNode: s , focusOffset: r  } = n.observer.selectionRange;
    return e && (t.push(new he4(e, i1)), (s != e || r != i1) && t.push(new he4(s, r))), t;
}
function hr2(n, t) {
    if (n.length == 0) return null;
    let e = n[0].pos, i1 = n.length == 2 ? n[1].pos : e;
    return e > -1 && i1 > -1 ? g5.single(e + t, i1 + t) : null;
}
var C6 = class {
    constructor(t = {}){
        this.plugins = [], this.pluginMap = new Map, this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.style.cssText = "position: absolute; top: -10000px", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), this._dispatch = t.dispatch || ((e)=>this.update([
                e
            ])), this.dispatch = this.dispatch.bind(this), this.root = t.root || wn1(t.parent) || document, this.viewState = new pe3(t.state || w3.create()), this.plugins = this.state.facet(kt2).map((e)=>new Et3(e));
        for (let e of this.plugins)e.update(this);
        this.observer = new si2(this, (e, i1, s)=>rr2(this, e, i1, s), (e)=>{
            this.inputState.runScrollHandlers(this, e), this.observer.intersecting && this.measure();
        }), this.inputState = new _e4(this), this.inputState.ensureHandlers(this, this.plugins), this.docView = new ae4(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), t.parent && t.parent.appendChild(this.dom);
    }
    get state() {
        return this.viewState.state;
    }
    get viewport() {
        return this.viewState.viewport;
    }
    get visibleRanges() {
        return this.viewState.visibleRanges;
    }
    get inView() {
        return this.viewState.inView;
    }
    get composing() {
        return this.inputState.composing > 0;
    }
    get compositionStarted() {
        return this.inputState.composing >= 0;
    }
    dispatch(...t) {
        this._dispatch(t.length == 1 && t[0] instanceof S4 ? t[0] : this.state.update(...t));
    }
    update(t) {
        if (this.updateState != 0) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
        let e = !1, i1 = !1, s, r = this.state;
        for (let l of t){
            if (l.startState != r) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
            r = l.state;
        }
        if (this.destroyed) {
            this.viewState.state = r;
            return;
        }
        if (this.observer.clear(), r.facet(w3.phrases) != this.state.facet(w3.phrases)) return this.setState(r);
        s = xt3.create(this, r, t);
        let o = this.viewState.scrollTarget;
        try {
            this.updateState = 2;
            for (let l1 of t){
                if (o && (o = o.map(l1.changes)), l1.scrollIntoView) {
                    let { main: h  } = l1.state.selection;
                    o = new vt3(h.empty ? h : g5.cursor(h.head, h.head > h.anchor ? -1 : 1));
                }
                for (let h1 of l1.effects)h1.is(Di2) && (o = h1.value);
            }
            this.viewState.update(s, o), this.bidiCache = St3.update(this.bidiCache, s.changes), s.empty || (this.updatePlugins(s), this.inputState.update(s)), e = this.docView.update(s), this.state.facet(At3) != this.styleModules && this.mountStyles(), i1 = this.updateAttrs(), this.showAnnouncements(t), this.docView.updateSelection(e, t.some((l)=>l.isUserEvent("select.pointer")));
        } finally{
            this.updateState = 0;
        }
        if (s.startState.facet(Ut3) != s.state.facet(Ut3) && (this.viewState.mustMeasureContent = !0), (e || i1 || o || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !s.empty) for (let l2 of this.state.facet(Ie4))l2(s);
    }
    setState(t) {
        if (this.updateState != 0) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
        if (this.destroyed) {
            this.viewState.state = t;
            return;
        }
        this.updateState = 2;
        let e = this.hasFocus;
        try {
            for (let i1 of this.plugins)i1.destroy(this);
            this.viewState = new pe3(t), this.plugins = t.facet(kt2).map((i1)=>new Et3(i1)), this.pluginMap.clear();
            for (let i11 of this.plugins)i11.update(this);
            this.docView = new ae4(this), this.inputState.ensureHandlers(this, this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
        } finally{
            this.updateState = 0;
        }
        e && this.focus(), this.requestMeasure();
    }
    updatePlugins(t) {
        let e = t.startState.facet(kt2), i1 = t.state.facet(kt2);
        if (e != i1) {
            let s = [];
            for (let r of i1){
                let o = e.indexOf(r);
                if (o < 0) s.push(new Et3(r));
                else {
                    let l = this.plugins[o];
                    l.mustUpdate = t, s.push(l);
                }
            }
            for (let r1 of this.plugins)r1.mustUpdate != t && r1.destroy(this);
            this.plugins = s, this.pluginMap.clear(), this.inputState.ensureHandlers(this, this.plugins);
        } else for (let s1 of this.plugins)s1.mustUpdate = t;
        for(let s2 = 0; s2 < this.plugins.length; s2++)this.plugins[s2].update(this);
    }
    measure(t = !0) {
        if (this.destroyed) return;
        this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.measureScheduled = 0, t && this.observer.flush();
        let e = null;
        try {
            for(let i1 = 0;; i1++){
                this.updateState = 1;
                let s = this.viewport, r = this.viewState.measure(this);
                if (!r && !this.measureRequests.length && this.viewState.scrollTarget == null) break;
                if (i1 > 5) {
                    console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
                    break;
                }
                let o = [];
                r & 4 || ([this.measureRequests, o] = [
                    o,
                    this.measureRequests
                ]);
                let l = o.map((f)=>{
                    try {
                        return f.read(this);
                    } catch (d1) {
                        return nt4(this.state, d1), Yi2;
                    }
                }), h = xt3.create(this, this.state, []), a = !1, c = !1;
                h.flags |= r, e ? e.flags |= r : e = h, this.updateState = 2, h.empty || (this.updatePlugins(h), this.inputState.update(h), this.updateAttrs(), a = this.docView.update(h));
                for(let f = 0; f < o.length; f++)if (l[f] != Yi2) try {
                    let d1 = o[f];
                    d1.write && d1.write(l[f], this);
                } catch (d11) {
                    nt4(this.state, d11);
                }
                if (this.viewState.scrollTarget && (this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, c = !0), a && this.docView.updateSelection(!0), this.viewport.from == s.from && this.viewport.to == s.to && !c && this.measureRequests.length == 0) break;
            }
        } finally{
            this.updateState = 0, this.measureScheduled = -1;
        }
        if (e && !e.empty) for (let i11 of this.state.facet(Ie4))i11(e);
    }
    get themeClasses() {
        return ei2 + " " + (this.state.facet(ti2) ? Us1 : Xs2) + " " + this.state.facet(Ut3);
    }
    updateAttrs() {
        let t = Xi2(this, Rs2, {
            class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
        }), e = {
            spellcheck: "false",
            autocorrect: "off",
            autocapitalize: "off",
            translate: "no",
            contenteditable: this.state.facet(jt3) ? "true" : "false",
            class: "cm-content",
            style: `${g7.tabSize}: ${this.state.tabSize}`,
            role: "textbox",
            "aria-multiline": "true"
        };
        this.state.readOnly && (e["aria-readonly"] = "true"), Xi2(this, bi2, e);
        let i1 = this.observer.ignore(()=>{
            let s = ze3(this.contentDOM, this.contentAttrs, e), r = ze3(this.dom, this.editorAttrs, t);
            return s || r;
        });
        return this.editorAttrs = t, this.contentAttrs = e, i1;
    }
    showAnnouncements(t) {
        let e = !0;
        for (let i1 of t)for (let s of i1.effects)if (s.is(C6.announce)) {
            e && (this.announceDOM.textContent = ""), e = !1;
            let r = this.announceDOM.appendChild(document.createElement("div"));
            r.textContent = s.value;
        }
    }
    mountStyles() {
        this.styleModules = this.state.facet(At3), T6.mount(this.root, this.styleModules.concat(ir2).reverse());
    }
    readMeasured() {
        if (this.updateState == 2) throw new Error("Reading the editor layout isn't allowed during an update");
        this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
    }
    requestMeasure(t) {
        if (this.measureScheduled < 0 && (this.measureScheduled = requestAnimationFrame(()=>this.measure())), t) {
            if (t.key != null) {
                for(let e = 0; e < this.measureRequests.length; e++)if (this.measureRequests[e].key === t.key) {
                    this.measureRequests[e] = t;
                    return;
                }
            }
            this.measureRequests.push(t);
        }
    }
    plugin(t) {
        let e = this.pluginMap.get(t);
        return (e === void 0 || e && e.spec != t) && this.pluginMap.set(t, e = this.plugins.find((i1)=>i1.spec == t) || null), e && e.update(this).value;
    }
    get documentTop() {
        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
    }
    get documentPadding() {
        return {
            top: this.viewState.paddingTop,
            bottom: this.viewState.paddingBottom
        };
    }
    elementAtHeight(t) {
        return this.readMeasured(), this.viewState.elementAtHeight(t);
    }
    lineBlockAtHeight(t) {
        return this.readMeasured(), this.viewState.lineBlockAtHeight(t);
    }
    get viewportLineBlocks() {
        return this.viewState.viewportLines;
    }
    lineBlockAt(t) {
        return this.viewState.lineBlockAt(t);
    }
    get contentHeight() {
        return this.viewState.contentHeight;
    }
    moveByChar(t, e, i1) {
        return Ce4(this, t, Bi2(this, t, e, i1));
    }
    moveByGroup(t, e) {
        return Ce4(this, t, Bi2(this, t, e, (i1)=>zn1(this, t.head, i1)));
    }
    moveToLineBoundary(t, e, i1 = !0) {
        return Wn1(this, t, e, i1);
    }
    moveVertically(t, e, i1) {
        return Ce4(this, t, Fn1(this, t, e, i1));
    }
    domAtPos(t) {
        return this.docView.domAtPos(t);
    }
    posAtDOM(t, e = 0) {
        return this.docView.posFromDOM(t, e);
    }
    posAtCoords(t, e = !0) {
        return this.readMeasured(), Fs2(this, t, e);
    }
    coordsAtPos(t, e = 1) {
        this.readMeasured();
        let i1 = this.docView.coordsAt(t, e);
        if (!i1 || i1.left == i1.right) return i1;
        let s = this.state.doc.lineAt(t), r = this.bidiSpans(s), o = r[rt4.find(r, t - s.from, -1, e)];
        return we4(i1, o.dir == R5.LTR == e > 0);
    }
    get defaultCharacterWidth() {
        return this.viewState.heightOracle.charWidth;
    }
    get defaultLineHeight() {
        return this.viewState.heightOracle.lineHeight;
    }
    get textDirection() {
        return this.viewState.defaultTextDirection;
    }
    textDirectionAt(t) {
        return !this.state.facet(Ts2) || t < this.viewport.from || t > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(t));
    }
    get lineWrapping() {
        return this.viewState.heightOracle.lineWrapping;
    }
    bidiSpans(t) {
        if (t.length > ar2) return Hs2(t.length);
        let e = this.textDirectionAt(t.from);
        for (let s of this.bidiCache)if (s.from == t.from && s.dir == e) return s.order;
        let i1 = Ps2(t.text, e);
        return this.bidiCache.push(new St3(t.from, t.to, e, i1)), i1;
    }
    get hasFocus() {
        var t;
        return (document.hasFocus() || g7.safari && ((t = this.inputState) === null || t === void 0 ? void 0 : t.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    focus() {
        this.observer.ignore(()=>{
            ds1(this.contentDOM), this.docView.updateSelection();
        });
    }
    destroy() {
        for (let t of this.plugins)t.destroy(this);
        this.plugins = [], this.inputState.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
    }
    static scrollIntoView(t, e = {}) {
        return Di2.of(new vt3(typeof t == "number" ? g5.cursor(t) : t, e.y, e.x, e.yMargin, e.xMargin));
    }
    static domEventHandlers(t) {
        return V4.define(()=>({}), {
            eventHandlers: t
        });
    }
    static theme(t, e) {
        let i1 = T6.newName(), s = [
            Ut3.of(i1),
            At3.of(ii2(`.${i1}`, t))
        ];
        return e && e.dark && s.push(ti2.of(!0)), s;
    }
    static baseTheme(t) {
        return lt3.lowest(At3.of(ii2("." + ei2, t, Js1)));
    }
};
C6.styleModule = At3;
C6.inputHandler = Os2;
C6.perLineTextDirection = Ts2;
C6.exceptionSink = Ds2;
C6.updateListener = Ie4;
C6.editable = jt3;
C6.mouseSelectionStyle = As1;
C6.dragMovesSelection = ks2;
C6.clickAddsSelectionRange = Ms2;
C6.decorations = zt3;
C6.atomicRanges = Ls1;
C6.scrollMargins = Es2;
C6.darkTheme = ti2;
C6.contentAttributes = bi2;
C6.editorAttributes = Rs2;
C6.lineWrapping = C6.contentAttributes.of({
    class: "cm-lineWrapping"
});
C6.announce = y4.define();
var ar2 = 4096, Yi2 = {}, St3 = class {
    constructor(t, e, i1, s){
        this.from = t, this.to = e, this.dir = i1, this.order = s;
    }
    static update(t, e) {
        if (e.empty) return t;
        let i1 = [], s = t.length ? t[t.length - 1].dir : R5.LTR;
        for(let r = Math.max(0, t.length - 10); r < t.length; r++){
            let o = t[r];
            o.dir == s && !e.touchesRange(o.from, o.to) && i1.push(new St3(e.mapPos(o.from, 1), e.mapPos(o.to, -1), o.dir, o.order));
        }
        return i1;
    }
};
function Xi2(n, t, e) {
    for(let i1 = n.state.facet(t), s = i1.length - 1; s >= 0; s--){
        let r = i1[s], o = typeof r == "function" ? r(n) : r;
        o && We4(o, e);
    }
    return e;
}
var cr2 = g7.mac ? "mac" : g7.windows ? "win" : g7.linux ? "linux" : "key";
function fr2(n, t) {
    let e = n.split(/-(?!$)/), i1 = e[e.length - 1];
    i1 == "Space" && (i1 = " ");
    let s, r, o, l;
    for(let h = 0; h < e.length - 1; ++h){
        let a = e[h];
        if (/^(cmd|meta|m)$/i.test(a)) l = !0;
        else if (/^a(lt)?$/i.test(a)) s = !0;
        else if (/^(c|ctrl|control)$/i.test(a)) r = !0;
        else if (/^s(hift)?$/i.test(a)) o = !0;
        else if (/^mod$/i.test(a)) t == "mac" ? l = !0 : r = !0;
        else throw new Error("Unrecognized modifier name: " + a);
    }
    return s && (i1 = "Alt-" + i1), r && (i1 = "Ctrl-" + i1), l && (i1 = "Meta-" + i1), o && (i1 = "Shift-" + i1), i1;
}
function ke4(n, t, e) {
    return t.altKey && (n = "Alt-" + n), t.ctrlKey && (n = "Ctrl-" + n), t.metaKey && (n = "Meta-" + n), e !== !1 && t.shiftKey && (n = "Shift-" + n), n;
}
var ur2 = C6.domEventHandlers({
    keydown (n, t) {
        return Qs2(Zs2(t.state), n, t, "editor");
    }
}), dr2 = A3.define({
    enables: ur2
}), Ui1 = new WeakMap;
function Zs2(n) {
    let t = n.facet(dr2), e = Ui1.get(t);
    return e || Ui1.set(t, e = mr2(t.reduce((i1, s)=>i1.concat(s), []))), e;
}
function Jr1(n, t, e) {
    return Qs2(Zs2(n.state), t, n, e);
}
var it4 = null, pr2 = 4e3;
function mr2(n, t = cr2) {
    let e = Object.create(null), i1 = Object.create(null), s = (o, l)=>{
        let h = i1[o];
        if (h == null) i1[o] = l;
        else if (h != l) throw new Error("Key binding " + o + " is used both as a regular binding and as a multi-stroke prefix");
    }, r = (o, l, h, a)=>{
        let c = e[o] || (e[o] = Object.create(null)), f = l.split(/ (?!$)/).map((p1)=>fr2(p1, t));
        for(let p1 = 1; p1 < f.length; p1++){
            let m = f.slice(0, p1).join(" ");
            s(m, !0), c[m] || (c[m] = {
                preventDefault: !0,
                commands: [
                    (b)=>{
                        let y = it4 = {
                            view: b,
                            prefix: m,
                            scope: o
                        };
                        return setTimeout(()=>{
                            it4 == y && (it4 = null);
                        }, pr2), !0;
                    }
                ]
            });
        }
        let d1 = f.join(" ");
        s(d1, !1);
        let u = c[d1] || (c[d1] = {
            preventDefault: !1,
            commands: []
        });
        u.commands.push(h), a && (u.preventDefault = !0);
    };
    for (let o of n){
        let l = o[t] || o.key;
        if (!!l) for (let h of o.scope ? o.scope.split(" ") : [
            "editor"
        ])r(h, l, o.run, o.preventDefault), o.shift && r(h, "Shift-" + l, o.shift, o.preventDefault);
    }
    return e;
}
function Qs2(n, t, e, i1) {
    let s = s4(t), r = s.length == 1 && s != " ", o = "", l = !1;
    it4 && it4.view == e && it4.scope == i1 && (o = it4.prefix + " ", (l = qs2.indexOf(t.keyCode) < 0) && (it4 = null));
    let h = (f)=>{
        if (f) {
            for (let d1 of f.commands)if (d1(e)) return !0;
            f.preventDefault && (l = !0);
        }
        return !1;
    }, a = n[i1], c;
    if (a) {
        if (h(a[o + ke4(s, t, !r)])) return !0;
        if (r && (t.shiftKey || t.altKey || t.metaKey) && (c = t4[t.keyCode]) && c != s) {
            if (h(a[o + ke4(c, t, !0)])) return !0;
        } else if (r && t.shiftKey && h(a[o + ke4(s, t, !0)])) return !0;
    }
    return l;
}
var tn1 = !g7.ios, Ot3 = A3.define({
    combine (n) {
        return ht3(n, {
            cursorBlinkRate: 1200,
            drawRangeCursor: !0
        }, {
            cursorBlinkRate: (t, e)=>Math.min(t, e),
            drawRangeCursor: (t, e)=>t || e
        });
    }
});
function Zr1(n = {}) {
    return [
        Ot3.of(n),
        gr2,
        br2
    ];
}
var me3 = class {
    constructor(t, e, i1, s, r){
        this.left = t, this.top = e, this.width = i1, this.height = s, this.className = r;
    }
    draw() {
        let t = document.createElement("div");
        return t.className = this.className, this.adjust(t), t;
    }
    adjust(t) {
        t.style.left = this.left + "px", t.style.top = this.top + "px", this.width >= 0 && (t.style.width = this.width + "px"), t.style.height = this.height + "px";
    }
    eq(t) {
        return this.left == t.left && this.top == t.top && this.width == t.width && this.height == t.height && this.className == t.className;
    }
}, gr2 = V4.fromClass(class {
    constructor(n){
        this.view = n, this.rangePieces = [], this.cursors = [], this.measureReq = {
            read: this.readPos.bind(this),
            write: this.drawSel.bind(this)
        }, this.selectionLayer = n.scrollDOM.appendChild(document.createElement("div")), this.selectionLayer.className = "cm-selectionLayer", this.selectionLayer.setAttribute("aria-hidden", "true"), this.cursorLayer = n.scrollDOM.appendChild(document.createElement("div")), this.cursorLayer.className = "cm-cursorLayer", this.cursorLayer.setAttribute("aria-hidden", "true"), n.requestMeasure(this.measureReq), this.setBlinkRate();
    }
    setBlinkRate() {
        this.cursorLayer.style.animationDuration = this.view.state.facet(Ot3).cursorBlinkRate + "ms";
    }
    update(n) {
        let t = n.startState.facet(Ot3) != n.state.facet(Ot3);
        (t || n.selectionSet || n.geometryChanged || n.viewportChanged) && this.view.requestMeasure(this.measureReq), n.transactions.some((e)=>e.scrollIntoView) && (this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink"), t && this.setBlinkRate();
    }
    readPos() {
        let { state: n  } = this.view, t = n.facet(Ot3), e = n.selection.ranges.map((s)=>s.empty ? [] : yr2(this.view, s)).reduce((s, r)=>s.concat(r)), i1 = [];
        for (let s of n.selection.ranges){
            let r = s == n.selection.main;
            if (s.empty ? !r || tn1 : t.drawRangeCursor) {
                let o = wr2(this.view, s, r);
                o && i1.push(o);
            }
        }
        return {
            rangePieces: e,
            cursors: i1
        };
    }
    drawSel({ rangePieces: n , cursors: t  }) {
        if (n.length != this.rangePieces.length || n.some((e, i1)=>!e.eq(this.rangePieces[i1]))) {
            this.selectionLayer.textContent = "";
            for (let e of n)this.selectionLayer.appendChild(e.draw());
            this.rangePieces = n;
        }
        if (t.length != this.cursors.length || t.some((e, i1)=>!e.eq(this.cursors[i1]))) {
            let e1 = this.cursorLayer.children;
            if (e1.length !== t.length) {
                this.cursorLayer.textContent = "";
                for (let i1 of t)this.cursorLayer.appendChild(i1.draw());
            } else t.forEach((i1, s)=>i1.adjust(e1[s]));
            this.cursors = t;
        }
    }
    destroy() {
        this.selectionLayer.remove(), this.cursorLayer.remove();
    }
}), en = {
    ".cm-line": {
        "& ::selection": {
            backgroundColor: "transparent !important"
        },
        "&::selection": {
            backgroundColor: "transparent !important"
        }
    }
};
tn1 && (en[".cm-line"].caretColor = "transparent !important");
var br2 = lt3.highest(C6.theme(en));
function sn1(n) {
    let t = n.scrollDOM.getBoundingClientRect();
    return {
        left: (n.textDirection == R5.LTR ? t.left : t.right - n.scrollDOM.clientWidth) - n.scrollDOM.scrollLeft,
        top: t.top - n.scrollDOM.scrollTop
    };
}
function Ji2(n, t, e) {
    let i1 = g5.cursor(t);
    return {
        from: Math.max(e.from, n.moveToLineBoundary(i1, !1, !0).from),
        to: Math.min(e.to, n.moveToLineBoundary(i1, !0, !0).from),
        type: D5.Text
    };
}
function Zi1(n, t) {
    let e = n.lineBlockAt(t);
    if (Array.isArray(e.type)) {
        for (let i1 of e.type)if (i1.to > t || i1.to == t && (i1.to == e.to || i1.type == D5.Text)) return i1;
    }
    return e;
}
function yr2(n, t) {
    if (t.to <= n.viewport.from || t.from >= n.viewport.to) return [];
    let e = Math.max(t.from, n.viewport.from), i1 = Math.min(t.to, n.viewport.to), s = n.textDirection == R5.LTR, r = n.contentDOM, o = r.getBoundingClientRect(), l = sn1(n), h = window.getComputedStyle(r.firstChild), a = o.left + parseInt(h.paddingLeft) + Math.min(0, parseInt(h.textIndent)), c = o.right - parseInt(h.paddingRight), f = Zi1(n, e), d1 = Zi1(n, i1), u = f.type == D5.Text ? f : null, p1 = d1.type == D5.Text ? d1 : null;
    if (n.lineWrapping && (u && (u = Ji2(n, e, u)), p1 && (p1 = Ji2(n, i1, p1))), u && p1 && u.from == p1.from) return b(y(t.from, t.to, u));
    {
        let v = u ? y(t.from, null, u) : k(f, !1), w = p1 ? y(null, t.to, p1) : k(d1, !0), L = [];
        return (u || f).to < (p1 || d1).from - 1 ? L.push(m(a, v.bottom, c, w.top)) : v.bottom < w.top && n.elementAtHeight((v.bottom + w.top) / 2).type == D5.Text && (v.bottom = w.top = (v.bottom + w.top) / 2), b(v).concat(L).concat(b(w));
    }
    function m(v, w, L, J) {
        return new me3(v - l.left, w - l.top - .01, L - v, J - w + .01, "cm-selectionBackground");
    }
    function b({ top: v , bottom: w , horizontal: L  }) {
        let J = [];
        for(let Z = 0; Z < L.length; Z += 2)J.push(m(L[Z], v, L[Z + 1], w));
        return J;
    }
    function y(v, w, L) {
        let J = 1e9, Z = -1e9, $t = [];
        function vi(ht, Q, ft, at, Ct) {
            let tt = n.coordsAtPos(ht, ht == L.to ? -2 : 2), et = n.coordsAtPos(ft, ft == L.from ? 2 : -2);
            J = Math.min(tt.top, et.top, J), Z = Math.max(tt.bottom, et.bottom, Z), Ct == R5.LTR ? $t.push(s && Q ? a : tt.left, s && at ? c : et.right) : $t.push(!s && at ? a : et.left, !s && Q ? c : tt.right);
        }
        let Gt = v ?? L.from, _t = w ?? L.to;
        for (let ht of n.visibleRanges)if (ht.to > Gt && ht.from < _t) for(let Q = Math.max(ht.from, Gt), ft = Math.min(ht.to, _t);;){
            let at = n.state.doc.lineAt(Q);
            for (let Ct of n.bidiSpans(at)){
                let tt = Ct.from + at.from, et = Ct.to + at.from;
                if (tt >= ft) break;
                et > Q && vi(Math.max(tt, Q), v == null && tt <= Gt, Math.min(et, ft), w == null && et >= _t, Ct.dir);
            }
            if (Q = at.to + 1, Q >= ft) break;
        }
        return $t.length == 0 && vi(Gt, v == null, _t, w == null, n.textDirection), {
            top: J,
            bottom: Z,
            horizontal: $t
        };
    }
    function k(v, w) {
        let L = o.top + (w ? v.top : v.bottom);
        return {
            top: L,
            bottom: L,
            horizontal: []
        };
    }
}
function wr2(n, t, e) {
    let i1 = n.coordsAtPos(t.head, t.assoc || 1);
    if (!i1) return null;
    let s = sn1(n);
    return new me3(i1.left - s.left, i1.top - s.top, -1, i1.bottom - i1.top, e ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
}
var nn1 = y4.define({
    map (n, t) {
        return n == null ? null : t.mapPos(n);
    }
}), Tt3 = F3.define({
    create () {
        return null;
    },
    update (n, t) {
        return n != null && (n = t.changes.mapPos(n)), t.effects.reduce((e, i1)=>i1.is(nn1) ? i1.value : e, n);
    }
}), vr1 = V4.fromClass(class {
    constructor(n){
        this.view = n, this.cursor = null, this.measureReq = {
            read: this.readPos.bind(this),
            write: this.drawCursor.bind(this)
        };
    }
    update(n) {
        var t;
        let e = n.state.field(Tt3);
        e == null ? this.cursor != null && ((t = this.cursor) === null || t === void 0 || t.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (n.startState.field(Tt3) != e || n.docChanged || n.geometryChanged) && this.view.requestMeasure(this.measureReq));
    }
    readPos() {
        let n = this.view.state.field(Tt3), t = n != null && this.view.coordsAtPos(n);
        if (!t) return null;
        let e = this.view.scrollDOM.getBoundingClientRect();
        return {
            left: t.left - e.left + this.view.scrollDOM.scrollLeft,
            top: t.top - e.top + this.view.scrollDOM.scrollTop,
            height: t.bottom - t.top
        };
    }
    drawCursor(n) {
        this.cursor && (n ? (this.cursor.style.left = n.left + "px", this.cursor.style.top = n.top + "px", this.cursor.style.height = n.height + "px") : this.cursor.style.left = "-100000px");
    }
    destroy() {
        this.cursor && this.cursor.remove();
    }
    setDropPos(n) {
        this.view.state.field(Tt3) != n && this.view.dispatch({
            effects: nn1.of(n)
        });
    }
}, {
    eventHandlers: {
        dragover (n) {
            this.setDropPos(this.view.posAtCoords({
                x: n.clientX,
                y: n.clientY
            }));
        },
        dragleave (n) {
            (n.target == this.view.contentDOM || !this.view.contentDOM.contains(n.relatedTarget)) && this.setDropPos(null);
        },
        dragend () {
            this.setDropPos(null);
        },
        drop () {
            this.setDropPos(null);
        }
    }
});
function Qr1() {
    return [
        Tt3,
        vr1
    ];
}
function Qi1(n, t, e, i1, s) {
    t.lastIndex = 0;
    for(let r = n.iterRange(e, i1), o = e, l; !r.next().done; o += r.value.length)if (!r.lineBreak) for(; l = t.exec(r.value);)s(o + l.index, o + l.index + l[0].length, l);
}
function xr2(n, t) {
    let e = n.visibleRanges;
    if (e.length == 1 && e[0].from == n.viewport.from && e[0].to == n.viewport.to) return e;
    let i1 = [];
    for (let { from: s , to: r  } of e)s = Math.max(n.state.doc.lineAt(s).from, s - t), r = Math.min(n.state.doc.lineAt(r).to, r + t), i1.length && i1[i1.length - 1].to >= s ? i1[i1.length - 1].to = r : i1.push({
        from: s,
        to: r
    });
    return i1;
}
var ni2 = class {
    constructor(t){
        let { regexp: e , decoration: i1 , boundary: s , maxLength: r = 1e3  } = t;
        if (!e.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
        this.regexp = e, this.getDeco = typeof i1 == "function" ? i1 : ()=>i1, this.boundary = s, this.maxLength = r;
    }
    createDeco(t) {
        let e = new Z2;
        for (let { from: i1 , to: s  } of xr2(t, this.maxLength))Qi1(t.state.doc, this.regexp, i1, s, (r, o, l)=>e.add(r, o, this.getDeco(l, t, r)));
        return e.finish();
    }
    updateDeco(t, e) {
        let i1 = 1e9, s = -1;
        return t.docChanged && t.changes.iterChanges((r, o, l, h)=>{
            h > t.view.viewport.from && l < t.view.viewport.to && (i1 = Math.min(l, i1), s = Math.max(h, s));
        }), t.viewportChanged || s - i1 > 1e3 ? this.createDeco(t.view) : s > -1 ? this.updateRange(t.view, e.map(t.changes), i1, s) : e;
    }
    updateRange(t, e, i1, s) {
        for (let r of t.visibleRanges){
            let o = Math.max(r.from, i1), l = Math.min(r.to, s);
            if (l > o) {
                let h = t.state.doc.lineAt(o), a = h.to < l ? t.state.doc.lineAt(l) : h, c = Math.max(r.from, h.from), f = Math.min(r.to, a.to);
                if (this.boundary) {
                    for(; o > h.from; o--)if (this.boundary.test(h.text[o - 1 - h.from])) {
                        c = o;
                        break;
                    }
                    for(; l < a.to; l++)if (this.boundary.test(a.text[l - a.from])) {
                        f = l;
                        break;
                    }
                }
                let d1 = [], u;
                if (h == a) for(this.regexp.lastIndex = c - h.from; (u = this.regexp.exec(h.text)) && u.index < f - h.from;){
                    let p1 = u.index + h.from;
                    d1.push(this.getDeco(u, t, p1).range(p1, p1 + u[0].length));
                }
                else Qi1(t.state.doc, this.regexp, c, f, (p1, m, b)=>d1.push(this.getDeco(b, t, p1).range(p1, m)));
                e = e.update({
                    filterFrom: c,
                    filterTo: f,
                    filter: (p1, m)=>p1 < c || m > f,
                    add: d1
                });
            }
        }
        return e;
    }
}, ri2 = /x/.unicode != null ? "gu" : "g", Sr2 = new RegExp(`[\0-\b
-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\uFEFF\uFFF9-\uFFFC]`, ri2), Cr2 = {
    0: "null",
    7: "bell",
    8: "backspace",
    10: "newline",
    11: "vertical tab",
    13: "carriage return",
    27: "escape",
    8203: "zero width space",
    8204: "zero width non-joiner",
    8205: "zero width joiner",
    8206: "left-to-right mark",
    8207: "right-to-left mark",
    8232: "line separator",
    8237: "left-to-right override",
    8238: "right-to-left override",
    8233: "paragraph separator",
    65279: "zero width no-break space",
    65532: "object replacement"
}, Ae4 = null;
function Mr1() {
    var n;
    if (Ae4 == null && typeof document < "u" && document.body) {
        let t = document.body.style;
        Ae4 = ((n = t.tabSize) !== null && n !== void 0 ? n : t.MozTabSize) != null;
    }
    return Ae4 || !1;
}
var Zt3 = A3.define({
    combine (n) {
        let t = ht3(n, {
            render: null,
            specialChars: Sr2,
            addSpecialChars: null
        });
        return (t.replaceTabs = !Mr1()) && (t.specialChars = new RegExp("	|" + t.specialChars.source, ri2)), t.addSpecialChars && (t.specialChars = new RegExp(t.specialChars.source + "|" + t.addSpecialChars.source, ri2)), t;
    }
});
function to2(n = {}) {
    return [
        Zt3.of(n),
        kr1()
    ];
}
var ts2 = null;
function kr1() {
    return ts2 || (ts2 = V4.fromClass(class {
        constructor(n){
            this.view = n, this.decorations = M6.none, this.decorationCache = Object.create(null), this.decorator = this.makeDecorator(n.state.facet(Zt3)), this.decorations = this.decorator.createDeco(n);
        }
        makeDecorator(n) {
            return new ni2({
                regexp: n.specialChars,
                decoration: (t, e, i1)=>{
                    let { doc: s  } = e.state, r = oe4(t[0], 0);
                    if (r == 9) {
                        let o = s.lineAt(i1), l = e.state.tabSize, h = ot3(o.text, l, i1 - o.from);
                        return M6.replace({
                            widget: new li2((l - h % l) * this.view.defaultCharacterWidth)
                        });
                    }
                    return this.decorationCache[r] || (this.decorationCache[r] = M6.replace({
                        widget: new oi2(n, r)
                    }));
                },
                boundary: n.replaceTabs ? void 0 : /[^]/
            });
        }
        update(n) {
            let t = n.state.facet(Zt3);
            n.startState.facet(Zt3) != t ? (this.decorator = this.makeDecorator(t), this.decorations = this.decorator.createDeco(n.view)) : this.decorations = this.decorator.updateDeco(n, this.decorations);
        }
    }, {
        decorations: (n)=>n.decorations
    }));
}
var Ar1 = "\u2022";
function Dr1(n) {
    return n >= 32 ? Ar1 : n == 10 ? "\u2424" : String.fromCharCode(9216 + n);
}
var oi2 = class extends X4 {
    constructor(t, e){
        super(), this.options = t, this.code = e;
    }
    eq(t) {
        return t.code == this.code;
    }
    toDOM(t) {
        let e = Dr1(this.code), i1 = t.state.phrase("Control character") + " " + (Cr2[this.code] || "0x" + this.code.toString(16)), s = this.options.render && this.options.render(this.code, i1, e);
        if (s) return s;
        let r = document.createElement("span");
        return r.textContent = e, r.title = i1, r.setAttribute("aria-label", i1), r.className = "cm-specialChar", r;
    }
    ignoreEvent() {
        return !1;
    }
}, li2 = class extends X4 {
    constructor(t){
        super(), this.width = t;
    }
    eq(t) {
        return t.width == this.width;
    }
    toDOM() {
        let t = document.createElement("span");
        return t.textContent = "	", t.className = "cm-tab", t.style.width = this.width + "px", t;
    }
    ignoreEvent() {
        return !1;
    }
}, es2 = V4.fromClass(class {
    constructor(){
        this.height = 1e3, this.attrs = {
            style: "padding-bottom: 1000px"
        };
    }
    update(n) {
        let t = n.view.viewState.editorHeight - n.view.defaultLineHeight;
        t != this.height && (this.height = t, this.attrs = {
            style: `padding-bottom: ${t}px`
        });
    }
});
function io1() {
    return Tr1;
}
var Or1 = M6.line({
    class: "cm-activeLine"
}), Tr1 = V4.fromClass(class {
    constructor(n){
        this.decorations = this.getDeco(n);
    }
    update(n) {
        (n.docChanged || n.selectionSet) && (this.decorations = this.getDeco(n.view));
    }
    getDeco(n) {
        let t = -1, e = [];
        for (let i1 of n.state.selection.ranges){
            if (!i1.empty) return M6.none;
            let s = n.lineBlockAt(i1.head);
            s.from > t && (e.push(Or1.range(s.from)), t = s.from);
        }
        return M6.set(e);
    }
}, {
    decorations: (n)=>n.decorations
});
var ai1 = 2e3;
function Rr2(n, t, e) {
    let i1 = Math.min(t.line, e.line), s = Math.max(t.line, e.line), r = [];
    if (t.off > ai1 || e.off > ai1 || t.col < 0 || e.col < 0) {
        let o = Math.min(t.off, e.off), l = Math.max(t.off, e.off);
        for(let h = i1; h <= s; h++){
            let a = n.doc.line(h);
            a.length <= l && r.push(g5.range(a.from + o, a.to + l));
        }
    } else {
        let o1 = Math.min(t.col, e.col), l1 = Math.max(t.col, e.col);
        for(let h1 = i1; h1 <= s; h1++){
            let a1 = n.doc.line(h1), c = at3(a1.text, o1, n.tabSize, !0);
            if (c > -1) {
                let f = at3(a1.text, l1, n.tabSize);
                r.push(g5.range(a1.from + c, a1.from + f));
            }
        }
    }
    return r;
}
function Lr2(n, t) {
    let e = n.coordsAtPos(n.viewport.from);
    return e ? Math.round(Math.abs((e.left - t) / n.defaultCharacterWidth)) : -1;
}
function is2(n, t) {
    let e = n.posAtCoords({
        x: t.clientX,
        y: t.clientY
    }, !1), i1 = n.state.doc.lineAt(e), s = e - i1.from, r = s > ai1 ? -1 : s == i1.length ? Lr2(n, t.clientX) : ot3(i1.text, n.state.tabSize, e - i1.from);
    return {
        line: i1.number,
        col: r,
        off: s
    };
}
function Er2(n, t) {
    let e = is2(n, t), i1 = n.state.selection;
    return e ? {
        update (s) {
            if (s.docChanged) {
                let r = s.changes.mapPos(s.startState.doc.line(e.line).from), o = s.state.doc.lineAt(r);
                e = {
                    line: o.number,
                    col: e.col,
                    off: Math.min(e.off, o.length)
                }, i1 = i1.map(s.changes);
            }
        },
        get (s, r, o) {
            let l = is2(n, s);
            if (!l) return i1;
            let h = Rr2(n.state, e, l);
            return h.length ? o ? g5.create(h.concat(i1.ranges)) : g5.create(h) : i1;
        }
    } : null;
}
function no1(n) {
    let t = n?.eventFilter || ((e)=>e.altKey && e.button == 0);
    return C6.mouseSelectionStyle.of((e, i1)=>t(i1) ? Er2(e, i1) : null);
}
var Br2 = {
    Alt: [
        18,
        (n)=>n.altKey
    ],
    Control: [
        17,
        (n)=>n.ctrlKey
    ],
    Shift: [
        16,
        (n)=>n.shiftKey
    ],
    Meta: [
        91,
        (n)=>n.metaKey
    ]
}, Pr1 = {
    style: "cursor: crosshair"
};
function ro1(n = {}) {
    let [t, e] = Br2[n.key || "Alt"], i1 = V4.fromClass(class {
        constructor(s){
            this.view = s, this.isDown = !1;
        }
        set(s) {
            this.isDown != s && (this.isDown = s, this.view.update([]));
        }
    }, {
        eventHandlers: {
            keydown (s) {
                this.set(s.keyCode == t || e(s));
            },
            keyup (s) {
                (s.keyCode == t || !e(s)) && this.set(!1);
            }
        }
    });
    return [
        i1,
        C6.contentAttributes.of((s)=>{
            var r;
            return !((r = s.plugin(i1)) === null || r === void 0) && r.isDown ? Pr1 : null;
        })
    ];
}
var De4 = "-10000px", ge4 = class {
    constructor(t, e, i1){
        this.facet = e, this.createTooltipView = i1, this.input = t.state.facet(e), this.tooltips = this.input.filter((s)=>s), this.tooltipViews = this.tooltips.map(i1);
    }
    update(t) {
        let e = t.state.facet(this.facet), i1 = e.filter((r)=>r);
        if (e === this.input) {
            for (let r of this.tooltipViews)r.update && r.update(t);
            return !1;
        }
        let s = [];
        for(let r1 = 0; r1 < i1.length; r1++){
            let o = i1[r1], l = -1;
            if (!!o) {
                for(let h = 0; h < this.tooltips.length; h++){
                    let a = this.tooltips[h];
                    a && a.create == o.create && (l = h);
                }
                if (l < 0) s[r1] = this.createTooltipView(o);
                else {
                    let h1 = s[r1] = this.tooltipViews[l];
                    h1.update && h1.update(t);
                }
            }
        }
        for (let r2 of this.tooltipViews)s.indexOf(r2) < 0 && r2.dom.remove();
        return this.input = e, this.tooltips = i1, this.tooltipViews = s, !0;
    }
};
function Hr1() {
    return {
        top: 0,
        left: 0,
        bottom: innerHeight,
        right: innerWidth
    };
}
var Qt3 = A3.define({
    combine: (n)=>{
        var t, e, i1;
        return {
            position: g7.ios ? "absolute" : ((t = n.find((s)=>s.position)) === null || t === void 0 ? void 0 : t.position) || "fixed",
            parent: ((e = n.find((s)=>s.parent)) === null || e === void 0 ? void 0 : e.parent) || null,
            tooltipSpace: ((i1 = n.find((s)=>s.tooltipSpace)) === null || i1 === void 0 ? void 0 : i1.tooltipSpace) || Hr1
        };
    }
}), wi2 = V4.fromClass(class {
    constructor(n){
        var t;
        this.view = n, this.inView = !0, this.lastTransaction = 0, this.measureTimeout = -1;
        let e = n.state.facet(Qt3);
        this.position = e.position, this.parent = e.parent, this.classes = n.themeClasses, this.createContainer(), this.measureReq = {
            read: this.readMeasure.bind(this),
            write: this.writeMeasure.bind(this),
            key: this
        }, this.manager = new ge4(n, rn1, (i1)=>this.createTooltip(i1)), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((i1)=>{
            Date.now() > this.lastTransaction - 50 && i1.length > 0 && i1[i1.length - 1].intersectionRatio < 1 && this.measureSoon();
        }, {
            threshold: [
                1
            ]
        }) : null, this.observeIntersection(), (t = n.dom.ownerDocument.defaultView) === null || t === void 0 || t.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
    }
    createContainer() {
        this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
    }
    observeIntersection() {
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
            for (let n of this.manager.tooltipViews)this.intersectionObserver.observe(n.dom);
        }
    }
    measureSoon() {
        this.measureTimeout < 0 && (this.measureTimeout = setTimeout(()=>{
            this.measureTimeout = -1, this.maybeMeasure();
        }, 50));
    }
    update(n) {
        n.transactions.length && (this.lastTransaction = Date.now());
        let t = this.manager.update(n);
        t && this.observeIntersection();
        let e = t || n.geometryChanged, i1 = n.state.facet(Qt3);
        if (i1.position != this.position) {
            this.position = i1.position;
            for (let s of this.manager.tooltipViews)s.dom.style.position = this.position;
            e = !0;
        }
        if (i1.parent != this.parent) {
            this.parent && this.container.remove(), this.parent = i1.parent, this.createContainer();
            for (let s1 of this.manager.tooltipViews)this.container.appendChild(s1.dom);
            e = !0;
        } else this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
        e && this.maybeMeasure();
    }
    createTooltip(n) {
        let t = n.create(this.view);
        if (t.dom.classList.add("cm-tooltip"), n.arrow && !t.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
            let e = document.createElement("div");
            e.className = "cm-tooltip-arrow", t.dom.appendChild(e);
        }
        return t.dom.style.position = this.position, t.dom.style.top = De4, this.container.appendChild(t.dom), t.mount && t.mount(this.view), t;
    }
    destroy() {
        var n, t;
        (n = this.view.dom.ownerDocument.defaultView) === null || n === void 0 || n.removeEventListener("resize", this.measureSoon);
        for (let { dom: e  } of this.manager.tooltipViews)e.remove();
        (t = this.intersectionObserver) === null || t === void 0 || t.disconnect(), clearTimeout(this.measureTimeout);
    }
    readMeasure() {
        let n = this.view.dom.getBoundingClientRect();
        return {
            editor: n,
            parent: this.parent ? this.container.getBoundingClientRect() : n,
            pos: this.manager.tooltips.map((t, e)=>{
                let i1 = this.manager.tooltipViews[e];
                return i1.getCoords ? i1.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
            }),
            size: this.manager.tooltipViews.map(({ dom: t  })=>t.getBoundingClientRect()),
            space: this.view.state.facet(Qt3).tooltipSpace(this.view)
        };
    }
    writeMeasure(n) {
        let { editor: t , space: e  } = n, i1 = [];
        for(let s = 0; s < this.manager.tooltips.length; s++){
            let r = this.manager.tooltips[s], o = this.manager.tooltipViews[s], { dom: l  } = o, h = n.pos[s], a = n.size[s];
            if (!h || h.bottom <= Math.max(t.top, e.top) || h.top >= Math.min(t.bottom, e.bottom) || h.right < Math.max(t.left, e.left) - .1 || h.left > Math.min(t.right, e.right) + .1) {
                l.style.top = De4;
                continue;
            }
            let c = r.arrow ? o.dom.querySelector(".cm-tooltip-arrow") : null, f = c ? 7 : 0, d1 = a.right - a.left, u = a.bottom - a.top, p1 = o.offset || Vr1, m = this.view.textDirection == R5.LTR, b = a.width > e.right - e.left ? m ? e.left : e.right - a.width : m ? Math.min(h.left - (c ? 14 : 0) + p1.x, e.right - d1) : Math.max(e.left, h.left - d1 + (c ? 14 : 0) - p1.x), y = !!r.above;
            !r.strictSide && (y ? h.top - (a.bottom - a.top) - p1.y < e.top : h.bottom + (a.bottom - a.top) + p1.y > e.bottom) && y == e.bottom - h.bottom > h.top - e.top && (y = !y);
            let k = y ? h.top - u - f - p1.y : h.bottom + f + p1.y, v = b + d1;
            if (o.overlap !== !0) for (let w of i1)w.left < v && w.right > b && w.top < k + u && w.bottom > k && (k = y ? w.top - u - 2 - f : w.bottom + f + 2);
            this.position == "absolute" ? (l.style.top = k - n.parent.top + "px", l.style.left = b - n.parent.left + "px") : (l.style.top = k + "px", l.style.left = b + "px"), c && (c.style.left = `${h.left + (m ? p1.x : -p1.x) - (b + 14 - 7)}px`), o.overlap !== !0 && i1.push({
                left: b,
                top: k,
                right: v,
                bottom: k + u
            }), l.classList.toggle("cm-tooltip-above", y), l.classList.toggle("cm-tooltip-below", !y), o.positioned && o.positioned();
        }
    }
    maybeMeasure() {
        if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView))) for (let n of this.manager.tooltipViews)n.dom.style.top = De4;
    }
}, {
    eventHandlers: {
        scroll () {
            this.maybeMeasure();
        }
    }
}), Nr1 = C6.baseTheme({
    ".cm-tooltip": {
        zIndex: 100
    },
    "&light .cm-tooltip": {
        border: "1px solid #bbb",
        backgroundColor: "#f5f5f5"
    },
    "&light .cm-tooltip-section:not(:first-child)": {
        borderTop: "1px solid #bbb"
    },
    "&dark .cm-tooltip": {
        backgroundColor: "#333338",
        color: "white"
    },
    ".cm-tooltip-arrow": {
        height: `${7}px`,
        width: `${7 * 2}px`,
        position: "absolute",
        zIndex: -1,
        overflow: "hidden",
        "&:before, &:after": {
            content: "''",
            position: "absolute",
            width: 0,
            height: 0,
            borderLeft: `${7}px solid transparent`,
            borderRight: `${7}px solid transparent`
        },
        ".cm-tooltip-above &": {
            bottom: `-${7}px`,
            "&:before": {
                borderTop: `${7}px solid #bbb`
            },
            "&:after": {
                borderTop: `${7}px solid #f5f5f5`,
                bottom: "1px"
            }
        },
        ".cm-tooltip-below &": {
            top: `-${7}px`,
            "&:before": {
                borderBottom: `${7}px solid #bbb`
            },
            "&:after": {
                borderBottom: `${7}px solid #f5f5f5`,
                top: "1px"
            }
        }
    },
    "&dark .cm-tooltip .cm-tooltip-arrow": {
        "&:before": {
            borderTopColor: "#333338",
            borderBottomColor: "#333338"
        },
        "&:after": {
            borderTopColor: "transparent",
            borderBottomColor: "transparent"
        }
    }
}), Vr1 = {
    x: 0,
    y: 0
}, rn1 = A3.define({
    enables: [
        wi2,
        Nr1
    ]
}), It3 = A3.define(), qt3 = class {
    constructor(t){
        this.view = t, this.mounted = !1, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new ge4(t, It3, (e)=>this.createHostedView(e));
    }
    static create(t) {
        return new qt3(t);
    }
    createHostedView(t) {
        let e = t.create(this.view);
        return e.dom.classList.add("cm-tooltip-section"), this.dom.appendChild(e.dom), this.mounted && e.mount && e.mount(this.view), e;
    }
    mount(t) {
        for (let e of this.manager.tooltipViews)e.mount && e.mount(t);
        this.mounted = !0;
    }
    positioned() {
        for (let t of this.manager.tooltipViews)t.positioned && t.positioned();
    }
    update(t) {
        this.manager.update(t);
    }
}, Wr1 = rn1.compute([
    It3
], (n)=>{
    let t = n.facet(It3).filter((e)=>e);
    return t.length === 0 ? null : {
        pos: Math.min(...t.map((e)=>e.pos)),
        end: Math.max(...t.filter((e)=>e.end != null).map((e)=>e.end)),
        create: qt3.create,
        above: t[0].above,
        arrow: t.some((e)=>e.arrow)
    };
}), ci2 = class {
    constructor(t, e, i1, s, r){
        this.view = t, this.source = e, this.field = i1, this.setHover = s, this.hoverTime = r, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = {
            x: 0,
            y: 0,
            target: t.dom,
            time: 0
        }, this.checkHover = this.checkHover.bind(this), t.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), t.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
    }
    update() {
        this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(()=>this.startHover(), 20));
    }
    get active() {
        return this.view.state.field(this.field);
    }
    checkHover() {
        if (this.hoverTimeout = -1, this.active) return;
        let t = Date.now() - this.lastMove.time;
        t < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - t) : this.startHover();
    }
    startHover() {
        clearTimeout(this.restartTimeout);
        let { lastMove: t  } = this, e = this.view.contentDOM.contains(t.target) ? this.view.posAtCoords(t) : null;
        if (e == null) return;
        let i1 = this.view.coordsAtPos(e);
        if (i1 == null || t.y < i1.top || t.y > i1.bottom || t.x < i1.left - this.view.defaultCharacterWidth || t.x > i1.right + this.view.defaultCharacterWidth) return;
        let s = this.view.bidiSpans(this.view.state.doc.lineAt(e)).find((l)=>l.from <= e && l.to >= e), r = s && s.dir == R5.RTL ? -1 : 1, o = this.source(this.view, e, t.x < i1.left ? -r : r);
        if (o?.then) {
            let l = this.pending = {
                pos: e
            };
            o.then((h)=>{
                this.pending == l && (this.pending = null, h && this.view.dispatch({
                    effects: this.setHover.of(h)
                }));
            }, (h)=>nt4(this.view.state, h, "hover tooltip"));
        } else o && this.view.dispatch({
            effects: this.setHover.of(o)
        });
    }
    mousemove(t) {
        var e;
        this.lastMove = {
            x: t.clientX,
            y: t.clientY,
            target: t.target,
            time: Date.now()
        }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
        let i1 = this.active;
        if (i1 && !zr2(this.lastMove.target) || this.pending) {
            let { pos: s  } = i1 || this.pending, r = (e = i1?.end) !== null && e !== void 0 ? e : s;
            (s == r ? this.view.posAtCoords(this.lastMove) != s : !Fr1(this.view, s, r, t.clientX, t.clientY, 6)) && (this.view.dispatch({
                effects: this.setHover.of(null)
            }), this.pending = null);
        }
    }
    mouseleave() {
        clearTimeout(this.hoverTimeout), this.hoverTimeout = -1, this.active && this.view.dispatch({
            effects: this.setHover.of(null)
        });
    }
    destroy() {
        clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
};
function zr2(n) {
    for(let t = n; t; t = t.parentNode)if (t.nodeType == 1 && t.classList.contains("cm-tooltip")) return !0;
    return !1;
}
function Fr1(n, t, e, i1, s, r) {
    let o = document.createRange(), l = n.domAtPos(t), h = n.domAtPos(e);
    o.setEnd(h.node, h.offset), o.setStart(l.node, l.offset);
    let a = o.getClientRects();
    o.detach();
    for(let c = 0; c < a.length; c++){
        let f = a[c];
        if (Math.max(f.top - s, s - f.bottom, f.left - i1, i1 - f.right) <= r) return !0;
    }
    return !1;
}
function lo1(n, t = {}) {
    let e = y4.define(), i1 = F3.define({
        create () {
            return null;
        },
        update (s, r) {
            if (s && (t.hideOnChange && (r.docChanged || r.selection) || t.hideOn && t.hideOn(r, s))) return null;
            if (s && r.docChanged) {
                let o = r.changes.mapPos(s.pos, -1, M5.TrackDel);
                if (o == null) return null;
                let l = Object.assign(Object.create(null), s);
                l.pos = o, s.end != null && (l.end = r.changes.mapPos(s.end)), s = l;
            }
            for (let o1 of r.effects)o1.is(e) && (s = o1.value), o1.is(on1) && (s = null);
            return s;
        },
        provide: (s)=>It3.from(s)
    });
    return [
        i1,
        V4.define((s)=>new ci2(s, n, i1, e, t.hoverTime || 300)),
        Wr1
    ];
}
function ho1(n, t) {
    let e = n.plugin(wi2);
    if (!e) return null;
    let i1 = e.manager.tooltips.indexOf(t);
    return i1 < 0 ? null : e.manager.tooltipViews[i1];
}
var on1 = y4.define(), co2 = on1.of(null);
var fi2 = A3.define({
    combine (n) {
        let t, e;
        for (let i1 of n)t = t || i1.topContainer, e = e || i1.bottomContainer;
        return {
            topContainer: t,
            bottomContainer: e
        };
    }
});
function po2(n, t) {
    let e = n.plugin(ln1), i1 = e ? e.specs.indexOf(t) : -1;
    return i1 > -1 ? e.panels[i1] : null;
}
var ln1 = V4.fromClass(class {
    constructor(n){
        this.input = n.state.facet(ns2), this.specs = this.input.filter((e)=>e), this.panels = this.specs.map((e)=>e(n));
        let t = n.state.facet(fi2);
        this.top = new pt3(n, !0, t.topContainer), this.bottom = new pt3(n, !1, t.bottomContainer), this.top.sync(this.panels.filter((e)=>e.top)), this.bottom.sync(this.panels.filter((e)=>!e.top));
        for (let e of this.panels)e.dom.classList.add("cm-panel"), e.mount && e.mount();
    }
    update(n) {
        let t = n.state.facet(fi2);
        this.top.container != t.topContainer && (this.top.sync([]), this.top = new pt3(n.view, !0, t.topContainer)), this.bottom.container != t.bottomContainer && (this.bottom.sync([]), this.bottom = new pt3(n.view, !1, t.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
        let e = n.state.facet(ns2);
        if (e != this.input) {
            let i1 = e.filter((h)=>h), s = [], r = [], o = [], l = [];
            for (let h of i1){
                let a = this.specs.indexOf(h), c;
                a < 0 ? (c = h(n.view), l.push(c)) : (c = this.panels[a], c.update && c.update(n)), s.push(c), (c.top ? r : o).push(c);
            }
            this.specs = i1, this.panels = s, this.top.sync(r), this.bottom.sync(o);
            for (let h1 of l)h1.dom.classList.add("cm-panel"), h1.mount && h1.mount();
        } else for (let i11 of this.panels)i11.update && i11.update(n);
    }
    destroy() {
        this.top.sync([]), this.bottom.sync([]);
    }
}, {
    provide: (n)=>C6.scrollMargins.of((t)=>{
            let e = t.plugin(n);
            return e && {
                top: e.top.scrollMargin(),
                bottom: e.bottom.scrollMargin()
            };
        })
}), pt3 = class {
    constructor(t, e, i1){
        this.view = t, this.top = e, this.container = i1, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
    }
    sync(t) {
        for (let e of this.panels)e.destroy && t.indexOf(e) < 0 && e.destroy();
        this.panels = t, this.syncDOM();
    }
    syncDOM() {
        if (this.panels.length == 0) {
            this.dom && (this.dom.remove(), this.dom = void 0);
            return;
        }
        if (!this.dom) {
            this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
            let e = this.container || this.view.dom;
            e.insertBefore(this.dom, this.top ? e.firstChild : null);
        }
        let t = this.dom.firstChild;
        for (let e1 of this.panels)if (e1.dom.parentNode == this.dom) {
            for(; t != e1.dom;)t = ss2(t);
            t = t.nextSibling;
        } else this.dom.insertBefore(e1.dom, t);
        for(; t;)t = ss2(t);
    }
    scrollMargin() {
        return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
    syncClasses() {
        if (!(!this.container || this.classes == this.view.themeClasses)) {
            for (let t of this.classes.split(" "))t && this.container.classList.remove(t);
            for (let t1 of (this.classes = this.view.themeClasses).split(" "))t1 && this.container.classList.add(t1);
        }
    }
};
function ss2(n) {
    let t = n.nextSibling;
    return n.remove(), t;
}
var ns2 = A3.define({
    enables: ln1
}), _4 = class extends j3 {
    compare(t) {
        return this == t || this.constructor == t.constructor && this.eq(t);
    }
    eq(t) {
        return !1;
    }
    destroy(t) {}
};
_4.prototype.elementClass = "";
_4.prototype.toDOM = void 0;
_4.prototype.mapMode = M5.TrackBefore;
_4.prototype.startSide = _4.prototype.endSide = -1;
_4.prototype.point = !0;
var te5 = A3.define(), Ir1 = {
    class: "",
    renderEmptyElements: !1,
    elementStyle: "",
    markers: ()=>P3.empty,
    lineMarker: ()=>null,
    lineMarkerChange: null,
    initialSpacer: null,
    updateSpacer: null,
    domEventHandlers: {}
}, Pt3 = A3.define();
function mo2(n) {
    return [
        hn1(),
        Pt3.of(Object.assign(Object.assign({}, Ir1), n))
    ];
}
var ui2 = A3.define({
    combine: (n)=>n.some((t)=>t)
});
function hn1(n) {
    let t = [
        qr1
    ];
    return n && n.fixed === !1 && t.push(ui2.of(!0)), t;
}
var qr1 = V4.fromClass(class {
    constructor(n){
        this.view = n, this.prevViewport = n.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight + "px", this.gutters = n.state.facet(Pt3).map((t)=>new be4(n, t));
        for (let t of this.gutters)this.dom.appendChild(t.dom);
        this.fixed = !n.state.facet(ui2), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(!1), n.scrollDOM.insertBefore(this.dom, n.contentDOM);
    }
    update(n) {
        if (this.updateGutters(n)) {
            let t = this.prevViewport, e = n.view.viewport, i1 = Math.min(t.to, e.to) - Math.max(t.from, e.from);
            this.syncGutters(i1 < (e.to - e.from) * .8);
        }
        n.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight + "px"), this.view.state.facet(ui2) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = n.view.viewport;
    }
    syncGutters(n) {
        let t = this.dom.nextSibling;
        n && this.dom.remove();
        let e = P3.iter(this.view.state.facet(te5), this.view.viewport.from), i1 = [], s = this.gutters.map((r)=>new di2(r, this.view.viewport, -this.view.documentPadding.top));
        for (let r of this.view.viewportLineBlocks){
            let o;
            if (Array.isArray(r.type)) {
                for (let l of r.type)if (l.type == D5.Text) {
                    o = l;
                    break;
                }
            } else o = r.type == D5.Text ? r : void 0;
            if (!!o) {
                i1.length && (i1 = []), an1(e, i1, r.from);
                for (let l1 of s)l1.line(this.view, o, i1);
            }
        }
        for (let r1 of s)r1.finish();
        n && this.view.scrollDOM.insertBefore(this.dom, t);
    }
    updateGutters(n) {
        let t = n.startState.facet(Pt3), e = n.state.facet(Pt3), i1 = n.docChanged || n.heightChanged || n.viewportChanged || !P3.eq(n.startState.facet(te5), n.state.facet(te5), n.view.viewport.from, n.view.viewport.to);
        if (t == e) for (let s of this.gutters)s.update(n) && (i1 = !0);
        else {
            i1 = !0;
            let s1 = [];
            for (let r of e){
                let o = t.indexOf(r);
                o < 0 ? s1.push(new be4(this.view, r)) : (this.gutters[o].update(n), s1.push(this.gutters[o]));
            }
            for (let r1 of this.gutters)r1.dom.remove(), s1.indexOf(r1) < 0 && r1.destroy();
            for (let r2 of s1)this.dom.appendChild(r2.dom);
            this.gutters = s1;
        }
        return i1;
    }
    destroy() {
        for (let n of this.gutters)n.destroy();
        this.dom.remove();
    }
}, {
    provide: (n)=>C6.scrollMargins.of((t)=>{
            let e = t.plugin(n);
            return !e || e.gutters.length == 0 || !e.fixed ? null : t.textDirection == R5.LTR ? {
                left: e.dom.offsetWidth
            } : {
                right: e.dom.offsetWidth
            };
        })
});
function rs2(n) {
    return Array.isArray(n) ? n : [
        n
    ];
}
function an1(n, t, e) {
    for(; n.value && n.from <= e;)n.from == e && t.push(n.value), n.next();
}
var di2 = class {
    constructor(t, e, i1){
        this.gutter = t, this.height = i1, this.localMarkers = [], this.i = 0, this.cursor = P3.iter(t.markers, e.from);
    }
    line(t, e, i1) {
        this.localMarkers.length && (this.localMarkers = []), an1(this.cursor, this.localMarkers, e.from);
        let s = i1.length ? this.localMarkers.concat(i1) : this.localMarkers, r = this.gutter.config.lineMarker(t, e, s);
        r && s.unshift(r);
        let o = this.gutter;
        if (s.length == 0 && !o.config.renderEmptyElements) return;
        let l = e.top - this.height;
        if (this.i == o.elements.length) {
            let h = new ye3(t, e.height, l, s);
            o.elements.push(h), o.dom.appendChild(h.dom);
        } else o.elements[this.i].update(t, e.height, l, s);
        this.height = e.bottom, this.i++;
    }
    finish() {
        let t = this.gutter;
        for(; t.elements.length > this.i;){
            let e = t.elements.pop();
            t.dom.removeChild(e.dom), e.destroy();
        }
    }
}, be4 = class {
    constructor(t, e){
        this.view = t, this.config = e, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
        for(let i1 in e.domEventHandlers)this.dom.addEventListener(i1, (s)=>{
            let r = t.lineBlockAtHeight(s.clientY - t.documentTop);
            e.domEventHandlers[i1](t, r, s) && s.preventDefault();
        });
        this.markers = rs2(e.markers(t)), e.initialSpacer && (this.spacer = new ye3(t, 0, 0, [
            e.initialSpacer(t)
        ]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
    }
    update(t) {
        let e = this.markers;
        if (this.markers = rs2(this.config.markers(t.view)), this.spacer && this.config.updateSpacer) {
            let s = this.config.updateSpacer(this.spacer.markers[0], t);
            s != this.spacer.markers[0] && this.spacer.update(t.view, 0, 0, [
                s
            ]);
        }
        let i1 = t.view.viewport;
        return !P3.eq(this.markers, e, i1.from, i1.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(t) : !1);
    }
    destroy() {
        for (let t of this.elements)t.destroy();
    }
}, ye3 = class {
    constructor(t, e, i1, s){
        this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(t, e, i1, s);
    }
    update(t, e, i1, s) {
        this.height != e && (this.dom.style.height = (this.height = e) + "px"), this.above != i1 && (this.dom.style.marginTop = (this.above = i1) ? i1 + "px" : ""), Kr1(this.markers, s) || this.setMarkers(t, s);
    }
    setMarkers(t, e) {
        let i1 = "cm-gutterElement", s = this.dom.firstChild;
        for(let r = 0, o = 0;;){
            let l = o, h = r < e.length ? e[r++] : null, a = !1;
            if (h) {
                let c = h.elementClass;
                c && (i1 += " " + c);
                for(let f = o; f < this.markers.length; f++)if (this.markers[f].compare(h)) {
                    l = f, a = !0;
                    break;
                }
            } else l = this.markers.length;
            for(; o < l;){
                let c1 = this.markers[o++];
                if (c1.toDOM) {
                    c1.destroy(s);
                    let f1 = s.nextSibling;
                    s.remove(), s = f1;
                }
            }
            if (!h) break;
            h.toDOM && (a ? s = s.nextSibling : this.dom.insertBefore(h.toDOM(t), s)), a && o++;
        }
        this.dom.className = i1, this.markers = e;
    }
    destroy() {
        this.setMarkers(null, []);
    }
};
function Kr1(n, t) {
    if (n.length != t.length) return !1;
    for(let e = 0; e < n.length; e++)if (!n[e].compare(t[e])) return !1;
    return !0;
}
var jr1 = A3.define(), mt4 = A3.define({
    combine (n) {
        return ht3(n, {
            formatNumber: String,
            domEventHandlers: {}
        }, {
            domEventHandlers (t, e) {
                let i1 = Object.assign({}, t);
                for(let s in e){
                    let r = i1[s], o = e[s];
                    i1[s] = r ? (l, h, a)=>r(l, h, a) || o(l, h, a) : o;
                }
                return i1;
            }
        });
    }
}), Ht3 = class extends _4 {
    constructor(t){
        super(), this.number = t;
    }
    eq(t) {
        return this.number == t.number;
    }
    toDOM() {
        return document.createTextNode(this.number);
    }
};
function Oe4(n, t) {
    return n.state.facet(mt4).formatNumber(t, n.state);
}
var $r2 = Pt3.compute([
    mt4
], (n)=>({
        class: "cm-lineNumbers",
        renderEmptyElements: !1,
        markers (t) {
            return t.state.facet(jr1);
        },
        lineMarker (t, e, i1) {
            return i1.some((s)=>s.toDOM) ? null : new Ht3(Oe4(t, t.state.doc.lineAt(e.from).number));
        },
        lineMarkerChange: (t)=>t.startState.facet(mt4) != t.state.facet(mt4),
        initialSpacer (t) {
            return new Ht3(Oe4(t, os2(t.state.doc.lines)));
        },
        updateSpacer (t, e) {
            let i1 = Oe4(e.view, os2(e.view.state.doc.lines));
            return i1 == t.number ? t : new Ht3(i1);
        },
        domEventHandlers: n.facet(mt4).domEventHandlers
    }));
function go1(n = {}) {
    return [
        mt4.of(n),
        hn1(),
        $r2
    ];
}
function os2(n) {
    let t = 9;
    for(; t < n;)t = t * 10 + 9;
    return t;
}
var Gr1 = new class extends _4 {
    constructor(){
        super(...arguments), this.elementClass = "cm-activeLineGutter";
    }
}, _r2 = te5.compute([
    "selection"
], (n)=>{
    let t = [], e = -1;
    for (let i1 of n.selection.ranges)if (i1.empty) {
        let s = n.doc.lineAt(i1.head).from;
        s > e && (e = s, t.push(Gr1.range(s)));
    }
    return P3.of(t);
});
function bo1() {
    return _r2;
}
var Ce5 = 0, B6 = class {
    constructor(e, t){
        this.from = e, this.to = t;
    }
}, w5 = class {
    constructor(e = {}){
        this.id = Ce5++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (()=>{
            throw new Error("This node type doesn't define a deserialize function");
        });
    }
    add(e) {
        if (this.perNode) throw new RangeError("Can't add per-node props to node types");
        return typeof e != "function" && (e = N4.match(e)), (t)=>{
            let r = e(t);
            return r === void 0 ? null : [
                this,
                r
            ];
        };
    }
};
w5.closedBy = new w5({
    deserialize: (h)=>h.split(" ")
});
w5.openedBy = new w5({
    deserialize: (h)=>h.split(" ")
});
w5.group = new w5({
    deserialize: (h)=>h.split(" ")
});
w5.contextHash = new w5({
    perNode: !0
});
w5.lookAhead = new w5({
    perNode: !0
});
w5.mounted = new w5({
    perNode: !0
});
var _e5 = Object.create(null), N4 = class {
    constructor(e, t, r, i1 = 0){
        this.name = e, this.props = t, this.id = r, this.flags = i1;
    }
    static define(e) {
        let t = e.props && e.props.length ? Object.create(null) : _e5, r = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), i1 = new N4(e.name || "", t, e.id, r);
        if (e.props) {
            for (let n of e.props)if (Array.isArray(n) || (n = n(i1)), n) {
                if (n[0].perNode) throw new RangeError("Can't store a per-node prop on a node type");
                t[n[0].id] = n[1];
            }
        }
        return i1;
    }
    prop(e) {
        return this.props[e.id];
    }
    get isTop() {
        return (this.flags & 1) > 0;
    }
    get isSkipped() {
        return (this.flags & 2) > 0;
    }
    get isError() {
        return (this.flags & 4) > 0;
    }
    get isAnonymous() {
        return (this.flags & 8) > 0;
    }
    is(e) {
        if (typeof e == "string") {
            if (this.name == e) return !0;
            let t = this.prop(w5.group);
            return t ? t.indexOf(e) > -1 : !1;
        }
        return this.id == e;
    }
    static match(e) {
        let t = Object.create(null);
        for(let r in e)for (let i1 of r.split(" "))t[i1] = e[r];
        return (r)=>{
            for(let i1 = r.prop(w5.group), n = -1; n < (i1 ? i1.length : 0); n++){
                let s = t[n < 0 ? r.name : i1[n]];
                if (s) return s;
            }
        };
    }
};
N4.none = new N4("", Object.create(null), 0, 8);
var Z3 = class {
    constructor(e){
        this.types = e;
        for(let t = 0; t < e.length; t++)if (e[t].id != t) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
    }
    extend(...e) {
        let t = [];
        for (let r of this.types){
            let i1 = null;
            for (let n of e){
                let s = n(r);
                s && (i1 || (i1 = Object.assign({}, r.props)), i1[s[0].id] = s[1]);
            }
            t.push(i1 ? new N4(r.name, i1, r.id, r.flags) : r);
        }
        return new Z3(t);
    }
}, X5 = new WeakMap, ge5 = new WeakMap, A5;
(function(h) {
    h[h.ExcludeBuffers = 1] = "ExcludeBuffers", h[h.IncludeAnonymous = 2] = "IncludeAnonymous", h[h.IgnoreMounts = 4] = "IgnoreMounts", h[h.IgnoreOverlays = 8] = "IgnoreOverlays";
})(A5 || (A5 = {}));
var P5 = class {
    constructor(e, t, r, i1, n){
        if (this.type = e, this.children = t, this.positions = r, this.length = i1, this.props = null, n && n.length) {
            this.props = Object.create(null);
            for (let [s, l] of n)this.props[typeof s == "number" ? s : s.id] = l;
        }
    }
    toString() {
        let e = this.prop(w5.mounted);
        if (e && !e.overlay) return e.tree.toString();
        let t = "";
        for (let r of this.children){
            let i1 = r.toString();
            i1 && (t && (t += ","), t += i1);
        }
        return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t;
    }
    cursor(e = 0) {
        return new V5(this.topNode, e);
    }
    cursorAt(e, t = 0, r = 0) {
        let i1 = X5.get(this) || this.topNode, n = new V5(i1);
        return n.moveTo(e, t), X5.set(this, n._tree), n;
    }
    get topNode() {
        return new I4(this, 0, 0, null);
    }
    resolve(e, t = 0) {
        let r = q5(X5.get(this) || this.topNode, e, t, !1);
        return X5.set(this, r), r;
    }
    resolveInner(e, t = 0) {
        let r = q5(ge5.get(this) || this.topNode, e, t, !0);
        return ge5.set(this, r), r;
    }
    iterate(e) {
        let { enter: t , leave: r , from: i1 = 0 , to: n = this.length  } = e;
        for(let s = this.cursor((e.mode || 0) | A5.IncludeAnonymous);;){
            let l = !1;
            if (s.from <= n && s.to >= i1 && (s.type.isAnonymous || t(s) !== !1)) {
                if (s.firstChild()) continue;
                l = !0;
            }
            for(; l && r && !s.type.isAnonymous && r(s), !s.nextSibling();){
                if (!s.parent()) return;
                l = !0;
            }
        }
    }
    prop(e) {
        return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
    }
    get propValues() {
        let e = [];
        if (this.props) for(let t in this.props)e.push([
            +t,
            this.props[t]
        ]);
        return e;
    }
    balance(e = {}) {
        return this.children.length <= 8 ? this : pe4(N4.none, this.children, this.positions, 0, this.children.length, 0, this.length, (t, r, i1)=>new P5(this.type, t, r, i1, this.propValues), e.makeTree || ((t, r, i1)=>new P5(N4.none, t, r, i1)));
    }
    static build(e) {
        return Se5(e);
    }
};
P5.empty = new P5(N4.none, [], [], 0);
var K7 = class {
    constructor(e, t){
        this.buffer = e, this.index = t;
    }
    get id() {
        return this.buffer[this.index - 4];
    }
    get start() {
        return this.buffer[this.index - 3];
    }
    get end() {
        return this.buffer[this.index - 2];
    }
    get size() {
        return this.buffer[this.index - 1];
    }
    get pos() {
        return this.index;
    }
    next() {
        this.index -= 4;
    }
    fork() {
        return new K7(this.buffer, this.index);
    }
}, T8 = class {
    constructor(e, t, r){
        this.buffer = e, this.length = t, this.set = r;
    }
    get type() {
        return N4.none;
    }
    toString() {
        let e = [];
        for(let t = 0; t < this.buffer.length;)e.push(this.childString(t)), t = this.buffer[t + 3];
        return e.join(",");
    }
    childString(e) {
        let t = this.buffer[e], r = this.buffer[e + 3], i1 = this.set.types[t], n = i1.name;
        if (/\W/.test(n) && !i1.isError && (n = JSON.stringify(n)), e += 4, r == e) return n;
        let s = [];
        for(; e < r;)s.push(this.childString(e)), e = this.buffer[e + 3];
        return n + "(" + s.join(",") + ")";
    }
    findChild(e, t, r, i1, n) {
        let { buffer: s  } = this, l = -1;
        for(let f = e; f != t && !(ke5(n, i1, s[f + 1], s[f + 2]) && (l = f, r > 0)); f = s[f + 3]);
        return l;
    }
    slice(e, t, r, i1) {
        let n = this.buffer, s = new Uint16Array(t - e);
        for(let l = e, f = 0; l < t;)s[f++] = n[l++], s[f++] = n[l++] - r, s[f++] = n[l++] - r, s[f++] = n[l++] - e;
        return new T8(s, i1 - r, this.set);
    }
};
function ke5(h, e, t, r) {
    switch(h){
        case -2:
            return t < e;
        case -1:
            return r >= e && t < e;
        case 0:
            return t < e && r > e;
        case 1:
            return t <= e && r > e;
        case 2:
            return r > e;
        case 4:
            return !0;
    }
}
function Ae5(h, e) {
    let t = h.childBefore(e);
    for(; t;){
        let r = t.lastChild;
        if (!r || r.to != t.to) break;
        r.type.isError && r.from == r.to ? (h = t, t = r.prevSibling) : t = r;
    }
    return h;
}
function q5(h, e, t, r) {
    for(var i1; h.from == h.to || (t < 1 ? h.from >= e : h.from > e) || (t > -1 ? h.to <= e : h.to < e);){
        let s = !r && h instanceof I4 && h.index < 0 ? null : h.parent;
        if (!s) return h;
        h = s;
    }
    let n = r ? 0 : A5.IgnoreOverlays;
    if (r) for(let s1 = h, l = s1.parent; l; s1 = l, l = s1.parent)s1 instanceof I4 && s1.index < 0 && ((i1 = l.enter(e, t, n)) === null || i1 === void 0 ? void 0 : i1.from) != s1.from && (h = l);
    for(;;){
        let s2 = h.enter(e, t, n);
        if (!s2) return h;
        h = s2;
    }
}
var I4 = class {
    constructor(e, t, r, i1){
        this._tree = e, this.from = t, this.index = r, this._parent = i1;
    }
    get type() {
        return this._tree.type;
    }
    get name() {
        return this._tree.type.name;
    }
    get to() {
        return this.from + this._tree.length;
    }
    nextChild(e, t, r, i1, n = 0) {
        for(let s = this;;){
            for(let { children: l , positions: f  } = s._tree, u = t > 0 ? l.length : -1; e != u; e += t){
                let o = l[e], c = f[e] + s.from;
                if (!!ke5(i1, r, c, c + o.length)) {
                    if (o instanceof T8) {
                        if (n & A5.ExcludeBuffers) continue;
                        let a = o.findChild(0, o.buffer.length, t, r - c, i1);
                        if (a > -1) return new M7(new se5(s, o, e, c), null, a);
                    } else if (n & A5.IncludeAnonymous || !o.type.isAnonymous || ae5(o)) {
                        let a1;
                        if (!(n & A5.IgnoreMounts) && o.props && (a1 = o.prop(w5.mounted)) && !a1.overlay) return new I4(a1.tree, c, e, s);
                        let y = new I4(o, c, e, s);
                        return n & A5.IncludeAnonymous || !y.type.isAnonymous ? y : y.nextChild(t < 0 ? o.children.length - 1 : 0, t, r, i1);
                    }
                }
            }
            if (n & A5.IncludeAnonymous || !s.type.isAnonymous || (s.index >= 0 ? e = s.index + t : e = t < 0 ? -1 : s._parent._tree.children.length, s = s._parent, !s)) return null;
        }
    }
    get firstChild() {
        return this.nextChild(0, 1, 0, 4);
    }
    get lastChild() {
        return this.nextChild(this._tree.children.length - 1, -1, 0, 4);
    }
    childAfter(e) {
        return this.nextChild(0, 1, e, 2);
    }
    childBefore(e) {
        return this.nextChild(this._tree.children.length - 1, -1, e, -2);
    }
    enter(e, t, r = 0) {
        let i1;
        if (!(r & A5.IgnoreOverlays) && (i1 = this._tree.prop(w5.mounted)) && i1.overlay) {
            let n = e - this.from;
            for (let { from: s , to: l  } of i1.overlay)if ((t > 0 ? s <= n : s < n) && (t < 0 ? l >= n : l > n)) return new I4(i1.tree, i1.overlay[0].from + this.from, -1, this);
        }
        return this.nextChild(0, 1, e, t, r);
    }
    nextSignificantParent() {
        let e = this;
        for(; e.type.isAnonymous && e._parent;)e = e._parent;
        return e;
    }
    get parent() {
        return this._parent ? this._parent.nextSignificantParent() : null;
    }
    get nextSibling() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4) : null;
    }
    get prevSibling() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4) : null;
    }
    cursor(e = 0) {
        return new V5(this, e);
    }
    get tree() {
        return this._tree;
    }
    toTree() {
        return this._tree;
    }
    resolve(e, t = 0) {
        return q5(this, e, t, !1);
    }
    resolveInner(e, t = 0) {
        return q5(this, e, t, !0);
    }
    enterUnfinishedNodesBefore(e) {
        return Ae5(this, e);
    }
    getChild(e, t = null, r = null) {
        let i1 = ee4(this, e, t, r);
        return i1.length ? i1[0] : null;
    }
    getChildren(e, t = null, r = null) {
        return ee4(this, e, t, r);
    }
    toString() {
        return this._tree.toString();
    }
    get node() {
        return this;
    }
    matchContext(e) {
        return te6(this, e);
    }
};
function ee4(h, e, t, r) {
    let i1 = h.cursor(), n = [];
    if (!i1.firstChild()) return n;
    if (t != null) {
        for(; !i1.type.is(t);)if (!i1.nextSibling()) return n;
    }
    for(;;){
        if (r != null && i1.type.is(r)) return n;
        if (i1.type.is(e) && n.push(i1.node), !i1.nextSibling()) return r == null ? n : [];
    }
}
function te6(h, e, t = e.length - 1) {
    for(let r = h.parent; t >= 0; r = r.parent){
        if (!r) return !1;
        if (!r.type.isAnonymous) {
            if (e[t] && e[t] != r.name) return !1;
            t--;
        }
    }
    return !0;
}
var se5 = class {
    constructor(e, t, r, i1){
        this.parent = e, this.buffer = t, this.index = r, this.start = i1;
    }
}, M7 = class {
    constructor(e, t, r){
        this.context = e, this._parent = t, this.index = r, this.type = e.buffer.set.types[e.buffer.buffer[r]];
    }
    get name() {
        return this.type.name;
    }
    get from() {
        return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
    get to() {
        return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
    child(e, t, r) {
        let { buffer: i1  } = this.context, n = i1.findChild(this.index + 4, i1.buffer[this.index + 3], e, t - this.context.start, r);
        return n < 0 ? null : new M7(this.context, this, n);
    }
    get firstChild() {
        return this.child(1, 0, 4);
    }
    get lastChild() {
        return this.child(-1, 0, 4);
    }
    childAfter(e) {
        return this.child(1, e, 2);
    }
    childBefore(e) {
        return this.child(-1, e, -2);
    }
    enter(e, t, r = 0) {
        if (r & A5.ExcludeBuffers) return null;
        let { buffer: i1  } = this.context, n = i1.findChild(this.index + 4, i1.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
        return n < 0 ? null : new M7(this.context, this, n);
    }
    get parent() {
        return this._parent || this.context.parent.nextSignificantParent();
    }
    externalSibling(e) {
        return this._parent ? null : this.context.parent.nextChild(this.context.index + e, e, 0, 4);
    }
    get nextSibling() {
        let { buffer: e  } = this.context, t = e.buffer[this.index + 3];
        return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new M7(this.context, this._parent, t) : this.externalSibling(1);
    }
    get prevSibling() {
        let { buffer: e  } = this.context, t = this._parent ? this._parent.index + 4 : 0;
        return this.index == t ? this.externalSibling(-1) : new M7(this.context, this._parent, e.findChild(t, this.index, -1, 0, 4));
    }
    cursor(e = 0) {
        return new V5(this, e);
    }
    get tree() {
        return null;
    }
    toTree() {
        let e = [], t = [], { buffer: r  } = this.context, i1 = this.index + 4, n = r.buffer[this.index + 3];
        if (n > i1) {
            let s = r.buffer[this.index + 1], l = r.buffer[this.index + 2];
            e.push(r.slice(i1, n, s, l)), t.push(0);
        }
        return new P5(this.type, e, t, this.to - this.from);
    }
    resolve(e, t = 0) {
        return q5(this, e, t, !1);
    }
    resolveInner(e, t = 0) {
        return q5(this, e, t, !0);
    }
    enterUnfinishedNodesBefore(e) {
        return Ae5(this, e);
    }
    toString() {
        return this.context.buffer.childString(this.index);
    }
    getChild(e, t = null, r = null) {
        let i1 = ee4(this, e, t, r);
        return i1.length ? i1[0] : null;
    }
    getChildren(e, t = null, r = null) {
        return ee4(this, e, t, r);
    }
    get node() {
        return this;
    }
    matchContext(e) {
        return te6(this, e);
    }
}, V5 = class {
    constructor(e, t = 0){
        if (this.mode = t, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof I4) this.yieldNode(e);
        else {
            this._tree = e.context.parent, this.buffer = e.context;
            for(let r = e._parent; r; r = r._parent)this.stack.unshift(r.index);
            this.bufferNode = e, this.yieldBuf(e.index);
        }
    }
    get name() {
        return this.type.name;
    }
    yieldNode(e) {
        return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
    }
    yieldBuf(e, t) {
        this.index = e;
        let { start: r , buffer: i1  } = this.buffer;
        return this.type = t || i1.set.types[i1.buffer[e]], this.from = r + i1.buffer[e + 1], this.to = r + i1.buffer[e + 2], !0;
    }
    yield(e) {
        return e ? e instanceof I4 ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
    }
    toString() {
        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    enterChild(e, t, r) {
        if (!this.buffer) return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, t, r, this.mode));
        let { buffer: i1  } = this.buffer, n = i1.findChild(this.index + 4, i1.buffer[this.index + 3], e, t - this.buffer.start, r);
        return n < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(n));
    }
    firstChild() {
        return this.enterChild(1, 0, 4);
    }
    lastChild() {
        return this.enterChild(-1, 0, 4);
    }
    childAfter(e) {
        return this.enterChild(1, e, 2);
    }
    childBefore(e) {
        return this.enterChild(-1, e, -2);
    }
    enter(e, t, r = this.mode) {
        return this.buffer ? r & A5.ExcludeBuffers ? !1 : this.enterChild(1, e, t) : this.yield(this._tree.enter(e, t, r));
    }
    parent() {
        if (!this.buffer) return this.yieldNode(this.mode & A5.IncludeAnonymous ? this._tree._parent : this._tree.parent);
        if (this.stack.length) return this.yieldBuf(this.stack.pop());
        let e = this.mode & A5.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
        return this.buffer = null, this.yieldNode(e);
    }
    sibling(e) {
        if (!this.buffer) return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
        let { buffer: t  } = this.buffer, r = this.stack.length - 1;
        if (e < 0) {
            let i1 = r < 0 ? 0 : this.stack[r] + 4;
            if (this.index != i1) return this.yieldBuf(t.findChild(i1, this.index, -1, 0, 4));
        } else {
            let i11 = t.buffer[this.index + 3];
            if (i11 < (r < 0 ? t.buffer.length : t.buffer[this.stack[r] + 3])) return this.yieldBuf(i11);
        }
        return r < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
    }
    nextSibling() {
        return this.sibling(1);
    }
    prevSibling() {
        return this.sibling(-1);
    }
    atLastNode(e) {
        let t, r, { buffer: i1  } = this;
        if (i1) {
            if (e > 0) {
                if (this.index < i1.buffer.buffer.length) return !1;
            } else for(let n = 0; n < this.index; n++)if (i1.buffer.buffer[n + 3] < this.index) return !1;
            ({ index: t , parent: r  } = i1);
        } else ({ index: t , _parent: r  } = this._tree);
        for(; r; { index: t , _parent: r  } = r)if (t > -1) for(let n1 = t + e, s = e < 0 ? -1 : r._tree.children.length; n1 != s; n1 += e){
            let l = r._tree.children[n1];
            if (this.mode & A5.IncludeAnonymous || l instanceof T8 || !l.type.isAnonymous || ae5(l)) return !1;
        }
        return !0;
    }
    move(e, t) {
        if (t && this.enterChild(e, 0, 4)) return !0;
        for(;;){
            if (this.sibling(e)) return !0;
            if (this.atLastNode(e) || !this.parent()) return !1;
        }
    }
    next(e = !0) {
        return this.move(1, e);
    }
    prev(e = !0) {
        return this.move(-1, e);
    }
    moveTo(e, t = 0) {
        for(; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent(););
        for(; this.enterChild(1, e, t););
        return this;
    }
    get node() {
        if (!this.buffer) return this._tree;
        let e = this.bufferNode, t = null, r = 0;
        if (e && e.context == this.buffer) {
            e: for(let i1 = this.index, n = this.stack.length; n >= 0;){
                for(let s = e; s; s = s._parent)if (s.index == i1) {
                    if (i1 == this.index) return s;
                    t = s, r = n + 1;
                    break e;
                }
                i1 = this.stack[--n];
            }
        }
        for(let i11 = r; i11 < this.stack.length; i11++)t = new M7(this.buffer, t, this.stack[i11]);
        return this.bufferNode = new M7(this.buffer, t, this.index);
    }
    get tree() {
        return this.buffer ? null : this._tree._tree;
    }
    iterate(e, t) {
        for(let r = 0;;){
            let i1 = !1;
            if (this.type.isAnonymous || e(this) !== !1) {
                if (this.firstChild()) {
                    r++;
                    continue;
                }
                this.type.isAnonymous || (i1 = !0);
            }
            for(; i1 && t && t(this), i1 = this.type.isAnonymous, !this.nextSibling();){
                if (!r) return;
                this.parent(), r--, i1 = !0;
            }
        }
    }
    matchContext(e) {
        if (!this.buffer) return te6(this.node, e);
        let { buffer: t  } = this.buffer, { types: r  } = t.set;
        for(let i1 = e.length - 1, n = this.stack.length - 1; i1 >= 0; n--){
            if (n < 0) return te6(this.node, e, i1);
            let s = r[t.buffer[this.stack[n]]];
            if (!s.isAnonymous) {
                if (e[i1] && e[i1] != s.name) return !1;
                i1--;
            }
        }
        return !0;
    }
};
function ae5(h) {
    return h.children.some((e)=>e instanceof T8 || !e.type.isAnonymous || ae5(e));
}
function Se5(h) {
    var e;
    let { buffer: t , nodeSet: r , maxBufferLength: i1 = 1024 , reused: n = [] , minRepeatType: s = r.types.length  } = h, l = Array.isArray(t) ? new K7(t, t.length) : t, f = r.types, u = 0, o = 0;
    function c(x1, v, p1, m, C) {
        let { id: b , start: g , end: k , size: z  } = l, O = o;
        for(; z < 0;)if (l.next(), z == -1) {
            let W = n[b];
            p1.push(W), m.push(g - x1);
            return;
        } else if (z == -3) {
            u = b;
            return;
        } else if (z == -4) {
            o = b;
            return;
        } else throw new RangeError(`Unrecognized record size: ${z}`);
        let J = f[b], U, L, ce = g - x1;
        if (k - g <= i1 && (L = S1(l.pos - v, C))) {
            let W1 = new Uint16Array(L.size - L.skip), j = l.pos - L.size, R = W1.length;
            for(; l.pos > j;)R = D1(L.start, W1, R);
            U = new T8(W1, k - L.start, r), ce = L.start - x1;
        } else {
            let W2 = l.pos - z;
            l.next();
            let j1 = [], R1 = [], H = b >= s ? b : -1, $ = 0, Q = k;
            for(; l.pos > W2;)H >= 0 && l.id == H && l.size >= 0 ? (l.end <= Q - i1 && (y(j1, R1, g, $, l.end, Q, H, O), $ = j1.length, Q = l.end), l.next()) : c(g, W2, j1, R1, H);
            if (H >= 0 && $ > 0 && $ < j1.length && y(j1, R1, g, $, g, Q, H, O), j1.reverse(), R1.reverse(), H > -1 && $ > 0) {
                let de = a(J);
                U = pe4(J, j1, R1, 0, j1.length, 0, k - g, de, de);
            } else U = d1(J, j1, R1, k - g, O - k);
        }
        p1.push(U), m.push(ce);
    }
    function a(x1) {
        return (v, p1, m)=>{
            let C = 0, b = v.length - 1, g, k;
            if (b >= 0 && (g = v[b]) instanceof P5) {
                if (!b && g.type == x1 && g.length == m) return g;
                (k = g.prop(w5.lookAhead)) && (C = p1[b] + g.length + k);
            }
            return d1(x1, v, p1, m, C);
        };
    }
    function y(x1, v, p1, m, C, b, g, k) {
        let z = [], O = [];
        for(; x1.length > m;)z.push(x1.pop()), O.push(v.pop() + p1 - C);
        x1.push(d1(r.types[g], z, O, b - C, k - b)), v.push(C - p1);
    }
    function d1(x1, v, p1, m, C = 0, b) {
        if (u) {
            let g = [
                w5.contextHash,
                u
            ];
            b = b ? [
                g
            ].concat(b) : [
                g
            ];
        }
        if (C > 25) {
            let g1 = [
                w5.lookAhead,
                C
            ];
            b = b ? [
                g1
            ].concat(b) : [
                g1
            ];
        }
        return new P5(x1, v, p1, m, b);
    }
    function S1(x1, v) {
        let p1 = l.fork(), m = 0, C = 0, b = 0, g = p1.end - i1, k = {
            size: 0,
            start: 0,
            skip: 0
        };
        e: for(let z = p1.pos - x1; p1.pos > z;){
            let O = p1.size;
            if (p1.id == v && O >= 0) {
                k.size = m, k.start = C, k.skip = b, b += 4, m += 4, p1.next();
                continue;
            }
            let J = p1.pos - O;
            if (O < 0 || J < z || p1.start < g) break;
            let U = p1.id >= s ? 4 : 0, L = p1.start;
            for(p1.next(); p1.pos > J;){
                if (p1.size < 0) if (p1.size == -3) U += 4;
                else break e;
                else p1.id >= s && (U += 4);
                p1.next();
            }
            C = L, m += O, b += U;
        }
        return (v < 0 || m == x1) && (k.size = m, k.start = C, k.skip = b), k.size > 4 ? k : void 0;
    }
    function D1(x1, v, p1) {
        let { id: m , start: C , end: b , size: g  } = l;
        if (l.next(), g >= 0 && m < s) {
            let k = p1;
            if (g > 4) {
                let z = l.pos - (g - 4);
                for(; l.pos > z;)p1 = D1(x1, v, p1);
            }
            v[--p1] = k, v[--p1] = b - x1, v[--p1] = C - x1, v[--p1] = m;
        } else g == -3 ? u = m : g == -4 && (o = m);
        return p1;
    }
    let E = [], F = [];
    for(; l.pos > 0;)c(h.start || 0, h.bufferStart || 0, E, F, -1);
    let _ = (e = h.length) !== null && e !== void 0 ? e : E.length ? F[0] + E[0].length : 0;
    return new P5(f[h.topID], E.reverse(), F.reverse(), _);
}
var me4 = new WeakMap;
function Y4(h, e) {
    if (!h.isAnonymous || e instanceof T8 || e.type != h) return 1;
    let t = me4.get(e);
    if (t == null) {
        t = 1;
        for (let r of e.children){
            if (r.type != h || !(r instanceof P5)) {
                t = 1;
                break;
            }
            t += Y4(h, r);
        }
        me4.set(e, t);
    }
    return t;
}
function pe4(h, e, t, r, i1, n, s, l, f) {
    let u = 0;
    for(let d1 = r; d1 < i1; d1++)u += Y4(h, e[d1]);
    let o = Math.ceil(u * 1.5 / 8), c = [], a = [];
    function y(d1, S1, D1, E, F) {
        for(let _ = D1; _ < E;){
            let x1 = _, v = S1[_], p1 = Y4(h, d1[_]);
            for(_++; _ < E; _++){
                let m = Y4(h, d1[_]);
                if (p1 + m >= o) break;
                p1 += m;
            }
            if (_ == x1 + 1) {
                if (p1 > o) {
                    let m1 = d1[x1];
                    y(m1.children, m1.positions, 0, m1.children.length, S1[x1] + F);
                    continue;
                }
                c.push(d1[x1]);
            } else {
                let m2 = S1[_ - 1] + d1[_ - 1].length - v;
                c.push(pe4(h, d1, S1, x1, _, v, m2, null, f));
            }
            a.push(v + F - n);
        }
    }
    return y(e, t, r, i1, 0), (l || f)(c, a, s);
}
var G4 = class {
    constructor(e, t, r, i1, n = !1, s = !1){
        this.from = e, this.to = t, this.tree = r, this.offset = i1, this.open = (n ? 1 : 0) | (s ? 2 : 0);
    }
    get openStart() {
        return (this.open & 1) > 0;
    }
    get openEnd() {
        return (this.open & 2) > 0;
    }
    static addTree(e, t = [], r = !1) {
        let i1 = [
            new G4(0, e.length, e, 0, !1, r)
        ];
        for (let n of t)n.to > e.length && i1.push(n);
        return i1;
    }
    static applyChanges(e, t, r = 128) {
        if (!t.length) return e;
        let i1 = [], n = 1, s = e.length ? e[0] : null;
        for(let l = 0, f = 0, u = 0;; l++){
            let o = l < t.length ? t[l] : null, c = o ? o.fromA : 1e9;
            if (c - f >= r) for(; s && s.from < c;){
                let a = s;
                if (f >= a.from || c <= a.to || u) {
                    let y = Math.max(a.from, f) - u, d1 = Math.min(a.to, c) - u;
                    a = y >= d1 ? null : new G4(y, d1, a.tree, a.offset + u, l > 0, !!o);
                }
                if (a && i1.push(a), s.to > c) break;
                s = n < e.length ? e[n++] : null;
            }
            if (!o) break;
            f = o.toA, u = o.toA - o.toB;
        }
        return i1;
    }
}, ye4 = class {
    startParse(e, t, r) {
        return typeof e == "string" && (e = new le6(e)), r = r ? r.length ? r.map((i1)=>new B6(i1.from, i1.to)) : [
            new B6(0, 0)
        ] : [
            new B6(0, e.length)
        ], this.createParse(e, t || [], r);
    }
    parse(e, t, r) {
        let i1 = this.startParse(e, t, r);
        for(;;){
            let n = i1.advance();
            if (n) return n;
        }
    }
}, le6 = class {
    constructor(e){
        this.string = e;
    }
    get length() {
        return this.string.length;
    }
    chunk(e) {
        return this.string.slice(e);
    }
    get lineChunks() {
        return !1;
    }
    read(e, t) {
        return this.string.slice(e, t);
    }
};
new w5({
    perNode: !0
});
var L4 = 0, h2 = class {
    constructor(e, a, i1){
        this.set = e, this.base = a, this.modified = i1, this.id = L4++;
    }
    static define(e) {
        if (e?.base) throw new Error("Can not derive from a modified tag");
        let a = new h2([], null, []);
        if (a.set.push(a), e) for (let i1 of e.set)a.set.push(i1);
        return a;
    }
    static defineModifier() {
        let e = new M8;
        return (a)=>a.modified.indexOf(e) > -1 ? a : M8.get(a.base || a, a.modified.concat(e).sort((i1, n)=>i1.id - n.id));
    }
}, Q6 = 0, M8 = class {
    constructor(){
        this.instances = [], this.id = Q6++;
    }
    static get(e, a) {
        if (!a.length) return e;
        let i1 = a[0].instances.find((r)=>r.base == e && U4(a, r.modified));
        if (i1) return i1;
        let n = [], l = new h2(n, e, a);
        for (let r of a)r.instances.push(l);
        let c = V6(a);
        for (let r1 of e.set)for (let d1 of c)n.push(M8.get(r1, d1));
        return l;
    }
};
function U4(o, e) {
    return o.length == e.length && o.every((a, i1)=>a == e[i1]);
}
function V6(o) {
    let e = [
        o
    ];
    for(let a = 0; a < o.length; a++)for (let i1 of V6(o.slice(0, a).concat(o.slice(a + 1))))e.push(i1);
    return e;
}
function Z4(o) {
    let e = Object.create(null);
    for(let a in o){
        let i1 = o[a];
        Array.isArray(i1) || (i1 = [
            i1
        ]);
        for (let n of a.split(" "))if (n) {
            let l = [], c = 2, r = n;
            for(let u = 0;;){
                if (r == "..." && u > 0 && u + 3 == n.length) {
                    c = 1;
                    break;
                }
                let f = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(r);
                if (!f) throw new RangeError("Invalid path: " + n);
                if (l.push(f[0] == "*" ? "" : f[0][0] == '"' ? JSON.parse(f[0]) : f[0]), u += f[0].length, u == n.length) break;
                let p1 = n[u++];
                if (u == n.length && p1 == "!") {
                    c = 0;
                    break;
                }
                if (p1 != "/") throw new RangeError("Invalid path: " + n);
                r = n.slice(u);
            }
            let d1 = l.length - 1, g = l[d1];
            if (!g) throw new RangeError("Invalid path: " + n);
            let m = new q6(i1, c, d1 > 0 ? l.slice(0, d1) : null);
            e[g] = m.sort(e[g]);
        }
    }
    return z4.add(e);
}
var z4 = new w5, q6 = class {
    constructor(e, a, i1, n){
        this.tags = e, this.mode = a, this.context = i1, this.next = n;
    }
    sort(e) {
        return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);
    }
    get depth() {
        return this.context ? this.context.length : 0;
    }
};
function W4(o, e) {
    let a = Object.create(null);
    for (let l of o)if (!Array.isArray(l.tag)) a[l.tag.id] = l.class;
    else for (let c of l.tag)a[c.id] = l.class;
    let { scope: i1 , all: n = null  } = e || {};
    return {
        style: (l)=>{
            let c = n;
            for (let r of l)for (let d1 of r.set){
                let g = a[d1.id];
                if (g) {
                    c = c ? c + " " + g : g;
                    break;
                }
            }
            return c;
        },
        scope: i1
    };
}
function X6(o, e) {
    let a = null;
    for (let i1 of o){
        let n = i1.style(e);
        n && (a = a ? a + " " + n : n);
    }
    return a;
}
function $4(o, e, a, i1 = 0, n = o.length) {
    let l = new P6(i1, Array.isArray(e) ? e : [
        e
    ], a);
    l.highlightRange(o.cursor(), i1, n, "", l.highlighters), l.flush(n);
}
var P6 = class {
    constructor(e, a, i1){
        this.at = e, this.highlighters = a, this.span = i1, this.class = "";
    }
    startSpan(e, a) {
        a != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = a);
    }
    flush(e) {
        e > this.at && this.class && this.span(this.at, e, this.class);
    }
    highlightRange(e, a, i1, n, l) {
        let { type: c , from: r , to: d1  } = e;
        if (r >= i1 || d1 <= a) return;
        c.isTop && (l = this.highlighters.filter((p1)=>!p1.scope || p1.scope(c)));
        let g = n, m = c.prop(z4), u = !1;
        for(; m;){
            if (!m.context || e.matchContext(m.context)) {
                let p1 = X6(l, m.tags);
                p1 && (g && (g += " "), g += p1, m.mode == 1 ? n += (n ? " " : "") + p1 : m.mode == 0 && (u = !0));
                break;
            }
            m = m.next;
        }
        if (this.startSpan(e.from, g), u) return;
        let f = e.tree && e.tree.prop(w5.mounted);
        if (f && f.overlay) {
            let p11 = e.node.enter(f.overlay[0].from + r, 1), G = this.highlighters.filter((v)=>!v.scope || v.scope(f.tree.type)), D1 = e.firstChild();
            for(let v = 0, O = r;; v++){
                let S1 = v < f.overlay.length ? f.overlay[v] : null, E = S1 ? S1.from + r : d1, H = Math.max(a, O), K = Math.min(i1, E);
                if (H < K && D1) for(; e.from < K && (this.highlightRange(e, H, K, n, l), this.startSpan(Math.min(i1, e.to), g), !(e.to >= E || !e.nextSibling())););
                if (!S1 || E > i1) break;
                O = S1.to + r, O > a && (this.highlightRange(p11.cursor(), Math.max(a, S1.from + r), Math.min(i1, O), n, G), this.startSpan(O, g));
            }
            D1 && e.parent();
        } else if (e.firstChild()) {
            do if (!(e.to <= a)) {
                if (e.from >= i1) break;
                this.highlightRange(e, a, i1, n, l), this.startSpan(Math.min(i1, e.to), g);
            }
            while (e.nextSibling())
            e.parent();
        }
    }
}, t6 = h2.define, R6 = t6(), N5 = t6(), B7 = t6(N5), F5 = t6(N5), x5 = t6(), I5 = t6(x5), T9 = t6(x5), y6 = t6(), w6 = t6(y6), k2 = t6(), b4 = t6(), j5 = t6(), A6 = t6(j5), C7 = t6(), s5 = {
    comment: R6,
    lineComment: t6(R6),
    blockComment: t6(R6),
    docComment: t6(R6),
    name: N5,
    variableName: t6(N5),
    typeName: B7,
    tagName: t6(B7),
    propertyName: F5,
    attributeName: t6(F5),
    className: t6(N5),
    labelName: t6(N5),
    namespace: t6(N5),
    macroName: t6(N5),
    literal: x5,
    string: I5,
    docString: t6(I5),
    character: t6(I5),
    attributeValue: t6(I5),
    number: T9,
    integer: t6(T9),
    float: t6(T9),
    bool: t6(x5),
    regexp: t6(x5),
    escape: t6(x5),
    color: t6(x5),
    url: t6(x5),
    keyword: k2,
    self: t6(k2),
    null: t6(k2),
    atom: t6(k2),
    unit: t6(k2),
    modifier: t6(k2),
    operatorKeyword: t6(k2),
    controlKeyword: t6(k2),
    definitionKeyword: t6(k2),
    moduleKeyword: t6(k2),
    operator: b4,
    derefOperator: t6(b4),
    arithmeticOperator: t6(b4),
    logicOperator: t6(b4),
    bitwiseOperator: t6(b4),
    compareOperator: t6(b4),
    updateOperator: t6(b4),
    definitionOperator: t6(b4),
    typeOperator: t6(b4),
    controlOperator: t6(b4),
    punctuation: j5,
    separator: t6(j5),
    bracket: A6,
    angleBracket: t6(A6),
    squareBracket: t6(A6),
    paren: t6(A6),
    brace: t6(A6),
    content: y6,
    heading: w6,
    heading1: t6(w6),
    heading2: t6(w6),
    heading3: t6(w6),
    heading4: t6(w6),
    heading5: t6(w6),
    heading6: t6(w6),
    contentSeparator: t6(y6),
    list: t6(y6),
    quote: t6(y6),
    emphasis: t6(y6),
    strong: t6(y6),
    link: t6(y6),
    monospace: t6(y6),
    strikethrough: t6(y6),
    inserted: t6(),
    deleted: t6(),
    changed: t6(),
    invalid: t6(),
    meta: C7,
    documentMeta: t6(C7),
    annotation: t6(C7),
    processingInstruction: t6(C7),
    definition: h2.defineModifier(),
    constant: h2.defineModifier(),
    function: h2.defineModifier(),
    standard: h2.defineModifier(),
    local: h2.defineModifier(),
    special: h2.defineModifier()
}, _5 = W4([
    {
        tag: s5.link,
        class: "tok-link"
    },
    {
        tag: s5.heading,
        class: "tok-heading"
    },
    {
        tag: s5.emphasis,
        class: "tok-emphasis"
    },
    {
        tag: s5.strong,
        class: "tok-strong"
    },
    {
        tag: s5.keyword,
        class: "tok-keyword"
    },
    {
        tag: s5.atom,
        class: "tok-atom"
    },
    {
        tag: s5.bool,
        class: "tok-bool"
    },
    {
        tag: s5.url,
        class: "tok-url"
    },
    {
        tag: s5.labelName,
        class: "tok-labelName"
    },
    {
        tag: s5.inserted,
        class: "tok-inserted"
    },
    {
        tag: s5.deleted,
        class: "tok-deleted"
    },
    {
        tag: s5.literal,
        class: "tok-literal"
    },
    {
        tag: s5.string,
        class: "tok-string"
    },
    {
        tag: s5.number,
        class: "tok-number"
    },
    {
        tag: [
            s5.regexp,
            s5.escape,
            s5.special(s5.string)
        ],
        class: "tok-string2"
    },
    {
        tag: s5.variableName,
        class: "tok-variableName"
    },
    {
        tag: s5.local(s5.variableName),
        class: "tok-variableName tok-local"
    },
    {
        tag: s5.definition(s5.variableName),
        class: "tok-variableName tok-definition"
    },
    {
        tag: s5.special(s5.variableName),
        class: "tok-variableName2"
    },
    {
        tag: s5.definition(s5.propertyName),
        class: "tok-propertyName tok-definition"
    },
    {
        tag: s5.typeName,
        class: "tok-typeName"
    },
    {
        tag: s5.namespace,
        class: "tok-namespace"
    },
    {
        tag: s5.className,
        class: "tok-className"
    },
    {
        tag: s5.macroName,
        class: "tok-macroName"
    },
    {
        tag: s5.propertyName,
        class: "tok-propertyName"
    },
    {
        tag: s5.operator,
        class: "tok-operator"
    },
    {
        tag: s5.comment,
        class: "tok-comment"
    },
    {
        tag: s5.meta,
        class: "tok-meta"
    },
    {
        tag: s5.invalid,
        class: "tok-invalid"
    },
    {
        tag: s5.punctuation,
        class: "tok-punctuation"
    }
]);
var Z5, T10 = new w5;
function yt4(n) {
    return A3.define({
        combine: n ? (t)=>t.concat(n) : void 0
    });
}
var c4 = class {
    constructor(t, e, r = []){
        this.data = t, w3.prototype.hasOwnProperty("tree") || Object.defineProperty(w3.prototype, "tree", {
            get () {
                return m6(this);
            }
        }), this.parser = e, this.extension = [
            P7.of(this),
            w3.languageData.of((s, i1, o)=>s.facet(ut4(s, i1, o)))
        ].concat(r);
    }
    isActiveAt(t, e, r = -1) {
        return ut4(t, e, r) == this.data;
    }
    findRegions(t) {
        let e = t.facet(P7);
        if (e?.data == this.data) return [
            {
                from: 0,
                to: t.doc.length
            }
        ];
        if (!e || !e.allowsNesting) return [];
        let r = [], s = (i1, o)=>{
            if (i1.prop(T10) == this.data) {
                r.push({
                    from: o,
                    to: o + i1.length
                });
                return;
            }
            let a = i1.prop(w5.mounted);
            if (a) {
                if (a.tree.prop(T10) == this.data) {
                    if (a.overlay) for (let l of a.overlay)r.push({
                        from: l.from + o,
                        to: l.to + o
                    });
                    else r.push({
                        from: o,
                        to: o + i1.length
                    });
                    return;
                } else if (a.overlay) {
                    let l1 = r.length;
                    if (s(a.tree, a.overlay[0].from + o), r.length > l1) return;
                }
            }
            for(let l2 = 0; l2 < i1.children.length; l2++){
                let h = i1.children[l2];
                h instanceof P5 && s(h, i1.positions[l2] + o);
            }
        };
        return s(m6(t), 0), r;
    }
    get allowsNesting() {
        return !0;
    }
};
c4.setState = y4.define();
function ut4(n, t, e) {
    let r = n.facet(P7);
    if (!r) return null;
    let s = r.data;
    if (r.allowsNesting) for(let i1 = m6(n).topNode; i1; i1 = i1.enter(t, e, A5.ExcludeBuffers))s = i1.type.prop(T10) || s;
    return s;
}
var N6 = class extends c4 {
    constructor(t, e){
        super(t, e), this.parser = e;
    }
    static define(t) {
        let e = yt4(t.languageData);
        return new N6(e, t.parser.configure({
            props: [
                T10.add((r)=>r.isTop ? e : void 0)
            ]
        }));
    }
    configure(t) {
        return new N6(this.data, this.parser.configure(t));
    }
    get allowsNesting() {
        return this.parser.hasWrappers();
    }
};
function m6(n) {
    let t = n.field(c4.state, !1);
    return t ? t.tree : P5.empty;
}
var et3 = class {
    constructor(t, e = t.length){
        this.doc = t, this.length = e, this.cursorPos = 0, this.string = "", this.cursor = t.iter();
    }
    syncTo(t) {
        return this.string = this.cursor.next(t - this.cursorPos).value, this.cursorPos = t + this.string.length, this.cursorPos - this.string.length;
    }
    chunk(t) {
        return this.syncTo(t), this.string;
    }
    get lineChunks() {
        return !0;
    }
    read(t, e) {
        let r = this.cursorPos - this.string.length;
        return t < r || e >= this.cursorPos ? this.doc.sliceString(t, e) : this.string.slice(t - r, e - r);
    }
}, I6 = null, x6 = class {
    constructor(t, e, r = [], s, i1, o, a, l){
        this.parser = t, this.state = e, this.fragments = r, this.tree = s, this.treeLen = i1, this.viewport = o, this.skipped = a, this.scheduleOn = l, this.parse = null, this.tempSkipped = [];
    }
    static create(t, e, r) {
        return new x6(t, e, [], P5.empty, 0, r, [], null);
    }
    startParse() {
        return this.parser.startParse(new et3(this.state.doc), this.fragments);
    }
    work(t, e) {
        return e != null && e >= this.state.doc.length && (e = void 0), this.tree != P5.empty && this.isDone(e ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(()=>{
            var r;
            if (typeof t == "number") {
                let s = Date.now() + t;
                t = ()=>Date.now() > s;
            }
            for(this.parse || (this.parse = this.startParse()), e != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > e) && e < this.state.doc.length && this.parse.stopAt(e);;){
                let s1 = this.parse.advance();
                if (s1) if (this.fragments = this.withoutTempSkipped(G4.addTree(s1, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (r = this.parse.stoppedAt) !== null && r !== void 0 ? r : this.state.doc.length, this.tree = s1, this.parse = null, this.treeLen < (e ?? this.state.doc.length)) this.parse = this.startParse();
                else return !0;
                if (t()) return !1;
            }
        });
    }
    takeTree() {
        let t, e;
        this.parse && (t = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > t) && this.parse.stopAt(t), this.withContext(()=>{
            for(; !(e = this.parse.advance()););
        }), this.treeLen = t, this.tree = e, this.fragments = this.withoutTempSkipped(G4.addTree(this.tree, this.fragments, !0)), this.parse = null);
    }
    withContext(t) {
        let e = I6;
        I6 = this;
        try {
            return t();
        } finally{
            I6 = e;
        }
    }
    withoutTempSkipped(t) {
        for(let e; e = this.tempSkipped.pop();)t = ct4(t, e.from, e.to);
        return t;
    }
    changes(t, e) {
        let { fragments: r , tree: s , treeLen: i1 , viewport: o , skipped: a  } = this;
        if (this.takeTree(), !t.empty) {
            let l = [];
            if (t.iterChangedRanges((h, u, d1, g)=>l.push({
                    fromA: h,
                    toA: u,
                    fromB: d1,
                    toB: g
                })), r = G4.applyChanges(r, l), s = P5.empty, i1 = 0, o = {
                from: t.mapPos(o.from, -1),
                to: t.mapPos(o.to, 1)
            }, this.skipped.length) {
                a = [];
                for (let h of this.skipped){
                    let u = t.mapPos(h.from, 1), d1 = t.mapPos(h.to, -1);
                    u < d1 && a.push({
                        from: u,
                        to: d1
                    });
                }
            }
        }
        return new x6(this.parser, e, r, s, i1, o, a, this.scheduleOn);
    }
    updateViewport(t) {
        if (this.viewport.from == t.from && this.viewport.to == t.to) return !1;
        this.viewport = t;
        let e = this.skipped.length;
        for(let r = 0; r < this.skipped.length; r++){
            let { from: s , to: i1  } = this.skipped[r];
            s < t.to && i1 > t.from && (this.fragments = ct4(this.fragments, s, i1), this.skipped.splice(r--, 1));
        }
        return this.skipped.length >= e ? !1 : (this.reset(), !0);
    }
    reset() {
        this.parse && (this.takeTree(), this.parse = null);
    }
    skipUntilInView(t, e) {
        this.skipped.push({
            from: t,
            to: e
        });
    }
    static getSkippingParser(t) {
        return new class extends ye4 {
            createParse(e, r, s) {
                let i1 = s[0].from, o = s[s.length - 1].to;
                return {
                    parsedPos: i1,
                    advance () {
                        let l = I6;
                        if (l) {
                            for (let h of s)l.tempSkipped.push(h);
                            t && (l.scheduleOn = l.scheduleOn ? Promise.all([
                                l.scheduleOn,
                                t
                            ]) : t);
                        }
                        return this.parsedPos = o, new P5(N4.none, [], [], o - i1);
                    },
                    stoppedAt: null,
                    stopAt () {}
                };
            }
        };
    }
    isDone(t) {
        t = Math.min(t, this.state.doc.length);
        let e = this.fragments;
        return this.treeLen >= t && e.length && e[0].from == 0 && e[0].to >= t;
    }
    static get() {
        return I6;
    }
};
function ct4(n, t, e) {
    return G4.applyChanges(n, [
        {
            fromA: t,
            toA: e,
            fromB: t,
            toB: e
        }
    ]);
}
var S6 = class {
    constructor(t){
        this.context = t, this.tree = t.tree;
    }
    apply(t) {
        if (!t.docChanged && this.tree == this.context.tree) return this;
        let e = this.context.changes(t.changes, t.state), r = this.context.treeLen == t.startState.doc.length ? void 0 : Math.max(t.changes.mapPos(this.context.treeLen), e.viewport.to);
        return e.work(20, r) || e.takeTree(), new S6(e);
    }
    static init(t) {
        let e = Math.min(3e3, t.doc.length), r = x6.create(t.facet(P7).parser, t, {
            from: 0,
            to: e
        });
        return r.work(20, e) || r.takeTree(), new S6(r);
    }
};
c4.state = F3.define({
    create: S6.init,
    update (n, t) {
        for (let e of t.effects)if (e.is(c4.setState)) return e.value;
        return t.startState.facet(P7) != t.state.facet(P7) ? S6.init(t.state) : n.apply(t);
    }
});
var vt4 = (n)=>{
    let t = setTimeout(()=>n(), 500);
    return ()=>clearTimeout(t);
};
typeof requestIdleCallback < "u" && (vt4 = (n)=>{
    let t = -1, e = setTimeout(()=>{
        t = requestIdleCallback(n, {
            timeout: 500 - 100
        });
    }, 100);
    return ()=>t < 0 ? clearTimeout(e) : cancelIdleCallback(t);
});
var _6 = typeof navigator < "u" && ((Z5 = navigator.scheduling) === null || Z5 === void 0 ? void 0 : Z5.isInputPending) ? ()=>navigator.scheduling.isInputPending() : null, xt4 = V4.fromClass(class {
    constructor(t){
        this.view = t, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
    }
    update(t) {
        let e = this.view.state.field(c4.state).context;
        (e.updateViewport(t.view.viewport) || this.view.viewport.to > e.treeLen) && this.scheduleWork(), t.docChanged && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(e);
    }
    scheduleWork() {
        if (this.working) return;
        let { state: t  } = this.view, e = t.field(c4.state);
        (e.tree != e.context.tree || !e.context.isDone(t.doc.length)) && (this.working = vt4(this.work));
    }
    work(t) {
        this.working = null;
        let e = Date.now();
        if (this.chunkEnd < e && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = e + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0) return;
        let { state: r , viewport: { to: s  }  } = this.view, i1 = r.field(c4.state);
        if (i1.tree == i1.context.tree && i1.context.isDone(s + 1e5)) return;
        let o = Date.now() + Math.min(this.chunkBudget, 100, t && !_6 ? Math.max(25, t.timeRemaining() - 5) : 1e9), a = i1.context.treeLen < s && r.doc.length > s + 1e3, l = i1.context.work(()=>_6 && _6() || Date.now() > o, s + (a ? 0 : 1e5));
        this.chunkBudget -= Date.now() - e, (l || this.chunkBudget <= 0) && (i1.context.takeTree(), this.view.dispatch({
            effects: c4.setState.of(new S6(i1.context))
        })), this.chunkBudget > 0 && !(l && !a) && this.scheduleWork(), this.checkAsyncSchedule(i1.context);
    }
    checkAsyncSchedule(t) {
        t.scheduleOn && (this.workScheduled++, t.scheduleOn.then(()=>this.scheduleWork()).catch((e)=>nt4(this.view.state, e)).then(()=>this.workScheduled--), t.scheduleOn = null);
    }
    destroy() {
        this.working && this.working();
    }
    isWorking() {
        return !!(this.working || this.workScheduled > 0);
    }
}, {
    eventHandlers: {
        focus () {
            this.scheduleWork();
        }
    }
}), P7 = A3.define({
    combine (n) {
        return n.length ? n[0] : null;
    },
    enables: [
        c4.state,
        xt4
    ]
}), L5 = class {
    constructor(t, e, r, s, i1, o = void 0){
        this.name = t, this.alias = e, this.extensions = r, this.filename = s, this.loadFunc = i1, this.support = o, this.loading = null;
    }
    load() {
        return this.loading || (this.loading = this.loadFunc().then((t)=>this.support = t, (t)=>{
            throw this.loading = null, t;
        }));
    }
    static of(t) {
        let { load: e , support: r  } = t;
        if (!e) {
            if (!r) throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
            e = ()=>Promise.resolve(r);
        }
        return new L5(t.name, (t.alias || []).concat(t.name).map((s)=>s.toLowerCase()), t.extensions || [], t.filename, e, r);
    }
    static matchFilename(t, e) {
        for (let s of t)if (s.filename && s.filename.test(e)) return s;
        let r = /\.([^.]+)$/.exec(e);
        if (r) {
            for (let s1 of t)if (s1.extensions.indexOf(r[1]) > -1) return s1;
        }
        return null;
    }
    static matchLanguageName(t, e, r = !0) {
        e = e.toLowerCase();
        for (let s of t)if (s.alias.some((i1)=>i1 == e)) return s;
        if (r) for (let s1 of t)for (let i1 of s1.alias){
            let o = e.indexOf(i1);
            if (o > -1 && (i1.length > 2 || !/\w/.test(e[o - 1]) && !/\w/.test(e[o + i1.length]))) return s1;
        }
        return null;
    }
}, St4 = A3.define(), Pt4 = A3.define({
    combine: (n)=>{
        if (!n.length) return "  ";
        if (!/^(?: +|\t+)$/.test(n[0])) throw new Error("Invalid indent unit: " + JSON.stringify(n[0]));
        return n[0];
    }
});
function j6(n) {
    let t = n.facet(Pt4);
    return t.charCodeAt(0) == 9 ? n.tabSize * t.length : t.length;
}
function te7(n, t) {
    let e = "", r = n.tabSize;
    if (n.facet(Pt4).charCodeAt(0) == 9) for(; t >= r;)e += "	", t -= r;
    for(let s = 0; s < t; s++)e += " ";
    return e;
}
function ee5(n, t) {
    n instanceof w3 && (n = new $5(n));
    for (let r of n.state.facet(St4)){
        let s = r(n, t);
        if (s != null) return s;
    }
    let e = m6(n.state);
    return e ? re4(n, e, t) : null;
}
var $5 = class {
    constructor(t, e = {}){
        this.state = t, this.options = e, this.unit = j6(t);
    }
    lineAt(t, e = 1) {
        let r = this.state.doc.lineAt(t), { simulateBreak: s , simulateDoubleBreak: i1  } = this.options;
        return s != null && s >= r.from && s <= r.to ? i1 && s == t ? {
            text: "",
            from: t
        } : (e < 0 ? s < t : s <= t) ? {
            text: r.text.slice(s - r.from),
            from: s
        } : {
            text: r.text.slice(0, s - r.from),
            from: r.from
        } : r;
    }
    textAfterPos(t, e = 1) {
        if (this.options.simulateDoubleBreak && t == this.options.simulateBreak) return "";
        let { text: r , from: s  } = this.lineAt(t, e);
        return r.slice(t - s, Math.min(r.length, t + 100 - s));
    }
    column(t, e = 1) {
        let { text: r , from: s  } = this.lineAt(t, e), i1 = this.countColumn(r, t - s), o = this.options.overrideIndentation ? this.options.overrideIndentation(s) : -1;
        return o > -1 && (i1 += o - this.countColumn(r, r.search(/\S|$/))), i1;
    }
    countColumn(t, e = t.length) {
        return ot3(t, this.state.tabSize, e);
    }
    lineIndent(t, e = 1) {
        let { text: r , from: s  } = this.lineAt(t, e), i1 = this.options.overrideIndentation;
        if (i1) {
            let o = i1(s);
            if (o > -1) return o;
        }
        return this.countColumn(r, r.search(/\S|$/));
    }
    get simulatedBreak() {
        return this.options.simulateBreak || null;
    }
}, ne5 = new w5;
function re4(n, t, e) {
    return At4(t.resolveInner(e).enterUnfinishedNodesBefore(e), e, n);
}
function se6(n) {
    return n.pos == n.options.simulateBreak && n.options.simulateDoubleBreak;
}
function ie6(n) {
    let t = n.type.prop(ne5);
    if (t) return t;
    let e = n.firstChild, r;
    if (e && (r = e.type.prop(w5.closedBy))) {
        let s = n.lastChild, i1 = s && r.indexOf(s.name) > -1;
        return (o)=>Ct3(o, !0, 1, void 0, i1 && !se6(o) ? s.from : void 0);
    }
    return n.parent == null ? oe6 : null;
}
function At4(n, t, e) {
    for(; n; n = n.parent){
        let r = ie6(n);
        if (r) return r(M9.create(e, t, n));
    }
    return null;
}
function oe6() {
    return 0;
}
var M9 = class extends $5 {
    constructor(t, e, r){
        super(t.state, t.options), this.base = t, this.pos = e, this.node = r;
    }
    static create(t, e, r) {
        return new M9(t, e, r);
    }
    get textAfter() {
        return this.textAfterPos(this.pos);
    }
    get baseIndent() {
        let t = this.state.doc.lineAt(this.node.from);
        for(;;){
            let e = this.node.resolve(t.from);
            for(; e.parent && e.parent.from == e.from;)e = e.parent;
            if (le7(e, this.node)) break;
            t = this.state.doc.lineAt(e.from);
        }
        return this.lineIndent(t.from);
    }
    continue() {
        let t = this.node.parent;
        return t ? At4(t, this.pos, this.base) : 0;
    }
};
function le7(n, t) {
    for(let e = t; e; e = e.parent)if (n == e) return !0;
    return !1;
}
function ae6(n) {
    let t = n.node, e = t.childAfter(t.from), r = t.lastChild;
    if (!e) return null;
    let s = n.options.simulateBreak, i1 = n.state.doc.lineAt(e.from), o = s == null || s <= i1.from ? i1.to : Math.min(i1.to, s);
    for(let a = e.to;;){
        let l = t.childAfter(a);
        if (!l || l == r) return null;
        if (!l.type.isSkipped) return l.from < o ? e : null;
        a = l.to;
    }
}
function Ct3(n, t, e, r, s) {
    let i1 = n.textAfter, o = i1.match(/^\s*/)[0].length, a = r && i1.slice(o, o + r.length) == r || s == n.pos + o, l = t ? ae6(n) : null;
    return l ? a ? n.column(l.from) : n.column(l.to) : n.baseIndent + (a ? 0 : n.unit * e);
}
var he5 = 200;
function Xe4() {
    return w3.transactionFilter.of((n)=>{
        if (!n.docChanged || !n.isUserEvent("input.type") && !n.isUserEvent("input.complete")) return n;
        let t = n.startState.languageDataAt("indentOnInput", n.startState.selection.main.head);
        if (!t.length) return n;
        let e = n.newDoc, { head: r  } = n.newSelection.main, s = e.lineAt(r);
        if (r > s.from + he5) return n;
        let i1 = e.sliceString(s.from, r);
        if (!t.some((h)=>h.test(i1))) return n;
        let { state: o  } = n, a = -1, l = [];
        for (let { head: h  } of o.selection.ranges){
            let u = o.doc.lineAt(h);
            if (u.from == a) continue;
            a = u.from;
            let d1 = ee5(o, u.from);
            if (d1 == null) continue;
            let g = /^\s*/.exec(u.text)[0], b = te7(o, d1);
            g != b && l.push({
                from: u.from,
                to: u.from + g.length,
                insert: b
            });
        }
        return l.length ? [
            n,
            {
                changes: l,
                sequential: !0
            }
        ] : n;
    });
}
var fe5 = A3.define(), ue6 = new w5;
function ce6(n, t, e) {
    let r = m6(n);
    if (r.length < e) return null;
    let s = r.resolveInner(e), i1 = null;
    for(let o = s; o; o = o.parent){
        if (o.to <= e || o.from > e) continue;
        if (i1 && o.from < t) break;
        let a = o.type.prop(ue6);
        if (a && (o.to < r.length - 50 || r.length == n.doc.length || !de5(o))) {
            let l = a(o, n);
            l && l.from <= e && l.from >= t && l.to > e && (i1 = l);
        }
    }
    return i1;
}
function de5(n) {
    let t = n.lastChild;
    return t && t.to == n.to && t.type.isError;
}
function V7(n, t, e) {
    for (let r of n.facet(fe5)){
        let s = r(n, t, e);
        if (s) return s;
    }
    return ce6(n, t, e);
}
function Tt4(n, t) {
    let e = t.mapPos(n.from, 1), r = t.mapPos(n.to, -1);
    return e >= r ? void 0 : {
        from: e,
        to: r
    };
}
var Q7 = y4.define({
    map: Tt4
}), F6 = y4.define({
    map: Tt4
});
function Dt4(n) {
    let t = [];
    for (let { head: e  } of n.state.selection.ranges)t.some((r)=>r.from <= e && r.to >= e) || t.push(n.lineBlockAt(e));
    return t;
}
var A7 = F3.define({
    create () {
        return M6.none;
    },
    update (n, t) {
        n = n.map(t.changes);
        for (let e of t.effects)e.is(Q7) && !pe5(n, e.value.from, e.value.to) ? n = n.update({
            add: [
                ye5.range(e.value.from, e.value.to)
            ]
        }) : e.is(F6) && (n = n.update({
            filter: (r, s)=>e.value.from != r || e.value.to != s,
            filterFrom: e.value.from,
            filterTo: e.value.to
        }));
        if (t.selection) {
            let e1 = !1, { head: r  } = t.selection.main;
            n.between(r, r, (s, i1)=>{
                s < r && i1 > r && (e1 = !0);
            }), e1 && (n = n.update({
                filterFrom: r,
                filterTo: r,
                filter: (s, i1)=>i1 <= r || s >= r
            }));
        }
        return n;
    },
    provide: (n)=>C6.decorations.from(n)
});
function z5(n, t, e) {
    var r;
    let s = null;
    return (r = n.field(A7, !1)) === null || r === void 0 || r.between(t, e, (i1, o)=>{
        (!s || s.from > i1) && (s = {
            from: i1,
            to: o
        });
    }), s;
}
function pe5(n, t, e) {
    let r = !1;
    return n.between(t, t, (s, i1)=>{
        s == t && i1 == e && (r = !0);
    }), r;
}
function It4(n, t) {
    return n.field(A7, !1) ? t : t.concat(y4.appendConfig.of(Nt4()));
}
var me5 = (n)=>{
    for (let t of Dt4(n)){
        let e = V7(n.state, t.from, t.to);
        if (e) return n.dispatch({
            effects: It4(n.state, [
                Q7.of(e),
                Ot4(n, e)
            ])
        }), !0;
    }
    return !1;
}, ge6 = (n)=>{
    if (!n.state.field(A7, !1)) return !1;
    let t = [];
    for (let e of Dt4(n)){
        let r = z5(n.state, e.from, e.to);
        r && t.push(F6.of(r), Ot4(n, r, !1));
    }
    return t.length && n.dispatch({
        effects: t
    }), t.length > 0;
};
function Ot4(n, t, e = !0) {
    let r = n.state.doc.lineAt(t.from).number, s = n.state.doc.lineAt(t.to).number;
    return C6.announce.of(`${n.state.phrase(e ? "Folded lines" : "Unfolded lines")} ${r} ${n.state.phrase("to")} ${s}.`);
}
var ke6 = (n)=>{
    let { state: t  } = n, e = [];
    for(let r = 0; r < t.doc.length;){
        let s = n.lineBlockAt(r), i1 = V7(t, s.from, s.to);
        i1 && e.push(Q7.of(i1)), r = (i1 ? n.lineBlockAt(i1.to) : s).to + 1;
    }
    return e.length && n.dispatch({
        effects: It4(n.state, e)
    }), !!e.length;
}, be5 = (n)=>{
    let t = n.state.field(A7, !1);
    if (!t || !t.size) return !1;
    let e = [];
    return t.between(0, n.state.doc.length, (r, s)=>{
        e.push(F6.of({
            from: r,
            to: s
        }));
    }), n.dispatch({
        effects: e
    }), !0;
}, _e6 = [
    {
        key: "Ctrl-Shift-[",
        mac: "Cmd-Alt-[",
        run: me5
    },
    {
        key: "Ctrl-Shift-]",
        mac: "Cmd-Alt-]",
        run: ge6
    },
    {
        key: "Ctrl-Alt-[",
        run: ke6
    },
    {
        key: "Ctrl-Alt-]",
        run: be5
    }
], we5 = {
    placeholderDOM: null,
    placeholderText: "\u2026"
}, Bt4 = A3.define({
    combine (n) {
        return ht3(n, we5);
    }
});
function Nt4(n) {
    let t = [
        A7,
        xe3
    ];
    return n && t.push(Bt4.of(n)), t;
}
var ye5 = M6.replace({
    widget: new class extends X4 {
        toDOM(n) {
            let { state: t  } = n, e = t.facet(Bt4), r = (i1)=>{
                let o = n.lineBlockAt(n.posAtDOM(i1.target)), a = z5(n.state, o.from, o.to);
                a && n.dispatch({
                    effects: F6.of(a)
                }), i1.preventDefault();
            };
            if (e.placeholderDOM) return e.placeholderDOM(n, r);
            let s = document.createElement("span");
            return s.textContent = e.placeholderText, s.setAttribute("aria-label", t.phrase("folded code")), s.title = t.phrase("unfold"), s.className = "cm-foldPlaceholder", s.onclick = r, s;
        }
    }
}), ve5 = {
    openText: "\u2304",
    closedText: "\u203A",
    markerDOM: null,
    domEventHandlers: {}
}, B8 = class extends _4 {
    constructor(t, e){
        super(), this.config = t, this.open = e;
    }
    eq(t) {
        return this.config == t.config && this.open == t.open;
    }
    toDOM(t) {
        if (this.config.markerDOM) return this.config.markerDOM(this.open);
        let e = document.createElement("span");
        return e.textContent = this.open ? this.config.openText : this.config.closedText, e.title = t.state.phrase(this.open ? "Fold line" : "Unfold line"), e;
    }
};
function tn2(n = {}) {
    let t = Object.assign(Object.assign({}, ve5), n), e = new B8(t, !0), r = new B8(t, !1), s = V4.fromClass(class {
        constructor(o){
            this.from = o.viewport.from, this.markers = this.buildMarkers(o);
        }
        update(o) {
            (o.docChanged || o.viewportChanged || o.startState.facet(P7) != o.state.facet(P7) || o.startState.field(A7, !1) != o.state.field(A7, !1) || m6(o.startState) != m6(o.state)) && (this.markers = this.buildMarkers(o.view));
        }
        buildMarkers(o) {
            let a = new Z2;
            for (let l of o.viewportLineBlocks){
                let h = z5(o.state, l.from, l.to) ? r : V7(o.state, l.from, l.to) ? e : null;
                h && a.add(l.from, l.from, h);
            }
            return a.finish();
        }
    }), { domEventHandlers: i1  } = t;
    return [
        s,
        mo2({
            class: "cm-foldGutter",
            markers (o) {
                var a;
                return ((a = o.plugin(s)) === null || a === void 0 ? void 0 : a.markers) || P3.empty;
            },
            initialSpacer () {
                return new B8(t, !1);
            },
            domEventHandlers: Object.assign(Object.assign({}, i1), {
                click: (o, a, l)=>{
                    if (i1.click && i1.click(o, a, l)) return !0;
                    let h = z5(o.state, a.from, a.to);
                    if (h) return o.dispatch({
                        effects: F6.of(h)
                    }), !0;
                    let u = V7(o.state, a.from, a.to);
                    return u ? (o.dispatch({
                        effects: Q7.of(u)
                    }), !0) : !1;
                }
            })
        }),
        Nt4()
    ];
}
var xe3 = C6.baseTheme({
    ".cm-foldPlaceholder": {
        backgroundColor: "#eee",
        border: "1px solid #ddd",
        color: "#888",
        borderRadius: ".2em",
        margin: "0 1px",
        padding: "0 1px",
        cursor: "pointer"
    },
    ".cm-foldGutter span": {
        padding: "0 1px",
        cursor: "pointer"
    }
}), D6 = class {
    constructor(t, e){
        let r;
        function s(a) {
            let l = T6.newName();
            return (r || (r = Object.create(null)))["." + l] = a, l;
        }
        let i1 = typeof e.all == "string" ? e.all : e.all ? s(e.all) : void 0, o = e.scope;
        this.scope = o instanceof c4 ? (a)=>a.prop(T10) == o.data : o ? (a)=>a == o : void 0, this.style = W4(t.map((a)=>({
                tag: a.tag,
                class: a.class || s(Object.assign({}, a, {
                    tag: null
                }))
            })), {
            all: i1
        }).style, this.module = r ? new T6(r) : null, this.themeType = e.themeType;
    }
    static define(t, e) {
        return new D6(t, e || {});
    }
}, nt5 = A3.define(), Mt3 = A3.define({
    combine (n) {
        return n.length ? [
            n[0]
        ] : null;
    }
});
function W5(n) {
    let t = n.facet(nt5);
    return t.length ? t : n.facet(Mt3);
}
function en1(n, t) {
    let e = [
        Se6
    ], r;
    return n instanceof D6 && (n.module && e.push(C6.styleModule.of(n.module)), r = n.themeType), t?.fallback ? e.push(Mt3.of(n)) : r ? e.push(nt5.computeN([
        C6.darkTheme
    ], (s)=>s.facet(C6.darkTheme) == (r == "dark") ? [
            n
        ] : [])) : e.push(nt5.of(n)), e;
}
var rt5 = class {
    constructor(t){
        this.markCache = Object.create(null), this.tree = m6(t.state), this.decorations = this.buildDeco(t, W5(t.state));
    }
    update(t) {
        let e = m6(t.state), r = W5(t.state), s = r != W5(t.startState);
        e.length < t.view.viewport.to && !s && e.type == this.tree.type ? this.decorations = this.decorations.map(t.changes) : (e != this.tree || t.viewportChanged || s) && (this.tree = e, this.decorations = this.buildDeco(t.view, r));
    }
    buildDeco(t, e) {
        if (!e || !this.tree.length) return M6.none;
        let r = new Z2;
        for (let { from: s , to: i1  } of t.visibleRanges)$4(this.tree, e, (o, a, l)=>{
            r.add(o, a, this.markCache[l] || (this.markCache[l] = M6.mark({
                class: l
            })));
        }, s, i1);
        return r.finish();
    }
}, Se6 = lt3.high(V4.fromClass(rt5, {
    decorations: (n)=>n.decorations
})), rn2 = D6.define([
    {
        tag: s5.meta,
        color: "#7a757a"
    },
    {
        tag: s5.link,
        textDecoration: "underline"
    },
    {
        tag: s5.heading,
        textDecoration: "underline",
        fontWeight: "bold"
    },
    {
        tag: s5.emphasis,
        fontStyle: "italic"
    },
    {
        tag: s5.strong,
        fontWeight: "bold"
    },
    {
        tag: s5.strikethrough,
        textDecoration: "line-through"
    },
    {
        tag: s5.keyword,
        color: "#708"
    },
    {
        tag: [
            s5.atom,
            s5.bool,
            s5.url,
            s5.contentSeparator,
            s5.labelName
        ],
        color: "#219"
    },
    {
        tag: [
            s5.literal,
            s5.inserted
        ],
        color: "#164"
    },
    {
        tag: [
            s5.string,
            s5.deleted
        ],
        color: "#a11"
    },
    {
        tag: [
            s5.regexp,
            s5.escape,
            s5.special(s5.string)
        ],
        color: "#e40"
    },
    {
        tag: s5.definition(s5.variableName),
        color: "#00f"
    },
    {
        tag: s5.local(s5.variableName),
        color: "#30a"
    },
    {
        tag: [
            s5.typeName,
            s5.namespace
        ],
        color: "#085"
    },
    {
        tag: s5.className,
        color: "#167"
    },
    {
        tag: [
            s5.special(s5.variableName),
            s5.macroName
        ],
        color: "#256"
    },
    {
        tag: s5.definition(s5.propertyName),
        color: "#00c"
    },
    {
        tag: s5.comment,
        color: "#940"
    },
    {
        tag: s5.invalid,
        color: "#f00"
    }
]), Pe4 = C6.baseTheme({
    "&.cm-focused .cm-matchingBracket": {
        backgroundColor: "#328c8252"
    },
    "&.cm-focused .cm-nonmatchingBracket": {
        backgroundColor: "#bb555544"
    }
}), Et4 = 1e4, Ft4 = "()[]{}", Rt3 = A3.define({
    combine (n) {
        return ht3(n, {
            afterCursor: !0,
            brackets: Ft4,
            maxScanDistance: Et4,
            renderMatch: Te4
        });
    }
}), Ae6 = M6.mark({
    class: "cm-matchingBracket"
}), Ce6 = M6.mark({
    class: "cm-nonmatchingBracket"
});
function Te4(n) {
    let t = [], e = n.matched ? Ae6 : Ce6;
    return t.push(e.range(n.start.from, n.start.to)), n.end && t.push(e.range(n.end.from, n.end.to)), t;
}
var De5 = F3.define({
    create () {
        return M6.none;
    },
    update (n, t) {
        if (!t.docChanged && !t.selection) return n;
        let e = [], r = t.state.facet(Rt3);
        for (let s of t.state.selection.ranges){
            if (!s.empty) continue;
            let i1 = R7(t.state, s.head, -1, r) || s.head > 0 && R7(t.state, s.head - 1, 1, r) || r.afterCursor && (R7(t.state, s.head, 1, r) || s.head < t.state.doc.length && R7(t.state, s.head + 1, -1, r));
            i1 && (e = e.concat(r.renderMatch(i1, t.state)));
        }
        return M6.set(e, !0);
    },
    provide: (n)=>C6.decorations.from(n)
}), Ie5 = [
    De5,
    Pe4
];
function sn2(n = {}) {
    return [
        Rt3.of(n),
        Ie5
    ];
}
function st5(n, t, e) {
    let r = n.prop(t < 0 ? w5.openedBy : w5.closedBy);
    if (r) return r;
    if (n.name.length == 1) {
        let s = e.indexOf(n.name);
        if (s > -1 && s % 2 == (t < 0 ? 1 : 0)) return [
            e[s + t]
        ];
    }
    return null;
}
function R7(n, t, e, r = {}) {
    let s = r.maxScanDistance || Et4, i1 = r.brackets || Ft4, o = m6(n), a = o.resolveInner(t, e);
    for(let l = a; l; l = l.parent){
        let h = st5(l.type, e, i1);
        if (h && l.from < l.to) return Oe5(n, t, e, l, h, i1);
    }
    return Be4(n, t, e, o, a.type, s, i1);
}
function Oe5(n, t, e, r, s, i1) {
    let o = r.parent, a = {
        from: r.from,
        to: r.to
    }, l = 0, h = o?.cursor();
    if (h && (e < 0 ? h.childBefore(r.from) : h.childAfter(r.to))) do if (e < 0 ? h.to <= r.from : h.from >= r.to) {
        if (l == 0 && s.indexOf(h.type.name) > -1 && h.from < h.to) return {
            start: a,
            end: {
                from: h.from,
                to: h.to
            },
            matched: !0
        };
        if (st5(h.type, e, i1)) l++;
        else if (st5(h.type, -e, i1) && (l--, l == 0)) return {
            start: a,
            end: h.from == h.to ? void 0 : {
                from: h.from,
                to: h.to
            },
            matched: !1
        };
    }
    while (e < 0 ? h.prevSibling() : h.nextSibling())
    return {
        start: a,
        matched: !1
    };
}
function Be4(n, t, e, r, s, i1, o) {
    let a = e < 0 ? n.sliceDoc(t - 1, t) : n.sliceDoc(t, t + 1), l = o.indexOf(a);
    if (l < 0 || l % 2 == 0 != e > 0) return null;
    let h = {
        from: e < 0 ? t - 1 : t,
        to: e > 0 ? t + 1 : t
    }, u = n.doc.iterRange(t, e > 0 ? n.doc.length : 0), d1 = 0;
    for(let g = 0; !u.next().done && g <= i1;){
        let b = u.value;
        e < 0 && (g += b.length);
        let X = t + g * e;
        for(let C = e > 0 ? 0 : b.length - 1, $t = e > 0 ? b.length : -1; C != $t; C += e){
            let Y = o.indexOf(b[C]);
            if (!(Y < 0 || r.resolve(X + C, 1).type != s)) if (Y % 2 == 0 == e > 0) d1++;
            else {
                if (d1 == 1) return {
                    start: h,
                    end: {
                        from: X + C,
                        to: X + C + 1
                    },
                    matched: Y >> 1 == l >> 1
                };
                d1--;
            }
        }
        e > 0 && (g += b.length);
    }
    return u.done ? {
        start: h,
        matched: !1
    } : null;
}
function pt4(n, t, e, r = 0, s = 0) {
    t == null && (t = n.search(/[^\s\u00a0]/), t == -1 && (t = n.length));
    let i1 = s;
    for(let o = r; o < t; o++)n.charCodeAt(o) == 9 ? i1 += e - i1 % e : i1++;
    return i1;
}
var G5 = class {
    constructor(t, e, r){
        this.string = t, this.tabSize = e, this.indentUnit = r, this.pos = 0, this.start = 0, this.lastColumnPos = 0, this.lastColumnValue = 0;
    }
    eol() {
        return this.pos >= this.string.length;
    }
    sol() {
        return this.pos == 0;
    }
    peek() {
        return this.string.charAt(this.pos) || void 0;
    }
    next() {
        if (this.pos < this.string.length) return this.string.charAt(this.pos++);
    }
    eat(t) {
        let e = this.string.charAt(this.pos), r;
        if (typeof t == "string" ? r = e == t : r = e && (t instanceof RegExp ? t.test(e) : t(e)), r) return ++this.pos, e;
    }
    eatWhile(t) {
        let e = this.pos;
        for(; this.eat(t););
        return this.pos > e;
    }
    eatSpace() {
        let t = this.pos;
        for(; /[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;
        return this.pos > t;
    }
    skipToEnd() {
        this.pos = this.string.length;
    }
    skipTo(t) {
        let e = this.string.indexOf(t, this.pos);
        if (e > -1) return this.pos = e, !0;
    }
    backUp(t) {
        this.pos -= t;
    }
    column() {
        return this.lastColumnPos < this.start && (this.lastColumnValue = pt4(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue), this.lastColumnPos = this.start), this.lastColumnValue;
    }
    indentation() {
        return pt4(this.string, null, this.tabSize);
    }
    match(t, e, r) {
        if (typeof t == "string") {
            let s = (o)=>r ? o.toLowerCase() : o, i1 = this.string.substr(this.pos, t.length);
            return s(i1) == s(t) ? (e !== !1 && (this.pos += t.length), !0) : null;
        } else {
            let s1 = this.string.slice(this.pos).match(t);
            return s1 && s1.index > 0 ? null : (s1 && e !== !1 && (this.pos += s1[0].length), s1);
        }
    }
    current() {
        return this.string.slice(this.start, this.pos);
    }
};
function Ne5(n) {
    return {
        token: n.token,
        blankLine: n.blankLine || (()=>{}),
        startState: n.startState || (()=>!0),
        copyState: n.copyState || Me5,
        indent: n.indent || (()=>null),
        languageData: n.languageData || {},
        tokenTable: n.tokenTable || ht4
    };
}
function Me5(n) {
    if (typeof n != "object") return n;
    let t = {};
    for(let e in n){
        let r = n[e];
        t[e] = r instanceof Array ? r.slice() : r;
    }
    return t;
}
var q7 = class extends c4 {
    constructor(t){
        let e = yt4(t.languageData), r = Ne5(t), s, i1 = new class extends ye4 {
            createParse(o, a, l) {
                return new it5(s, o, a, l);
            }
        };
        super(e, i1, [
            St4.of((o, a)=>this.getIndent(o, a))
        ]), this.topNode = Ue5(e), s = this, this.streamParser = r, this.stateAfter = new w5({
            perNode: !0
        }), this.tokenTable = t.tokenTable ? new H5(r.tokenTable) : Re5;
    }
    static define(t) {
        return new q7(t);
    }
    getIndent(t, e) {
        let r = m6(t.state), s = r.resolve(e);
        for(; s && s.type != this.topNode;)s = s.parent;
        if (!s) return null;
        let i1 = at4(this, r, 0, s.from, e), o, a;
        if (i1 ? (a = i1.state, o = i1.pos + 1) : (a = this.streamParser.startState(t.unit), o = 0), e - o > 1e4) return null;
        for(; o < e;){
            let h = t.state.doc.lineAt(o), u = Math.min(e, h.to);
            if (h.length) {
                let d1 = new G5(h.text, t.state.tabSize, t.unit);
                for(; d1.pos < u - h.from;)Wt4(this.streamParser.token, d1, a);
            } else this.streamParser.blankLine(a, t.unit);
            if (u == e) break;
            o = h.to + 1;
        }
        let { text: l  } = t.lineAt(e);
        return this.streamParser.indent(a, /^\s*(.*)/.exec(l)[1], t);
    }
    get allowsNesting() {
        return !1;
    }
};
function at4(n, t, e, r, s) {
    let i1 = e >= r && e + t.length <= s && t.prop(n.stateAfter);
    if (i1) return {
        state: n.streamParser.copyState(i1),
        pos: e + t.length
    };
    for(let o = t.children.length - 1; o >= 0; o--){
        let a = t.children[o], l = e + t.positions[o], h = a instanceof P5 && l < s && at4(n, a, l, r, s);
        if (h) return h;
    }
    return null;
}
function Ut4(n, t, e, r, s) {
    if (s && e <= 0 && r >= t.length) return t;
    !s && t.type == n.topNode && (s = !0);
    for(let i1 = t.children.length - 1; i1 >= 0; i1--){
        let o = t.positions[i1], a = t.children[i1], l;
        if (o < r && a instanceof P5) {
            if (!(l = Ut4(n, a, e - o, r - o, s))) break;
            return s ? new P5(t.type, t.children.slice(0, i1).concat(l), t.positions.slice(0, i1 + 1), o + l.length) : l;
        }
    }
    return null;
}
function Ee5(n, t, e, r) {
    for (let s of t){
        let i1 = s.from + (s.openStart ? 25 : 0), o = s.to - (s.openEnd ? 25 : 0), a = i1 <= e && o > e && at4(n, s.tree, 0 - s.offset, e, o), l;
        if (a && (l = Ut4(n, s.tree, e + s.offset, a.pos + s.offset, !1))) return {
            state: a.state,
            tree: l
        };
    }
    return {
        state: n.streamParser.startState(r ? j6(r) : 4),
        tree: P5.empty
    };
}
var it5 = class {
    constructor(t, e, r, s){
        this.lang = t, this.input = e, this.fragments = r, this.ranges = s, this.stoppedAt = null, this.chunks = [], this.chunkPos = [], this.chunk = [], this.chunkReused = void 0, this.rangeIndex = 0, this.to = s[s.length - 1].to;
        let i1 = x6.get(), o = s[0].from, { state: a , tree: l  } = Ee5(t, r, o, i1?.state);
        this.state = a, this.parsedPos = this.chunkStart = o + l.length;
        for(let h = 0; h < l.children.length; h++)this.chunks.push(l.children[h]), this.chunkPos.push(l.positions[h]);
        i1 && this.parsedPos < i1.viewport.from - 1e5 && (this.state = this.lang.streamParser.startState(j6(i1.state)), i1.skipUntilInView(this.parsedPos, i1.viewport.from), this.parsedPos = i1.viewport.from), this.moveRangeIndex();
    }
    advance() {
        let t = x6.get(), e = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt), r = Math.min(e, this.chunkStart + 2048);
        for(t && (r = Math.min(r, t.viewport.to)); this.parsedPos < r;)this.parseLine(t);
        return this.chunkStart < this.parsedPos && this.finishChunk(), this.parsedPos >= e ? this.finish() : t && this.parsedPos >= t.viewport.to ? (t.skipUntilInView(this.parsedPos, e), this.finish()) : null;
    }
    stopAt(t) {
        this.stoppedAt = t;
    }
    lineAfter(t) {
        let e = this.input.chunk(t);
        if (this.input.lineChunks) e == `
` && (e = "");
        else {
            let r = e.indexOf(`
`);
            r > -1 && (e = e.slice(0, r));
        }
        return t + e.length <= this.to ? e : e.slice(0, this.to - t);
    }
    nextLine() {
        let t = this.parsedPos, e = this.lineAfter(t), r = t + e.length;
        for(let s = this.rangeIndex;;){
            let i1 = this.ranges[s].to;
            if (i1 >= r || (e = e.slice(0, i1 - (r - e.length)), s++, s == this.ranges.length)) break;
            let o = this.ranges[s].from, a = this.lineAfter(o);
            e += a, r = o + a.length;
        }
        return {
            line: e,
            end: r
        };
    }
    skipGapsTo(t, e, r) {
        for(;;){
            let s = this.ranges[this.rangeIndex].to, i1 = t + e;
            if (r > 0 ? s > i1 : s >= i1) break;
            e += this.ranges[++this.rangeIndex].from - s;
        }
        return e;
    }
    moveRangeIndex() {
        for(; this.ranges[this.rangeIndex].to < this.parsedPos;)this.rangeIndex++;
    }
    emitToken(t, e, r, s, i1) {
        if (this.ranges.length > 1) {
            i1 = this.skipGapsTo(e, i1, 1), e += i1;
            let o = this.chunk.length;
            i1 = this.skipGapsTo(r, i1, -1), r += i1, s += this.chunk.length - o;
        }
        return this.chunk.push(t, e, r, s), i1;
    }
    parseLine(t) {
        let { line: e , end: r  } = this.nextLine(), s = 0, { streamParser: i1  } = this.lang, o = new G5(e, t ? t.state.tabSize : 4, t ? j6(t.state) : 2);
        if (o.eol()) i1.blankLine(this.state, o.indentUnit);
        else for(; !o.eol();){
            let a = Wt4(i1.token, o, this.state);
            if (a && (s = this.emitToken(this.lang.tokenTable.resolve(a), this.parsedPos + o.start, this.parsedPos + o.pos, 4, s)), o.start > 1e4) break;
        }
        this.parsedPos = r, this.moveRangeIndex(), this.parsedPos < this.to && this.parsedPos++;
    }
    finishChunk() {
        let t = P5.build({
            buffer: this.chunk,
            start: this.chunkStart,
            length: this.parsedPos - this.chunkStart,
            nodeSet: Fe4,
            topID: 0,
            maxBufferLength: 2048,
            reused: this.chunkReused
        });
        t = new P5(t.type, t.children, t.positions, t.length, [
            [
                this.lang.stateAfter,
                this.lang.streamParser.copyState(this.state)
            ]
        ]), this.chunks.push(t), this.chunkPos.push(this.chunkStart - this.ranges[0].from), this.chunk = [], this.chunkReused = void 0, this.chunkStart = this.parsedPos;
    }
    finish() {
        return new P5(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
    }
};
function Wt4(n, t, e) {
    t.start = t.pos;
    for(let r = 0; r < 10; r++){
        let s = n(t, e);
        if (t.pos > t.start) return s;
    }
    throw new Error("Stream parser failed to advance stream.");
}
var ht4 = Object.create(null), E7 = [
    N4.none
], Fe4 = new Z3(E7), mt5 = [], Lt4 = Object.create(null);
for (let [n6, t7] of [
    [
        "variable",
        "variableName"
    ],
    [
        "variable-2",
        "variableName.special"
    ],
    [
        "string-2",
        "string.special"
    ],
    [
        "def",
        "variableName.definition"
    ],
    [
        "tag",
        "typeName"
    ],
    [
        "attribute",
        "propertyName"
    ],
    [
        "type",
        "typeName"
    ],
    [
        "builtin",
        "variableName.standard"
    ],
    [
        "qualifier",
        "modifier"
    ],
    [
        "error",
        "invalid"
    ],
    [
        "header",
        "heading"
    ],
    [
        "property",
        "propertyName"
    ]
])Lt4[n6] = jt4(ht4, t7);
var H5 = class {
    constructor(t){
        this.extra = t, this.table = Object.assign(Object.create(null), Lt4);
    }
    resolve(t) {
        return t ? this.table[t] || (this.table[t] = jt4(this.extra, t)) : 0;
    }
}, Re5 = new H5(ht4);
function tt4(n, t) {
    mt5.indexOf(n) > -1 || (mt5.push(n), console.warn(t));
}
function jt4(n, t) {
    let e = null;
    for (let i1 of t.split(".")){
        let o = n[i1] || s5[i1];
        o ? typeof o == "function" ? e ? e = o(e) : tt4(i1, `Modifier ${i1} used at start of tag`) : e ? tt4(i1, `Tag ${i1} used as modifier`) : e = o : tt4(i1, `Unknown highlighting tag ${i1}`);
    }
    if (!e) return 0;
    let r = t.replace(/ /g, "_"), s = N4.define({
        id: E7.length,
        name: r,
        props: [
            Z4({
                [r]: e
            })
        ]
    });
    return E7.push(s), s.id;
}
function Ue5(n) {
    let t = N4.define({
        id: E7.length,
        name: "Document",
        props: [
            T10.add(()=>n)
        ]
    });
    return E7.push(t), t;
}
var ot4 = (e)=>{
    let t = j7(e.state);
    return t.line ? lt5(e) : t.block ? st6(e) : !1;
};
function C8(e, t) {
    return ({ state: r , dispatch: n  })=>{
        if (r.readOnly) return !1;
        let l = e(t, r);
        return l ? (n(r.update(l)), !0) : !1;
    };
}
var lt5 = C8(ee6, 0), on2 = C8(ee6, 1), ln2 = C8(ee6, 2), ct5 = C8(w7, 0), cn1 = C8(w7, 1), sn3 = C8(w7, 2), st6 = C8((e, t)=>w7(e, t, ut5(t)), 0);
function j7(e, t = e.selection.main.head) {
    let r = e.languageDataAt("commentTokens", t);
    return r.length ? r[0] : {};
}
var M10 = 50;
function it6(e, { open: t , close: r  }, n, l) {
    let o = e.sliceDoc(n - M10, n), c = e.sliceDoc(l, l + M10), s = /\s*$/.exec(o)[0].length, i1 = /^\s*/.exec(c)[0].length, u = o.length - s;
    if (o.slice(u - t.length, u) == t && c.slice(i1, i1 + r.length) == r) return {
        open: {
            pos: n - s,
            margin: s && 1
        },
        close: {
            pos: l + i1,
            margin: i1 && 1
        }
    };
    let f, a;
    l - n <= 2 * M10 ? f = a = e.sliceDoc(n, l) : (f = e.sliceDoc(n, n + M10), a = e.sliceDoc(l - M10, l));
    let d1 = /^\s*/.exec(f)[0].length, S1 = /\s*$/.exec(a)[0].length, L = a.length - S1 - r.length;
    return f.slice(d1, d1 + t.length) == t && a.slice(L, L + r.length) == r ? {
        open: {
            pos: n + d1 + t.length,
            margin: /\s/.test(f.charAt(d1 + t.length)) ? 1 : 0
        },
        close: {
            pos: l - S1 - r.length,
            margin: /\s/.test(a.charAt(L - 1)) ? 1 : 0
        }
    } : null;
}
function ut5(e) {
    let t = [];
    for (let r of e.selection.ranges){
        let n = e.doc.lineAt(r.from), l = r.to <= n.to ? n : e.doc.lineAt(r.to), o = t.length - 1;
        o >= 0 && t[o].to > n.from ? t[o].to = l.to : t.push({
            from: n.from,
            to: l.to
        });
    }
    return t;
}
function w7(e, t, r = t.selection.ranges) {
    let n = r.map((o)=>j7(t, o.from).block);
    if (!n.every((o)=>o)) return null;
    let l = r.map((o, c)=>it6(t, n[c], o.from, o.to));
    if (e != 2 && !l.every((o)=>o)) return {
        changes: t.changes(r.map((o, c)=>l[c] ? [] : [
                {
                    from: o.from,
                    insert: n[c].open + " "
                },
                {
                    from: o.to,
                    insert: " " + n[c].close
                }
            ]))
    };
    if (e != 1 && l.some((o)=>o)) {
        let o = [];
        for(let c = 0, s; c < l.length; c++)if (s = l[c]) {
            let i1 = n[c], { open: u , close: f  } = s;
            o.push({
                from: u.pos - i1.open.length,
                to: u.pos + u.margin
            }, {
                from: f.pos - f.margin,
                to: f.pos + i1.close.length
            });
        }
        return {
            changes: o
        };
    }
    return null;
}
function ee6(e, t, r = t.selection.ranges) {
    let n = [], l = -1;
    for (let { from: o , to: c  } of r){
        let s = n.length, i1 = 1e9;
        for(let u = o; u <= c;){
            let f = t.doc.lineAt(u);
            if (f.from > l && (o == c || c > f.from)) {
                l = f.from;
                let a = j7(t, u).line;
                if (!a) continue;
                let d1 = /^\s*/.exec(f.text)[0].length, S1 = d1 == f.length, L = f.text.slice(d1, d1 + a.length) == a ? d1 : -1;
                d1 < f.text.length && d1 < i1 && (i1 = d1), n.push({
                    line: f,
                    comment: L,
                    token: a,
                    indent: d1,
                    empty: S1,
                    single: !1
                });
            }
            u = f.to + 1;
        }
        if (i1 < 1e9) for(let u1 = s; u1 < n.length; u1++)n[u1].indent < n[u1].line.text.length && (n[u1].indent = i1);
        n.length == s + 1 && (n[s].single = !0);
    }
    if (e != 2 && n.some((o)=>o.comment < 0 && (!o.empty || o.single))) {
        let o1 = [];
        for (let { line: s1 , token: i11 , indent: u2 , empty: f1 , single: a1  } of n)(a1 || !f1) && o1.push({
            from: s1.from + u2,
            insert: i11 + " "
        });
        let c1 = t.changes(o1);
        return {
            changes: c1,
            selection: t.selection.map(c1, 1)
        };
    } else if (e != 1 && n.some((o)=>o.comment >= 0)) {
        let o2 = [];
        for (let { line: c2 , comment: s2 , token: i2  } of n)if (s2 >= 0) {
            let u3 = c2.from + s2, f2 = u3 + i2.length;
            c2.text[f2 - c2.from] == " " && f2++, o2.push({
                from: u3,
                to: f2
            });
        }
        return {
            changes: o2
        };
    }
    return null;
}
var X7 = N2.define(), ft3 = N2.define(), at5 = A3.define(), Be5 = A3.define({
    combine (e) {
        return ht3(e, {
            minDepth: 100,
            newGroupDelay: 500
        }, {
            minDepth: Math.max,
            newGroupDelay: Math.min
        });
    }
});
function ht5(e) {
    let t = 0;
    return e.iterChangedRanges((r, n)=>t = n), t;
}
var U5 = F3.define({
    create () {
        return g8.empty;
    },
    update (e, t) {
        let r = t.state.facet(Be5), n = t.annotation(X7);
        if (n) {
            let i1 = t.docChanged ? g5.single(ht5(t.changes)) : void 0, u = m7.fromTransaction(t, i1), f = n.side, a = f == 0 ? e.undone : e.done;
            return u ? a = R8(a, a.length, r.minDepth, u) : a = Le5(a, t.startState.selection), new g8(f == 0 ? n.rest : a, f == 0 ? a : n.rest);
        }
        let l = t.annotation(ft3);
        if ((l == "full" || l == "before") && (e = e.isolate()), t.annotation(S4.addToHistory) === !1) return t.changes.empty ? e : e.addMapping(t.changes.desc);
        let o = m7.fromTransaction(t), c = t.annotation(S4.time), s = t.annotation(S4.userEvent);
        return o ? e = e.addChanges(o, c, s, r.newGroupDelay, r.minDepth) : t.selection && (e = e.addSelection(t.startState.selection, c, s, r.newGroupDelay)), (l == "full" || l == "after") && (e = e.isolate()), e;
    },
    toJSON (e) {
        return {
            done: e.done.map((t)=>t.toJSON()),
            undone: e.undone.map((t)=>t.toJSON())
        };
    },
    fromJSON (e) {
        return new g8(e.done.map(m7.fromJSON), e.undone.map(m7.fromJSON));
    }
});
function un1(e = {}) {
    return [
        U5,
        Be5.of(e),
        C6.domEventHandlers({
            beforeinput (t, r) {
                let n = t.inputType == "historyUndo" ? Se7 : t.inputType == "historyRedo" ? Ce7 : null;
                return n ? (t.preventDefault(), n(r)) : !1;
            }
        })
    ];
}
function N7(e, t) {
    return function({ state: r , dispatch: n  }) {
        if (!t && r.readOnly) return !1;
        let l = r.field(U5, !1);
        if (!l) return !1;
        let o = l.pop(e, r, t);
        return o ? (n(o), !0) : !1;
    };
}
var Se7 = N7(0, !1), Ce7 = N7(1, !1), dt5 = N7(0, !0), mt6 = N7(1, !0);
function De6(e) {
    return function(t) {
        let r = t.field(U5, !1);
        if (!r) return 0;
        let n = e == 0 ? r.done : r.undone;
        return n.length - (n.length && !n[0].changes ? 1 : 0);
    };
}
var an2 = De6(0), hn2 = De6(1), m7 = class {
    constructor(t, r, n, l, o){
        this.changes = t, this.effects = r, this.mapped = n, this.startSelection = l, this.selectionsAfter = o;
    }
    setSelAfter(t) {
        return new m7(this.changes, this.effects, this.mapped, this.startSelection, t);
    }
    toJSON() {
        var t, r, n;
        return {
            changes: (t = this.changes) === null || t === void 0 ? void 0 : t.toJSON(),
            mapped: (r = this.mapped) === null || r === void 0 ? void 0 : r.toJSON(),
            startSelection: (n = this.startSelection) === null || n === void 0 ? void 0 : n.toJSON(),
            selectionsAfter: this.selectionsAfter.map((l)=>l.toJSON())
        };
    }
    static fromJSON(t) {
        return new m7(t.changes && x4.fromJSON(t.changes), [], t.mapped && O3.fromJSON(t.mapped), t.startSelection && g5.fromJSON(t.startSelection), t.selectionsAfter.map(g5.fromJSON));
    }
    static fromTransaction(t, r) {
        let n = p6;
        for (let l of t.startState.facet(at5)){
            let o = l(t);
            o.length && (n = n.concat(o));
        }
        return !n.length && t.changes.empty ? null : new m7(t.changes.invert(t.startState.doc), n, void 0, r || t.startState.selection, p6);
    }
    static selection(t) {
        return new m7(void 0, p6, void 0, void 0, t);
    }
};
function R8(e, t, r, n) {
    let l = t + 1 > r + 20 ? t - r - 1 : 0, o = e.slice(l, t);
    return o.push(n), o;
}
function pt5(e, t) {
    let r = [], n = !1;
    return e.iterChangedRanges((l, o)=>r.push(l, o)), t.iterChangedRanges((l, o, c, s)=>{
        for(let i1 = 0; i1 < r.length;){
            let u = r[i1++], f = r[i1++];
            s >= u && c <= f && (n = !0);
        }
    }), n;
}
function gt3(e, t) {
    return e.ranges.length == t.ranges.length && e.ranges.filter((r, n)=>r.empty != t.ranges[n].empty).length === 0;
}
function xe4(e, t) {
    return e.length ? t.length ? e.concat(t) : e : t;
}
var p6 = [], yt5 = 200;
function Le5(e, t) {
    if (e.length) {
        let r = e[e.length - 1], n = r.selectionsAfter.slice(Math.max(0, r.selectionsAfter.length - yt5));
        return n.length && n[n.length - 1].eq(t) ? e : (n.push(t), R8(e, e.length - 1, 1e9, r.setSelAfter(n)));
    } else return [
        m7.selection([
            t
        ])
    ];
}
function kt3(e) {
    let t = e[e.length - 1], r = e.slice();
    return r[e.length - 1] = t.setSelAfter(t.selectionsAfter.slice(0, t.selectionsAfter.length - 1)), r;
}
function W6(e, t) {
    if (!e.length) return e;
    let r = e.length, n = p6;
    for(; r;){
        let l = At5(e[r - 1], t, n);
        if (l.changes && !l.changes.empty || l.effects.length) {
            let o = e.slice(0, r);
            return o[r - 1] = l, o;
        } else t = l.mapped, r--, n = l.selectionsAfter;
    }
    return n.length ? [
        m7.selection(n)
    ] : p6;
}
function At5(e, t, r) {
    let n = xe4(e.selectionsAfter.length ? e.selectionsAfter.map((s)=>s.map(t)) : p6, r);
    if (!e.changes) return m7.selection(n);
    let l = e.changes.map(t), o = t.mapDesc(e.changes, !0), c = e.mapped ? e.mapped.composeDesc(o) : o;
    return new m7(l, y4.mapEffects(e.effects, t), c, e.startSelection.map(o), n);
}
var Bt5 = /^(input\.type|delete)($|\.)/, g8 = class {
    constructor(t, r, n = 0, l = void 0){
        this.done = t, this.undone = r, this.prevTime = n, this.prevUserEvent = l;
    }
    isolate() {
        return this.prevTime ? new g8(this.done, this.undone) : this;
    }
    addChanges(t, r, n, l, o) {
        let c = this.done, s = c[c.length - 1];
        return s && s.changes && !s.changes.empty && t.changes && (!n || Bt5.test(n)) && (!s.selectionsAfter.length && r - this.prevTime < l && pt5(s.changes, t.changes) || n == "input.type.compose") ? c = R8(c, c.length - 1, o, new m7(t.changes.compose(s.changes), xe4(t.effects, s.effects), s.mapped, s.startSelection, p6)) : c = R8(c, c.length, o, t), new g8(c, p6, r, n);
    }
    addSelection(t, r, n, l) {
        let o = this.done.length ? this.done[this.done.length - 1].selectionsAfter : p6;
        return o.length > 0 && r - this.prevTime < l && n == this.prevUserEvent && n && /^select($|\.)/.test(n) && gt3(o[o.length - 1], t) ? this : new g8(Le5(this.done, t), this.undone, r, n);
    }
    addMapping(t) {
        return new g8(W6(this.done, t), W6(this.undone, t), this.prevTime, this.prevUserEvent);
    }
    pop(t, r, n) {
        let l = t == 0 ? this.done : this.undone;
        if (l.length == 0) return null;
        let o = l[l.length - 1];
        if (n && o.selectionsAfter.length) return r.update({
            selection: o.selectionsAfter[o.selectionsAfter.length - 1],
            annotations: X7.of({
                side: t,
                rest: kt3(l)
            }),
            userEvent: t == 0 ? "select.undo" : "select.redo",
            scrollIntoView: !0
        });
        if (o.changes) {
            let c = l.length == 1 ? p6 : l.slice(0, l.length - 1);
            return o.mapped && (c = W6(c, o.mapped)), r.update({
                changes: o.changes,
                selection: o.startSelection,
                effects: o.effects,
                annotations: X7.of({
                    side: t,
                    rest: c
                }),
                filter: !1,
                userEvent: t == 0 ? "undo" : "redo",
                scrollIntoView: !0
            });
        } else return null;
    }
};
g8.empty = new g8(p6, p6);
var dn1 = [
    {
        key: "Mod-z",
        run: Se7,
        preventDefault: !0
    },
    {
        key: "Mod-y",
        mac: "Mod-Shift-z",
        run: Ce7,
        preventDefault: !0
    },
    {
        key: "Mod-u",
        run: dt5,
        preventDefault: !0
    },
    {
        key: "Alt-u",
        mac: "Mod-Shift-u",
        run: mt6,
        preventDefault: !0
    }
];
function x7(e, t) {
    return g5.create(e.ranges.map(t), e.mainIndex);
}
function A8(e, t) {
    return e.update({
        selection: t,
        scrollIntoView: !0,
        userEvent: "select"
    });
}
function B9({ state: e , dispatch: t  }, r) {
    let n = x7(e.selection, r);
    return n.eq(e.selection) ? !1 : (t(A8(e, n)), !0);
}
function O5(e, t) {
    return g5.cursor(t ? e.to : e.from);
}
function v6(e, t) {
    return B9(e, (r)=>r.empty ? e.moveByChar(r, t) : O5(r, t));
}
function y7(e) {
    return e.textDirectionAt(e.state.selection.main.head) == R5.LTR;
}
var Me6 = (e)=>v6(e, !y7(e)), Oe6 = (e)=>v6(e, y7(e));
function G6(e, t) {
    return B9(e, (r)=>r.empty ? e.moveByGroup(r, t) : O5(r, t));
}
var St5 = (e)=>G6(e, !y7(e)), Ct4 = (e)=>G6(e, y7(e));
function Dt5(e, t, r) {
    if (t.type.prop(r)) return !0;
    let n = t.to - t.from;
    return n && (n > 2 || /[^\s,.;:]/.test(e.sliceDoc(t.from, t.to))) || t.firstChild;
}
function V8(e, t, r) {
    let n = m6(e).resolveInner(t.head), l = r ? w5.closedBy : w5.openedBy;
    for(let i1 = t.head;;){
        let u = r ? n.childAfter(i1) : n.childBefore(i1);
        if (!u) break;
        Dt5(e, u, l) ? n = u : i1 = r ? u.to : u.from;
    }
    let o = n.type.prop(l), c, s;
    return o && (c = r ? R7(e, n.from, 1) : R7(e, n.to, -1)) && c.matched ? s = r ? c.end.to : c.end.from : s = r ? n.to : n.from, g5.cursor(s, r ? -1 : 1);
}
var xt5 = (e)=>B9(e, (t)=>V8(e.state, t, !y7(e))), Lt5 = (e)=>B9(e, (t)=>V8(e.state, t, y7(e)));
function Te5(e, t) {
    return B9(e, (r)=>{
        if (!r.empty) return O5(r, t);
        let n = e.moveVertically(r, t);
        return n.head != r.head ? n : e.moveToLineBoundary(r, t);
    });
}
var Ie6 = (e)=>Te5(e, !1), Re6 = (e)=>Te5(e, !0);
function we6(e, t) {
    let { state: r  } = e, n = x7(r.selection, (s)=>s.empty ? e.moveVertically(s, t, Math.min(e.dom.clientHeight, innerHeight)) : O5(s, t));
    if (n.eq(r.selection)) return !1;
    let l = e.coordsAtPos(r.selection.main.head), o = e.scrollDOM.getBoundingClientRect(), c;
    return l && l.top > o.top && l.bottom < o.bottom && l.top - o.top <= e.scrollDOM.scrollHeight - e.scrollDOM.scrollTop - e.scrollDOM.clientHeight && (c = C6.scrollIntoView(n.main.head, {
        y: "start",
        yMargin: l.top - o.top
    })), e.dispatch(A8(r, n), {
        effects: c
    }), !0;
}
var re5 = (e)=>we6(e, !1), Y5 = (e)=>we6(e, !0);
function P8(e, t, r) {
    let n = e.lineBlockAt(t.head), l = e.moveToLineBoundary(t, r);
    if (l.head == t.head && l.head != (r ? n.to : n.from) && (l = e.moveToLineBoundary(t, r, !1)), !r && l.head == n.from && n.length) {
        let o = /^\s*/.exec(e.state.sliceDoc(n.from, Math.min(n.from + 100, n.to)))[0].length;
        o && t.head != n.from + o && (l = g5.cursor(n.from + o));
    }
    return l;
}
var oe7 = (e)=>B9(e, (t)=>P8(e, t, !0)), le8 = (e)=>B9(e, (t)=>P8(e, t, !1)), Mt4 = (e)=>B9(e, (t)=>g5.cursor(e.lineBlockAt(t.head).from, 1)), Ot5 = (e)=>B9(e, (t)=>g5.cursor(e.lineBlockAt(t.head).to, -1));
function Ue6(e, t, r) {
    let n = !1, l = x7(e.selection, (o)=>{
        let c = R7(e, o.head, -1) || R7(e, o.head, 1) || o.head > 0 && R7(e, o.head - 1, 1) || o.head < e.doc.length && R7(e, o.head + 1, -1);
        if (!c || !c.end) return o;
        n = !0;
        let s = c.start.from == o.head ? c.end.to : c.end.from;
        return r ? g5.range(o.anchor, s) : g5.cursor(s);
    });
    return n ? (t(A8(e, l)), !0) : !1;
}
var Et5 = ({ state: e , dispatch: t  })=>Ue6(e, t, !1);
function k3(e, t) {
    let r = x7(e.state.selection, (n)=>{
        let l = t(n);
        return g5.range(n.anchor, l.head, l.goalColumn);
    });
    return r.eq(e.state.selection) ? !1 : (e.dispatch(A8(e.state, r)), !0);
}
function J4(e, t) {
    return k3(e, (r)=>e.moveByChar(r, t));
}
var Ne6 = (e)=>J4(e, !y7(e)), ve6 = (e)=>J4(e, y7(e));
function F7(e, t) {
    return k3(e, (r)=>e.moveByGroup(r, t));
}
var bt3 = (e)=>F7(e, !y7(e)), Tt5 = (e)=>F7(e, y7(e));
var It5 = (e)=>k3(e, (t)=>V8(e.state, t, !y7(e))), Rt4 = (e)=>k3(e, (t)=>V8(e.state, t, y7(e)));
function Ve4(e, t) {
    return k3(e, (r)=>e.moveVertically(r, t));
}
var Pe5 = (e)=>Ve4(e, !1), Je4 = (e)=>Ve4(e, !0);
function Fe5(e, t) {
    return k3(e, (r)=>e.moveVertically(r, t, Math.min(e.dom.clientHeight, innerHeight)));
}
var ce7 = (e)=>Fe5(e, !1), se7 = (e)=>Fe5(e, !0), ie7 = (e)=>k3(e, (t)=>P8(e, t, !0)), ue7 = (e)=>k3(e, (t)=>P8(e, t, !1)), wt4 = (e)=>k3(e, (t)=>g5.cursor(e.lineBlockAt(t.head).from)), Ut5 = (e)=>k3(e, (t)=>g5.cursor(e.lineBlockAt(t.head).to)), fe6 = ({ state: e , dispatch: t  })=>(t(A8(e, {
        anchor: 0
    })), !0), ae7 = ({ state: e , dispatch: t  })=>(t(A8(e, {
        anchor: e.doc.length
    })), !0), he6 = ({ state: e , dispatch: t  })=>(t(A8(e, {
        anchor: e.selection.main.anchor,
        head: 0
    })), !0), de6 = ({ state: e , dispatch: t  })=>(t(A8(e, {
        anchor: e.selection.main.anchor,
        head: e.doc.length
    })), !0), Nt5 = ({ state: e , dispatch: t  })=>(t(e.update({
        selection: {
            anchor: 0,
            head: e.doc.length
        },
        userEvent: "select"
    })), !0), vt5 = ({ state: e , dispatch: t  })=>{
    let r = $6(e).map(({ from: n , to: l  })=>g5.range(n, Math.min(l + 1, e.doc.length)));
    return t(e.update({
        selection: g5.create(r),
        userEvent: "select"
    })), !0;
}, Gt3 = ({ state: e , dispatch: t  })=>{
    let r = x7(e.selection, (n)=>{
        var l;
        let o = m6(e).resolveInner(n.head, 1);
        for(; !(o.from < n.from && o.to >= n.to || o.to > n.to && o.from <= n.from || !(!((l = o.parent) === null || l === void 0) && l.parent));)o = o.parent;
        return g5.range(o.to, o.from);
    });
    return t(A8(e, r)), !0;
}, Vt3 = ({ state: e , dispatch: t  })=>{
    let r = e.selection, n = null;
    return r.ranges.length > 1 ? n = g5.create([
        r.main
    ]) : r.main.empty || (n = g5.create([
        g5.cursor(r.main.head)
    ])), n ? (t(A8(e, n)), !0) : !1;
};
function z6({ state: e , dispatch: t  }, r) {
    if (e.readOnly) return !1;
    let n = "delete.selection", l = e.changeByRange((o)=>{
        let { from: c , to: s  } = o;
        if (c == s) {
            let i1 = r(c);
            i1 < c ? n = "delete.backward" : i1 > c && (n = "delete.forward"), c = Math.min(c, i1), s = Math.max(s, i1);
        }
        return c == s ? {
            range: o
        } : {
            changes: {
                from: c,
                to: s
            },
            range: g5.cursor(c)
        };
    });
    return l.changes.empty ? !1 : (t(e.update(l, {
        scrollIntoView: !0,
        userEvent: n
    })), !0);
}
function q8(e, t, r) {
    if (e instanceof C6) for (let n of e.state.facet(C6.atomicRanges).map((l)=>l(e)))n.between(t, t, (l, o)=>{
        l < t && o > t && (t = r ? o : l);
    });
    return t;
}
var ze4 = (e, t)=>z6(e, (r)=>{
        let { state: n  } = e, l = n.doc.lineAt(r), o, c;
        if (!t && r > l.from && r < l.from + 200 && !/[^ \t]/.test(o = l.text.slice(0, r - l.from))) {
            if (o[o.length - 1] == "	") return r - 1;
            let s = ot3(o, n.tabSize), i1 = s % j6(n) || j6(n);
            for(let u = 0; u < i1 && o[o.length - 1 - u] == " "; u++)r--;
            c = r;
        } else c = ie4(l.text, r - l.from, t, t) + l.from, c == r && l.number != (t ? n.doc.lines : 1) && (c += t ? 1 : -1);
        return q8(e, c, t);
    }), Z6 = (e)=>ze4(e, !1), qe4 = (e)=>ze4(e, !0), $e5 = (e, t)=>z6(e, (r)=>{
        let n = r, { state: l  } = e, o = l.doc.lineAt(n), c = l.charCategorizer(n);
        for(let s = null;;){
            if (n == (t ? o.to : o.from)) {
                n == r && o.number != (t ? l.doc.lines : 1) && (n += t ? 1 : -1);
                break;
            }
            let i1 = ie4(o.text, n - o.from, t) + o.from, u = o.text.slice(Math.min(n, i1) - o.from, Math.max(n, i1) - o.from), f = c(u);
            if (s != null && f != s) break;
            (u != " " || n != r) && (s = f), n = i1;
        }
        return q8(e, n, t);
    }), Ke5 = (e)=>$e5(e, !1), Pt5 = (e)=>$e5(e, !0), We5 = (e)=>z6(e, (t)=>{
        let r = e.lineBlockAt(t).to;
        return q8(e, t < r ? r : Math.min(e.state.doc.length, t + 1), !0);
    }), Jt4 = (e)=>z6(e, (t)=>{
        let r = e.lineBlockAt(t).from;
        return q8(e, t > r ? r : Math.max(0, t - 1), !1);
    }), Ft5 = ({ state: e , dispatch: t  })=>{
    if (e.readOnly) return !1;
    let r = e.changeByRange((n)=>({
            changes: {
                from: n.from,
                to: n.to,
                insert: v5.of([
                    "",
                    ""
                ])
            },
            range: g5.cursor(n.from)
        }));
    return t(e.update(r, {
        scrollIntoView: !0,
        userEvent: "input"
    })), !0;
}, zt4 = ({ state: e , dispatch: t  })=>{
    if (e.readOnly) return !1;
    let r = e.changeByRange((n)=>{
        if (!n.empty || n.from == 0 || n.from == e.doc.length) return {
            range: n
        };
        let l = n.from, o = e.doc.lineAt(l), c = l == o.from ? l - 1 : ie4(o.text, l - o.from, !1) + o.from, s = l == o.to ? l + 1 : ie4(o.text, l - o.from, !0) + o.from;
        return {
            changes: {
                from: c,
                to: s,
                insert: e.doc.slice(l, s).append(e.doc.slice(c, l))
            },
            range: g5.cursor(s)
        };
    });
    return r.changes.empty ? !1 : (t(e.update(r, {
        scrollIntoView: !0,
        userEvent: "move.character"
    })), !0);
};
function $6(e) {
    let t = [], r = -1;
    for (let n of e.selection.ranges){
        let l = e.doc.lineAt(n.from), o = e.doc.lineAt(n.to);
        if (!n.empty && n.to == o.from && (o = e.doc.lineAt(n.to - 1)), r >= l.number) {
            let c = t[t.length - 1];
            c.to = o.to, c.ranges.push(n);
        } else t.push({
            from: l.from,
            to: o.to,
            ranges: [
                n
            ]
        });
        r = o.number + 1;
    }
    return t;
}
function He4(e, t, r) {
    if (e.readOnly) return !1;
    let n = [], l = [];
    for (let o of $6(e)){
        if (r ? o.to == e.doc.length : o.from == 0) continue;
        let c = e.doc.lineAt(r ? o.to + 1 : o.from - 1), s = c.length + 1;
        if (r) {
            n.push({
                from: o.to,
                to: c.to
            }, {
                from: o.from,
                insert: c.text + e.lineBreak
            });
            for (let i1 of o.ranges)l.push(g5.range(Math.min(e.doc.length, i1.anchor + s), Math.min(e.doc.length, i1.head + s)));
        } else {
            n.push({
                from: c.from,
                to: o.from
            }, {
                from: o.to,
                insert: e.lineBreak + c.text
            });
            for (let i11 of o.ranges)l.push(g5.range(i11.anchor - s, i11.head - s));
        }
    }
    return n.length ? (t(e.update({
        changes: n,
        scrollIntoView: !0,
        selection: g5.create(l, e.selection.mainIndex),
        userEvent: "move.line"
    })), !0) : !1;
}
var qt4 = ({ state: e , dispatch: t  })=>He4(e, t, !1), $t3 = ({ state: e , dispatch: t  })=>He4(e, t, !0);
function Qe5(e, t, r) {
    if (e.readOnly) return !1;
    let n = [];
    for (let l of $6(e))r ? n.push({
        from: l.from,
        insert: e.doc.slice(l.from, l.to) + e.lineBreak
    }) : n.push({
        from: l.to,
        insert: e.lineBreak + e.doc.slice(l.from, l.to)
    });
    return t(e.update({
        changes: n,
        scrollIntoView: !0,
        userEvent: "input.copyline"
    })), !0;
}
var Kt3 = ({ state: e , dispatch: t  })=>Qe5(e, t, !1), Wt5 = ({ state: e , dispatch: t  })=>Qe5(e, t, !0), Ht4 = (e)=>{
    if (e.state.readOnly) return !1;
    let { state: t  } = e, r = t.changes($6(t).map(({ from: l , to: o  })=>(l > 0 ? l-- : o < t.doc.length && o++, {
            from: l,
            to: o
        }))), n = x7(t.selection, (l)=>e.moveVertically(l, !0)).map(r);
    return e.dispatch({
        changes: r,
        selection: n,
        scrollIntoView: !0,
        userEvent: "delete.line"
    }), !0;
};
function Qt4(e, t) {
    if (/\(\)|\[\]|\{\}/.test(e.sliceDoc(t - 1, t + 1))) return {
        from: t,
        to: t
    };
    let r = m6(e).resolveInner(t), n = r.childBefore(t), l = r.childAfter(t), o;
    return n && l && n.to <= t && l.from >= t && (o = n.type.prop(w5.closedBy)) && o.indexOf(l.name) > -1 && e.doc.lineAt(n.to).from == e.doc.lineAt(l.from).from ? {
        from: n.to,
        to: l.from
    } : null;
}
var Xt4 = Xe5(!1), Yt4 = Xe5(!0);
function Xe5(e) {
    return ({ state: t , dispatch: r  })=>{
        if (t.readOnly) return !1;
        let n = t.changeByRange((l)=>{
            let { from: o , to: c  } = l, s = t.doc.lineAt(o), i1 = !e && o == c && Qt4(t, o);
            e && (o = c = (c <= s.to ? s : t.doc.lineAt(c)).to);
            let u = new $5(t, {
                simulateBreak: o,
                simulateDoubleBreak: !!i1
            }), f = ee5(u, o);
            for(f == null && (f = /^\s*/.exec(t.doc.lineAt(o).text)[0].length); c < s.to && /\s/.test(s.text[c - s.from]);)c++;
            i1 ? { from: o , to: c  } = i1 : o > s.from && o < s.from + 100 && !/\S/.test(s.text.slice(0, o)) && (o = s.from);
            let a = [
                "",
                te7(t, f)
            ];
            return i1 && a.push(te7(t, u.lineIndent(s.from, -1))), {
                changes: {
                    from: o,
                    to: c,
                    insert: v5.of(a)
                },
                range: g5.cursor(o + 1 + a[1].length)
            };
        });
        return r(t.update(n, {
            scrollIntoView: !0,
            userEvent: "input"
        })), !0;
    };
}
function te8(e, t) {
    let r = -1;
    return e.changeByRange((n)=>{
        let l = [];
        for(let c = n.from; c <= n.to;){
            let s = e.doc.lineAt(c);
            s.number > r && (n.empty || n.to > s.from) && (t(s, l, n), r = s.number), c = s.to + 1;
        }
        let o = e.changes(l);
        return {
            changes: l,
            range: g5.range(o.mapPos(n.anchor, 1), o.mapPos(n.head, 1))
        };
    });
}
var Zt4 = ({ state: e , dispatch: t  })=>{
    if (e.readOnly) return !1;
    let r = Object.create(null), n = new $5(e, {
        overrideIndentation: (o)=>{
            let c = r[o];
            return c ?? -1;
        }
    }), l = te8(e, (o, c, s)=>{
        let i1 = ee5(n, o.from);
        if (i1 == null) return;
        /\S/.test(o.text) || (i1 = 0);
        let u = /^\s*/.exec(o.text)[0], f = te7(e, i1);
        (u != f || s.from < o.from + u.length) && (r[o.from] = i1, c.push({
            from: o.from,
            to: o.from + u.length,
            insert: f
        }));
    });
    return l.changes.empty || t(e.update(l, {
        userEvent: "indent"
    })), !0;
}, ne6 = ({ state: e , dispatch: t  })=>e.readOnly ? !1 : (t(e.update(te8(e, (r, n)=>{
        n.push({
            from: r.from,
            insert: e.facet(Pt4)
        });
    }), {
        userEvent: "input.indent"
    })), !0), Ye4 = ({ state: e , dispatch: t  })=>e.readOnly ? !1 : (t(e.update(te8(e, (r, n)=>{
        let l = /^\s*/.exec(r.text)[0];
        if (!l) return;
        let o = ot3(l, e.tabSize), c = 0, s = te7(e, Math.max(0, o - j6(e)));
        for(; c < l.length && c < s.length && l.charCodeAt(c) == s.charCodeAt(c);)c++;
        n.push({
            from: r.from + c,
            to: r.from + l.length,
            insert: s.slice(c)
        });
    }), {
        userEvent: "delete.dedent"
    })), !0), _t3 = [
    {
        key: "Ctrl-b",
        run: Me6,
        shift: Ne6,
        preventDefault: !0
    },
    {
        key: "Ctrl-f",
        run: Oe6,
        shift: ve6
    },
    {
        key: "Ctrl-p",
        run: Ie6,
        shift: Pe5
    },
    {
        key: "Ctrl-n",
        run: Re6,
        shift: Je4
    },
    {
        key: "Ctrl-a",
        run: Mt4,
        shift: wt4
    },
    {
        key: "Ctrl-e",
        run: Ot5,
        shift: Ut5
    },
    {
        key: "Ctrl-d",
        run: qe4
    },
    {
        key: "Ctrl-h",
        run: Z6
    },
    {
        key: "Ctrl-k",
        run: We5
    },
    {
        key: "Ctrl-Alt-h",
        run: Ke5
    },
    {
        key: "Ctrl-o",
        run: Ft5
    },
    {
        key: "Ctrl-t",
        run: zt4
    },
    {
        key: "Ctrl-v",
        run: Y5
    }
], jt5 = [
    {
        key: "ArrowLeft",
        run: Me6,
        shift: Ne6,
        preventDefault: !0
    },
    {
        key: "Mod-ArrowLeft",
        mac: "Alt-ArrowLeft",
        run: St5,
        shift: bt3
    },
    {
        mac: "Cmd-ArrowLeft",
        run: le8,
        shift: ue7
    },
    {
        key: "ArrowRight",
        run: Oe6,
        shift: ve6,
        preventDefault: !0
    },
    {
        key: "Mod-ArrowRight",
        mac: "Alt-ArrowRight",
        run: Ct4,
        shift: Tt5
    },
    {
        mac: "Cmd-ArrowRight",
        run: oe7,
        shift: ie7
    },
    {
        key: "ArrowUp",
        run: Ie6,
        shift: Pe5,
        preventDefault: !0
    },
    {
        mac: "Cmd-ArrowUp",
        run: fe6,
        shift: he6
    },
    {
        mac: "Ctrl-ArrowUp",
        run: re5,
        shift: ce7
    },
    {
        key: "ArrowDown",
        run: Re6,
        shift: Je4,
        preventDefault: !0
    },
    {
        mac: "Cmd-ArrowDown",
        run: ae7,
        shift: de6
    },
    {
        mac: "Ctrl-ArrowDown",
        run: Y5,
        shift: se7
    },
    {
        key: "PageUp",
        run: re5,
        shift: ce7
    },
    {
        key: "PageDown",
        run: Y5,
        shift: se7
    },
    {
        key: "Home",
        run: le8,
        shift: ue7,
        preventDefault: !0
    },
    {
        key: "Mod-Home",
        run: fe6,
        shift: he6
    },
    {
        key: "End",
        run: oe7,
        shift: ie7,
        preventDefault: !0
    },
    {
        key: "Mod-End",
        run: ae7,
        shift: de6
    },
    {
        key: "Enter",
        run: Xt4
    },
    {
        key: "Mod-a",
        run: Nt5
    },
    {
        key: "Backspace",
        run: Z6,
        shift: Z6
    },
    {
        key: "Delete",
        run: qe4
    },
    {
        key: "Mod-Backspace",
        mac: "Alt-Backspace",
        run: Ke5
    },
    {
        key: "Mod-Delete",
        mac: "Alt-Delete",
        run: Pt5
    },
    {
        mac: "Mod-Backspace",
        run: Jt4
    },
    {
        mac: "Mod-Delete",
        run: We5
    }
].concat(_t3.map((e)=>({
        mac: e.key,
        run: e.run,
        shift: e.shift
    }))), Tn2 = [
    {
        key: "Alt-ArrowLeft",
        mac: "Ctrl-ArrowLeft",
        run: xt5,
        shift: It5
    },
    {
        key: "Alt-ArrowRight",
        mac: "Ctrl-ArrowRight",
        run: Lt5,
        shift: Rt4
    },
    {
        key: "Alt-ArrowUp",
        run: qt4
    },
    {
        key: "Shift-Alt-ArrowUp",
        run: Kt3
    },
    {
        key: "Alt-ArrowDown",
        run: $t3
    },
    {
        key: "Shift-Alt-ArrowDown",
        run: Wt5
    },
    {
        key: "Escape",
        run: Vt3
    },
    {
        key: "Mod-Enter",
        run: Yt4
    },
    {
        key: "Alt-l",
        mac: "Ctrl-l",
        run: vt5
    },
    {
        key: "Mod-i",
        run: Gt3,
        preventDefault: !0
    },
    {
        key: "Mod-[",
        run: Ye4
    },
    {
        key: "Mod-]",
        run: ne6
    },
    {
        key: "Mod-Alt-\\",
        run: Zt4
    },
    {
        key: "Shift-Mod-k",
        run: Ht4
    },
    {
        key: "Shift-Mod-\\",
        run: Et5
    },
    {
        key: "Mod-/",
        run: ot4
    },
    {
        key: "Alt-A",
        run: ct5
    }
].concat(jt5);
function s6() {
    var r = arguments[0];
    typeof r == "string" && (r = document.createElement(r));
    var e = 1, t = arguments[1];
    if (t && typeof t == "object" && t.nodeType == null && !Array.isArray(t)) {
        for(var n in t)if (Object.prototype.hasOwnProperty.call(t, n)) {
            var o = t[n];
            typeof o == "string" ? r.setAttribute(n, o) : o != null && (r[n] = o);
        }
        e++;
    }
    for(; e < arguments.length; e++)f2(r, arguments[e]);
    return r;
}
function f2(r, e) {
    if (typeof e == "string") r.appendChild(document.createTextNode(e));
    else if (e != null) if (e.nodeType != null) r.appendChild(e);
    else if (Array.isArray(e)) for(var t = 0; t < e.length; t++)f2(r, e[t]);
    else throw new RangeError("Unsupported child node: " + e);
}
var Y6 = typeof String.prototype.normalize == "function" ? (r)=>r.normalize("NFKD") : (r)=>r, y8 = class {
    constructor(e, t, n = 0, s = e.length, i1){
        this.value = {
            from: 0,
            to: 0
        }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = e.iterRange(n, s), this.bufferStart = n, this.normalize = i1 ? (a)=>i1(Y6(a)) : Y6, this.query = this.normalize(t);
    }
    peek() {
        if (this.bufferPos == this.buffer.length) {
            if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done) return -1;
            this.bufferPos = 0, this.buffer = this.iter.value;
        }
        return oe4(this.buffer, this.bufferPos);
    }
    next() {
        for(; this.matches.length;)this.matches.pop();
        return this.nextOverlapping();
    }
    nextOverlapping() {
        for(;;){
            let e = this.peek();
            if (e < 0) return this.done = !0, this;
            let t = rt3(e), n = this.bufferStart + this.bufferPos;
            this.bufferPos += be3(e);
            let s = this.normalize(t);
            for(let i1 = 0, a = n;; i1++){
                let l = s.charCodeAt(i1), c = this.match(l, a);
                if (c) return this.value = c, this;
                if (i1 == s.length - 1) break;
                a == n && i1 < t.length && t.charCodeAt(i1) == l && a++;
            }
        }
    }
    match(e, t) {
        let n = null;
        for(let s = 0; s < this.matches.length; s += 2){
            let i1 = this.matches[s], a = !1;
            this.query.charCodeAt(i1) == e && (i1 == this.query.length - 1 ? n = {
                from: this.matches[s + 1],
                to: t + 1
            } : (this.matches[s]++, a = !0)), a || (this.matches.splice(s, 2), s -= 2);
        }
        return this.query.charCodeAt(0) == e && (this.query.length == 1 ? n = {
            from: t,
            to: t + 1
        } : this.matches.push(1, t)), n;
    }
};
typeof Symbol < "u" && (y8.prototype[Symbol.iterator] = function() {
    return this;
});
var le9 = {
    from: -1,
    to: -1,
    match: /.*/.exec("")
}, Q8 = "gm" + (/x/.unicode == null ? "" : "u"), E8 = class {
    constructor(e, t, n, s = 0, i1 = e.length){
        if (this.to = i1, this.curLine = "", this.done = !1, this.value = le9, /\\[sWDnr]|\n|\r|\[\^/.test(t)) return new R9(e, t, n, s, i1);
        this.re = new RegExp(t, Q8 + (n?.ignoreCase ? "i" : "")), this.iter = e.iter();
        let a = e.lineAt(s);
        this.curLineStart = a.from, this.matchPos = s, this.getLine(this.curLineStart);
    }
    getLine(e) {
        this.iter.next(e), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
    }
    nextLine() {
        this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
    }
    next() {
        for(let e = this.matchPos - this.curLineStart;;){
            this.re.lastIndex = e;
            let t = this.matchPos <= this.to && this.re.exec(this.curLine);
            if (t) {
                let n = this.curLineStart + t.index, s = n + t[0].length;
                if (this.matchPos = s + (n == s ? 1 : 0), n == this.curLine.length && this.nextLine(), n < s || n > this.value.to) return this.value = {
                    from: n,
                    to: s,
                    match: t
                }, this;
                e = this.matchPos - this.curLineStart;
            } else if (this.curLineStart + this.curLine.length < this.to) this.nextLine(), e = 0;
            else return this.done = !0, this;
        }
    }
}, N8 = new WeakMap, x8 = class {
    constructor(e, t){
        this.from = e, this.text = t;
    }
    get to() {
        return this.from + this.text.length;
    }
    static get(e, t, n) {
        let s = N8.get(e);
        if (!s || s.from >= n || s.to <= t) {
            let l = new x8(t, e.sliceString(t, n));
            return N8.set(e, l), l;
        }
        if (s.from == t && s.to == n) return s;
        let { text: i1 , from: a  } = s;
        return a > t && (i1 = e.sliceString(t, a) + i1, a = t), s.to < n && (i1 += e.sliceString(s.to, n)), N8.set(e, new x8(a, i1)), new x8(t, i1.slice(t - a, n - a));
    }
}, R9 = class {
    constructor(e, t, n, s, i1){
        this.text = e, this.to = i1, this.done = !1, this.value = le9, this.matchPos = s, this.re = new RegExp(t, Q8 + (n?.ignoreCase ? "i" : "")), this.flat = x8.get(e, s, this.chunkEnd(s + 5e3));
    }
    chunkEnd(e) {
        return e >= this.to ? this.to : this.text.lineAt(e).to;
    }
    next() {
        for(;;){
            let e = this.re.lastIndex = this.matchPos - this.flat.from, t = this.re.exec(this.flat.text);
            if (t && !t[0] && t.index == e && (this.re.lastIndex = e + 1, t = this.re.exec(this.flat.text)), t && this.flat.to < this.to && t.index + t[0].length > this.flat.text.length - 10 && (t = null), t) {
                let n = this.flat.from + t.index, s = n + t[0].length;
                return this.value = {
                    from: n,
                    to: s,
                    match: t
                }, this.matchPos = s + (n == s ? 1 : 0), this;
            } else {
                if (this.flat.to == this.to) return this.done = !0, this;
                this.flat = x8.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
            }
        }
    }
};
typeof Symbol < "u" && (E8.prototype[Symbol.iterator] = R9.prototype[Symbol.iterator] = function() {
    return this;
});
function xe5(r) {
    try {
        return new RegExp(r, Q8), !0;
    } catch  {
        return !1;
    }
}
function B10(r) {
    let e = s6("input", {
        class: "cm-textfield",
        name: "line"
    }), t = s6("form", {
        class: "cm-gotoLine",
        onkeydown: (s)=>{
            s.keyCode == 27 ? (s.preventDefault(), r.dispatch({
                effects: I7.of(!1)
            }), r.focus()) : s.keyCode == 13 && (s.preventDefault(), n());
        },
        onsubmit: (s)=>{
            s.preventDefault(), n();
        }
    }, s6("label", r.state.phrase("Go to line"), ": ", e), " ", s6("button", {
        class: "cm-button",
        type: "submit"
    }, r.state.phrase("go")));
    function n() {
        let s = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(e.value);
        if (!s) return;
        let { state: i1  } = r, a = i1.doc.lineAt(i1.selection.main.head), [, l, c, f, d1] = s, m = f ? +f.slice(1) : 0, g = c ? +c : a.number;
        if (c && d1) {
            let V = g / 100;
            l && (V = V * (l == "-" ? -1 : 1) + a.number / i1.doc.lines), g = Math.round(i1.doc.lines * V);
        } else c && l && (g = g * (l == "-" ? -1 : 1) + a.number);
        let X = i1.doc.line(Math.max(1, Math.min(i1.doc.lines, g)));
        r.dispatch({
            effects: I7.of(!1),
            selection: g5.cursor(X.from + Math.max(0, Math.min(m, X.length))),
            scrollIntoView: !0
        }), r.focus();
    }
    return {
        dom: t
    };
}
var I7 = y4.define(), Z7 = F3.define({
    create () {
        return !0;
    },
    update (r, e) {
        for (let t of e.effects)t.is(I7) && (r = t.value);
        return r;
    },
    provide: (r)=>ns2.from(r, (e)=>e ? B10 : null)
}), be6 = (r)=>{
    let e = po2(r, B10);
    if (!e) {
        let t = [
            I7.of(!0)
        ];
        r.state.field(Z7, !1) == null && t.push(y4.appendConfig.of([
            Z7,
            ye6
        ])), r.dispatch({
            effects: t
        }), e = po2(r, B10);
    }
    return e && e.dom.querySelector("input").focus(), !0;
}, ye6 = C6.baseTheme({
    ".cm-panel.cm-gotoLine": {
        padding: "2px 6px 4px",
        "& label": {
            fontSize: "80%"
        }
    }
}), Se8 = {
    highlightWordAroundCursor: !1,
    minSelectionLength: 1,
    maxMatches: 100,
    wholeWords: !1
}, ae8 = A3.define({
    combine (r) {
        return ht3(r, Se8, {
            highlightWordAroundCursor: (e, t)=>e || t,
            minSelectionLength: Math.min,
            maxMatches: Math.min
        });
    }
});
function Te6(r) {
    let e = [
        Le6,
        Ce8
    ];
    return r && e.push(ae8.of(r)), e;
}
var Me7 = M6.mark({
    class: "cm-selectionMatch"
}), ve7 = M6.mark({
    class: "cm-selectionMatch cm-selectionMatch-main"
});
function ee7(r, e, t, n) {
    return (t == 0 || r(e.sliceDoc(t - 1, t)) != R4.Word) && (n == e.doc.length || r(e.sliceDoc(n, n + 1)) != R4.Word);
}
function ke7(r, e, t, n) {
    return r(e.sliceDoc(t, t + 1)) == R4.Word && r(e.sliceDoc(n - 1, n)) == R4.Word;
}
var Ce8 = V4.fromClass(class {
    constructor(r){
        this.decorations = this.getDeco(r);
    }
    update(r) {
        (r.selectionSet || r.docChanged || r.viewportChanged) && (this.decorations = this.getDeco(r.view));
    }
    getDeco(r) {
        let e = r.state.facet(ae8), { state: t  } = r, n = t.selection;
        if (n.ranges.length > 1) return M6.none;
        let s = n.main, i1, a = null;
        if (s.empty) {
            if (!e.highlightWordAroundCursor) return M6.none;
            let c = t.wordAt(s.head);
            if (!c) return M6.none;
            a = t.charCategorizer(s.head), i1 = t.sliceDoc(c.from, c.to);
        } else {
            let c1 = s.to - s.from;
            if (c1 < e.minSelectionLength || c1 > 200) return M6.none;
            if (e.wholeWords) {
                if (i1 = t.sliceDoc(s.from, s.to), a = t.charCategorizer(s.head), !(ee7(a, t, s.from, s.to) && ke7(a, t, s.from, s.to))) return M6.none;
            } else if (i1 = t.sliceDoc(s.from, s.to).trim(), !i1) return M6.none;
        }
        let l = [];
        for (let c2 of r.visibleRanges){
            let f = new y8(t.doc, i1, c2.from, c2.to);
            for(; !f.next().done;){
                let { from: d1 , to: m  } = f.value;
                if ((!a || ee7(a, t, d1, m)) && (s.empty && d1 <= s.from && m >= s.to ? l.push(ve7.range(d1, m)) : (d1 >= s.to || m <= s.from) && l.push(Me7.range(d1, m)), l.length > e.maxMatches)) return M6.none;
            }
        }
        return M6.set(l);
    }
}, {
    decorations: (r)=>r.decorations
}), Le6 = C6.baseTheme({
    ".cm-selectionMatch": {
        backgroundColor: "#99ff7780"
    },
    ".cm-searchMatch .cm-selectionMatch": {
        backgroundColor: "transparent"
    }
}), Pe6 = ({ state: r , dispatch: e  })=>{
    let { selection: t  } = r, n = g5.create(t.ranges.map((s)=>r.wordAt(s.head) || g5.cursor(s.head)), t.mainIndex);
    return n.eq(t) ? !1 : (e(r.update({
        selection: n
    })), !0);
};
function Ae7(r, e) {
    let { main: t , ranges: n  } = r.selection, s = r.wordAt(t.head), i1 = s && s.from == t.from && s.to == t.to;
    for(let a = !1, l = new y8(r.doc, e, n[n.length - 1].to);;)if (l.next(), l.done) {
        if (a) return null;
        l = new y8(r.doc, e, 0, Math.max(0, n[n.length - 1].from - 1)), a = !0;
    } else {
        if (a && n.some((c)=>c.from == l.value.from)) continue;
        if (i1) {
            let c = r.wordAt(l.value.from);
            if (!c || c.from != l.value.from || c.to != l.value.to) continue;
        }
        return l.value;
    }
}
var De7 = ({ state: r , dispatch: e  })=>{
    let { ranges: t  } = r.selection;
    if (t.some((i1)=>i1.from === i1.to)) return Pe6({
        state: r,
        dispatch: e
    });
    let n = r.sliceDoc(t[0].from, t[0].to);
    if (r.selection.ranges.some((i1)=>r.sliceDoc(i1.from, i1.to) != n)) return !1;
    let s = Ae7(r, n);
    return s ? (e(r.update({
        selection: r.selection.addRange(g5.range(s.from, s.to), !1),
        effects: C6.scrollIntoView(s.to)
    })), !0) : !1;
}, T11 = A3.define({
    combine (r) {
        var e;
        return {
            top: r.reduce((t, n)=>t ?? n.top, void 0) || !1,
            caseSensitive: r.reduce((t, n)=>t ?? n.caseSensitive, void 0) || !1,
            createPanel: ((e = r.find((t)=>t.createPanel)) === null || e === void 0 ? void 0 : e.createPanel) || ((t)=>new _7(t))
        };
    }
});
var W7 = class {
    constructor(e){
        this.search = e.search, this.caseSensitive = !!e.caseSensitive, this.regexp = !!e.regexp, this.replace = e.replace || "", this.valid = !!this.search && (!this.regexp || xe5(this.search)), this.unquoted = e.literal ? this.search : this.search.replace(/\\([nrt\\])/g, (t, n)=>n == "n" ? `
` : n == "r" ? "\r" : n == "t" ? "	" : "\\");
    }
    eq(e) {
        return this.search == e.search && this.replace == e.replace && this.caseSensitive == e.caseSensitive && this.regexp == e.regexp;
    }
    create() {
        return this.regexp ? new K8(this) : new H6(this);
    }
    getCursor(e, t = 0, n = e.length) {
        return this.regexp ? M11(this, e, t, n) : S7(this, e, t, n);
    }
}, z7 = class {
    constructor(e){
        this.spec = e;
    }
};
function S7(r, e, t, n) {
    return new y8(e, r.unquoted, t, n, r.caseSensitive ? void 0 : (s)=>s.toLowerCase());
}
var H6 = class extends z7 {
    constructor(e){
        super(e);
    }
    nextMatch(e, t, n) {
        let s = S7(this.spec, e, n, e.length).nextOverlapping();
        return s.done && (s = S7(this.spec, e, 0, t).nextOverlapping()), s.done ? null : s.value;
    }
    prevMatchInRange(e, t, n) {
        for(let s = n;;){
            let i1 = Math.max(t, s - 1e4 - this.spec.unquoted.length), a = S7(this.spec, e, i1, s), l = null;
            for(; !a.nextOverlapping().done;)l = a.value;
            if (l) return l;
            if (i1 == t) return null;
            s -= 1e4;
        }
    }
    prevMatch(e, t, n) {
        return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, n, e.length);
    }
    getReplacement(e) {
        return this.spec.replace;
    }
    matchAll(e, t) {
        let n = S7(this.spec, e, 0, e.length), s = [];
        for(; !n.next().done;){
            if (s.length >= t) return null;
            s.push(n.value);
        }
        return s;
    }
    highlight(e, t, n, s) {
        let i1 = S7(this.spec, e, Math.max(0, t - this.spec.unquoted.length), Math.min(n + this.spec.unquoted.length, e.length));
        for(; !i1.next().done;)s(i1.value.from, i1.value.to);
    }
};
function M11(r, e, t, n) {
    return new E8(e, r.search, r.caseSensitive ? void 0 : {
        ignoreCase: !0
    }, t, n);
}
var K8 = class extends z7 {
    nextMatch(e, t, n) {
        let s = M11(this.spec, e, n, e.length).next();
        return s.done && (s = M11(this.spec, e, 0, t).next()), s.done ? null : s.value;
    }
    prevMatchInRange(e, t, n) {
        for(let s = 1;; s++){
            let i1 = Math.max(t, n - s * 1e4), a = M11(this.spec, e, i1, n), l = null;
            for(; !a.next().done;)l = a.value;
            if (l && (i1 == t || l.from > i1 + 10)) return l;
            if (i1 == t) return null;
        }
    }
    prevMatch(e, t, n) {
        return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, n, e.length);
    }
    getReplacement(e) {
        return this.spec.replace.replace(/\$([$&\d+])/g, (t, n)=>n == "$" ? "$" : n == "&" ? e.match[0] : n != "0" && +n < e.match.length ? e.match[n] : t);
    }
    matchAll(e, t) {
        let n = M11(this.spec, e, 0, e.length), s = [];
        for(; !n.next().done;){
            if (s.length >= t) return null;
            s.push(n.value);
        }
        return s;
    }
    highlight(e, t, n, s) {
        let i1 = M11(this.spec, e, Math.max(0, t - 250), Math.min(n + 250, e.length));
        for(; !i1.next().done;)s(i1.value.from, i1.value.to);
    }
}, k4 = y4.define(), j8 = y4.define(), p7 = F3.define({
    create (r) {
        return new v7(w8(r).create(), null);
    },
    update (r, e) {
        for (let t of e.effects)t.is(k4) ? r = new v7(t.value.create(), r.panel) : t.is(j8) && (r = new v7(r.query, t.value ? J5 : null));
        return r;
    },
    provide: (r)=>ns2.from(r, (e)=>e.panel)
});
var v7 = class {
    constructor(e, t){
        this.query = e, this.panel = t;
    }
}, Fe6 = M6.mark({
    class: "cm-searchMatch"
}), qe5 = M6.mark({
    class: "cm-searchMatch cm-searchMatch-selected"
}), Ee6 = V4.fromClass(class {
    constructor(r){
        this.view = r, this.decorations = this.highlight(r.state.field(p7));
    }
    update(r) {
        let e = r.state.field(p7);
        (e != r.startState.field(p7) || r.docChanged || r.selectionSet || r.viewportChanged) && (this.decorations = this.highlight(e));
    }
    highlight({ query: r , panel: e  }) {
        if (!e || !r.spec.valid) return M6.none;
        let { view: t  } = this, n = new Z2;
        for(let s = 0, i1 = t.visibleRanges, a = i1.length; s < a; s++){
            let { from: l , to: c  } = i1[s];
            for(; s < a - 1 && c > i1[s + 1].from - 2 * 250;)c = i1[++s].to;
            r.highlight(t.state.doc, l, c, (f, d1)=>{
                let m = t.state.selection.ranges.some((g)=>g.from == f && g.to == d1);
                n.add(f, d1, m ? qe5 : Fe6);
            });
        }
        return n.finish();
    }
}, {
    decorations: (r)=>r.decorations
});
function P9(r) {
    return (e)=>{
        let t = e.state.field(p7, !1);
        return t && t.query.spec.valid ? r(e, t) : ce8(e);
    };
}
var O6 = P9((r, { query: e  })=>{
    let { from: t , to: n  } = r.state.selection.main, s = e.nextMatch(r.state.doc, t, n);
    return !s || s.from == t && s.to == n ? !1 : (r.dispatch({
        selection: {
            anchor: s.from,
            head: s.to
        },
        scrollIntoView: !0,
        effects: U6(r, s),
        userEvent: "select.search"
    }), !0);
}), $7 = P9((r, { query: e  })=>{
    let { state: t  } = r, { from: n , to: s  } = t.selection.main, i1 = e.prevMatch(t.doc, n, s);
    return i1 ? (r.dispatch({
        selection: {
            anchor: i1.from,
            head: i1.to
        },
        scrollIntoView: !0,
        effects: U6(r, i1),
        userEvent: "select.search"
    }), !0) : !1;
}), Re7 = P9((r, { query: e  })=>{
    let t = e.matchAll(r.state.doc, 1e3);
    return !t || !t.length ? !1 : (r.dispatch({
        selection: g5.create(t.map((n)=>g5.range(n.from, n.to))),
        userEvent: "select.search.matches"
    }), !0);
}), Ie7 = ({ state: r , dispatch: e  })=>{
    let t = r.selection;
    if (t.ranges.length > 1 || t.main.empty) return !1;
    let { from: n , to: s  } = t.main, i1 = [], a = 0;
    for(let l = new y8(r.doc, r.sliceDoc(n, s)); !l.next().done;){
        if (i1.length > 1e3) return !1;
        l.value.from == n && (a = i1.length), i1.push(g5.range(l.value.from, l.value.to));
    }
    return e(r.update({
        selection: g5.create(i1, a),
        userEvent: "select.search.matches"
    })), !0;
}, te9 = P9((r, { query: e  })=>{
    let { state: t  } = r, { from: n , to: s  } = t.selection.main;
    if (t.readOnly) return !1;
    let i1 = e.nextMatch(t.doc, n, n);
    if (!i1) return !1;
    let a = [], l, c;
    if (i1.from == n && i1.to == s && (c = t.toText(e.getReplacement(i1)), a.push({
        from: i1.from,
        to: i1.to,
        insert: c
    }), i1 = e.nextMatch(t.doc, i1.from, i1.to)), i1) {
        let f = a.length == 0 || a[0].from >= i1.to ? 0 : i1.to - i1.from - c.length;
        l = {
            anchor: i1.from - f,
            head: i1.to - f
        };
    }
    return r.dispatch({
        changes: a,
        selection: l,
        scrollIntoView: !!l,
        effects: i1 ? U6(r, i1) : void 0,
        userEvent: "input.replace"
    }), !0;
}), We6 = P9((r, { query: e  })=>{
    if (r.state.readOnly) return !1;
    let t = e.matchAll(r.state.doc, 1e9).map((n)=>{
        let { from: s , to: i1  } = n;
        return {
            from: s,
            to: i1,
            insert: e.getReplacement(n)
        };
    });
    return t.length ? (r.dispatch({
        changes: t,
        userEvent: "input.replace.all"
    }), !0) : !1;
});
function J5(r) {
    return r.state.facet(T11).createPanel(r);
}
function w8(r, e) {
    var t;
    let n = r.selection.main, s = n.empty || n.to > n.from + 100 ? "" : r.sliceDoc(n.from, n.to), i1 = (t = e?.caseSensitive) !== null && t !== void 0 ? t : r.facet(T11).caseSensitive;
    return e && !s ? e : new W7({
        search: s.replace(/\n/g, "\\n"),
        caseSensitive: i1
    });
}
var ce8 = (r)=>{
    let e = r.state.field(p7, !1);
    if (e && e.panel) {
        let t = po2(r, J5);
        if (!t) return !1;
        let n = t.dom.querySelector("[name=search]");
        if (n != r.root.activeElement) {
            let s = w8(r.state, e.query.spec);
            s.valid && r.dispatch({
                effects: k4.of(s)
            }), n.focus(), n.select();
        }
    } else r.dispatch({
        effects: [
            j8.of(!0),
            e ? k4.of(w8(r.state, e.query.spec)) : y4.appendConfig.of(G7)
        ]
    });
    return !0;
}, oe8 = (r)=>{
    let e = r.state.field(p7, !1);
    if (!e || !e.panel) return !1;
    let t = po2(r, J5);
    return t && t.dom.contains(r.root.activeElement) && r.focus(), r.dispatch({
        effects: j8.of(!1)
    }), !0;
}, Be6 = [
    {
        key: "Mod-f",
        run: ce8,
        scope: "editor search-panel"
    },
    {
        key: "F3",
        run: O6,
        shift: $7,
        scope: "editor search-panel",
        preventDefault: !0
    },
    {
        key: "Mod-g",
        run: O6,
        shift: $7,
        scope: "editor search-panel",
        preventDefault: !0
    },
    {
        key: "Escape",
        run: oe8,
        scope: "editor search-panel"
    },
    {
        key: "Mod-Shift-l",
        run: Ie7
    },
    {
        key: "Alt-g",
        run: be6
    },
    {
        key: "Mod-d",
        run: De7,
        preventDefault: !0
    }
], _7 = class {
    constructor(e){
        this.view = e;
        let t = this.query = e.state.field(p7).query.spec;
        this.commit = this.commit.bind(this), this.searchField = s6("input", {
            value: t.search,
            placeholder: u2(e, "Find"),
            "aria-label": u2(e, "Find"),
            class: "cm-textfield",
            name: "search",
            onchange: this.commit,
            onkeyup: this.commit
        }), this.replaceField = s6("input", {
            value: t.replace,
            placeholder: u2(e, "Replace"),
            "aria-label": u2(e, "Replace"),
            class: "cm-textfield",
            name: "replace",
            onchange: this.commit,
            onkeyup: this.commit
        }), this.caseField = s6("input", {
            type: "checkbox",
            name: "case",
            checked: t.caseSensitive,
            onchange: this.commit
        }), this.reField = s6("input", {
            type: "checkbox",
            name: "re",
            checked: t.regexp,
            onchange: this.commit
        });
        function n(s, i1, a) {
            return s6("button", {
                class: "cm-button",
                name: s,
                onclick: i1,
                type: "button"
            }, a);
        }
        this.dom = s6("div", {
            onkeydown: (s)=>this.keydown(s),
            class: "cm-search"
        }, [
            this.searchField,
            n("next", ()=>O6(e), [
                u2(e, "next")
            ]),
            n("prev", ()=>$7(e), [
                u2(e, "previous")
            ]),
            n("select", ()=>Re7(e), [
                u2(e, "all")
            ]),
            s6("label", null, [
                this.caseField,
                u2(e, "match case")
            ]),
            s6("label", null, [
                this.reField,
                u2(e, "regexp")
            ]),
            ...e.state.readOnly ? [] : [
                s6("br"),
                this.replaceField,
                n("replace", ()=>te9(e), [
                    u2(e, "replace")
                ]),
                n("replaceAll", ()=>We6(e), [
                    u2(e, "replace all")
                ]),
                s6("button", {
                    name: "close",
                    onclick: ()=>oe8(e),
                    "aria-label": u2(e, "close"),
                    type: "button"
                }, [
                    "\xD7"
                ])
            ]
        ]);
    }
    commit() {
        let e = new W7({
            search: this.searchField.value,
            caseSensitive: this.caseField.checked,
            regexp: this.reField.checked,
            replace: this.replaceField.value
        });
        e.eq(this.query) || (this.query = e, this.view.dispatch({
            effects: k4.of(e)
        }));
    }
    keydown(e) {
        Jr1(this.view, e, "search-panel") ? e.preventDefault() : e.keyCode == 13 && e.target == this.searchField ? (e.preventDefault(), (e.shiftKey ? $7 : O6)(this.view)) : e.keyCode == 13 && e.target == this.replaceField && (e.preventDefault(), te9(this.view));
    }
    update(e) {
        for (let t of e.transactions)for (let n of t.effects)n.is(k4) && !n.value.eq(this.query) && this.setQuery(n.value);
    }
    setQuery(e) {
        this.query = e, this.searchField.value = e.search, this.replaceField.value = e.replace, this.caseField.checked = e.caseSensitive, this.reField.checked = e.regexp;
    }
    mount() {
        this.searchField.select();
    }
    get pos() {
        return 80;
    }
    get top() {
        return this.view.state.facet(T11).top;
    }
};
function u2(r, e) {
    return r.state.phrase(e);
}
var A9 = 30, D7 = /[\s\.,:;?!]/;
function U6(r, { from: e , to: t  }) {
    let n = r.state.doc.lineAt(e).from, s = r.state.doc.lineAt(t).to, i1 = Math.max(n, e - A9), a = Math.min(s, t + A9), l = r.state.sliceDoc(i1, a);
    if (i1 != n) {
        for(let c = 0; c < A9; c++)if (!D7.test(l[c + 1]) && D7.test(l[c])) {
            l = l.slice(c);
            break;
        }
    }
    if (a != s) {
        for(let c1 = l.length - 1; c1 > l.length - A9; c1--)if (!D7.test(l[c1 - 1]) && D7.test(l[c1])) {
            l = l.slice(0, c1);
            break;
        }
    }
    return C6.announce.of(`${r.state.phrase("current match")}. ${l} ${r.state.phrase("on line")} ${r.state.doc.lineAt(e).number}`);
}
var ze5 = C6.baseTheme({
    ".cm-panel.cm-search": {
        padding: "2px 6px 4px",
        position: "relative",
        "& [name=close]": {
            position: "absolute",
            top: "0",
            right: "4px",
            backgroundColor: "inherit",
            border: "none",
            font: "inherit",
            padding: 0,
            margin: 0
        },
        "& input, & button, & label": {
            margin: ".2em .6em .2em 0"
        },
        "& input[type=checkbox]": {
            marginRight: ".2em"
        },
        "& label": {
            fontSize: "80%",
            whiteSpace: "pre"
        }
    },
    "&light .cm-searchMatch": {
        backgroundColor: "#ffff0054"
    },
    "&dark .cm-searchMatch": {
        backgroundColor: "#00ffff8a"
    },
    "&light .cm-searchMatch-selected": {
        backgroundColor: "#ff6a0054"
    },
    "&dark .cm-searchMatch-selected": {
        backgroundColor: "#ff00ff8a"
    }
}), G7 = [
    p7,
    lt3.lowest(Ee6),
    ze5
];
var U7 = class {
    constructor(e, t, i1){
        this.state = e, this.pos = t, this.explicit = i1, this.abortListeners = [];
    }
    tokenBefore(e) {
        let t = m6(this.state).resolveInner(this.pos, -1);
        for(; t && e.indexOf(t.name) < 0;)t = t.parent;
        return t ? {
            from: t.from,
            to: this.pos,
            text: this.state.sliceDoc(t.from, this.pos),
            type: t.type
        } : null;
    }
    matchBefore(e) {
        let t = this.state.doc.lineAt(this.pos), i1 = Math.max(t.from, this.pos - 250), s = t.text.slice(i1 - t.from, this.pos - t.from), o = s.search(Te7(e, !1));
        return o < 0 ? null : {
            from: i1 + o,
            to: this.pos,
            text: s.slice(o)
        };
    }
    get aborted() {
        return this.abortListeners == null;
    }
    addEventListener(e, t) {
        e == "abort" && this.abortListeners && this.abortListeners.push(t);
    }
};
function ue8(n) {
    let e = Object.keys(n).join(""), t = /\w/.test(e);
    return t && (e = e.replace(/\w/g, "")), `[${t ? "\\w" : ""}${e.replace(/[^\w\s]/g, "\\$&")}]`;
}
function Ye5(n) {
    let e = Object.create(null), t = Object.create(null);
    for (let { label: s  } of n){
        e[s[0]] = !0;
        for(let o = 1; o < s.length; o++)t[s[o]] = !0;
    }
    let i1 = ue8(e) + ue8(t) + "*$";
    return [
        new RegExp("^" + i1),
        new RegExp(i1)
    ];
}
function Ge4(n) {
    let e = n.map((s)=>typeof s == "string" ? {
            label: s
        } : s), [t, i1] = e.every((s)=>/^\w+$/.test(s.label)) ? [
        /\w*$/,
        /\w+$/
    ] : Ye5(e);
    return (s)=>{
        let o = s.matchBefore(i1);
        return o || s.explicit ? {
            from: o ? o.from : s.pos,
            options: e,
            validFor: t
        } : null;
    };
}
var $8 = class {
    constructor(e, t, i1){
        this.completion = e, this.source = t, this.match = i1;
    }
};
function x9(n) {
    return n.selection.main.head;
}
function Te7(n, e) {
    var t;
    let { source: i1  } = n, s = e && i1[0] != "^", o = i1[i1.length - 1] != "$";
    return !s && !o ? n : new RegExp(`${s ? "^" : ""}(?:${i1})${o ? "$" : ""}`, (t = n.flags) !== null && t !== void 0 ? t : n.ignoreCase ? "i" : "");
}
N2.define();
function Je5(n, e, t, i1) {
    return Object.assign(Object.assign({}, n.changeByRange((s)=>{
        if (s == n.selection.main) return {
            changes: {
                from: t,
                to: i1,
                insert: e
            },
            range: g5.cursor(t + e.length)
        };
        let o = i1 - t;
        return !s.empty || o && n.sliceDoc(s.from - o, s.from) != n.sliceDoc(t, i1) ? {
            range: s
        } : {
            changes: {
                from: s.from - o,
                to: s.from,
                insert: e
            },
            range: g5.cursor(s.from - o + e.length)
        };
    })), {
        userEvent: "input.complete"
    });
}
function Ae8(n, e) {
    let t = e.completion.apply || e.completion.label, i1 = e.source;
    typeof t == "string" ? n.dispatch(Je5(n.state, t, i1.from, i1.to)) : t(n, e.completion, i1.from, i1.to);
}
var he7 = new WeakMap;
function Ze6(n) {
    if (!Array.isArray(n)) return n;
    let e = he7.get(n);
    return e || he7.set(n, e = Ge4(n)), e;
}
var Z8 = class {
    constructor(e){
        this.pattern = e, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [];
        for(let t = 0; t < e.length;){
            let i1 = oe4(e, t), s = be3(i1);
            this.chars.push(i1);
            let o = e.slice(t, t + s), l = o.toUpperCase();
            this.folded.push(oe4(l == o ? o.toLowerCase() : l, 0)), t += s;
        }
        this.astral = e.length != this.chars.length;
    }
    match(e) {
        if (this.pattern.length == 0) return [
            0
        ];
        if (e.length < this.pattern.length) return null;
        let { chars: t , folded: i1 , any: s , precise: o , byWord: l  } = this;
        if (t.length == 1) {
            let h = oe4(e, 0);
            return h == t[0] ? [
                0,
                0,
                be3(h)
            ] : h == i1[0] ? [
                -200,
                0,
                be3(h)
            ] : null;
        }
        let r = e.indexOf(this.pattern);
        if (r == 0) return [
            0,
            0,
            this.pattern.length
        ];
        let c = t.length, a = 0;
        if (r < 0) {
            for(let h1 = 0, Q = Math.min(e.length, 200); h1 < Q && a < c;){
                let T1 = oe4(e, h1);
                (T1 == t[a] || T1 == i1[a]) && (s[a++] = h1), h1 += be3(T1);
            }
            if (a < c) return null;
        }
        let f = 0, u = 0, H = !1, w = 0, V = -1, K = -1, $e = /[a-z]/.test(e), z = !0;
        for(let h2 = 0, Q1 = Math.min(e.length, 200), T11 = 0; h2 < Q1 && u < c;){
            let m = oe4(e, h2);
            r < 0 && (f < c && m == t[f] && (o[f++] = h2), w < c && (m == t[w] || m == i1[w] ? (w == 0 && (V = h2), K = h2 + 1, w++) : w = 0));
            let D1, X = m < 255 ? m >= 48 && m <= 57 || m >= 97 && m <= 122 ? 2 : m >= 65 && m <= 90 ? 1 : 0 : (D1 = rt3(m)) != D1.toLowerCase() ? 1 : D1 != D1.toUpperCase() ? 2 : 0;
            (!h2 || X == 1 && $e || T11 == 0 && X != 0) && (t[u] == m || i1[u] == m && (H = !0) ? l[u++] = h2 : l.length && (z = !1)), T11 = X, h2 += be3(m);
        }
        return u == c && l[0] == 0 && z ? this.result(-100 + (H ? -200 : 0), l, e) : w == c && V == 0 ? [
            -200 - e.length,
            0,
            K
        ] : r > -1 ? [
            -700 - e.length,
            r,
            r + this.pattern.length
        ] : w == c ? [
            -200 + -700 - e.length,
            V,
            K
        ] : u == c ? this.result(-100 + (H ? -200 : 0) + -700 + (z ? 0 : -1100), l, e) : t.length == 2 ? null : this.result((s[0] ? -700 : 0) + -200 + -1100, s, e);
    }
    result(e, t, i1) {
        let s = [
            e - i1.length
        ], o = 1;
        for (let l of t){
            let r = l + (this.astral ? be3(oe4(i1, l)) : 1);
            o > 1 && s[o - 1] == l ? s[o - 1] = r : (s[o++] = l, s[o++] = r);
        }
        return s;
    }
}, C9 = A3.define({
    combine (n) {
        return ht3(n, {
            activateOnTyping: !0,
            override: null,
            closeOnBlur: !0,
            maxRenderedOptions: 100,
            defaultKeymap: !0,
            optionClass: ()=>"",
            aboveCursor: !1,
            icons: !0,
            addToOptions: []
        }, {
            defaultKeymap: (e, t)=>e && t,
            closeOnBlur: (e, t)=>e && t,
            icons: (e, t)=>e && t,
            optionClass: (e, t)=>(i1)=>_e7(e(i1), t(i1)),
            addToOptions: (e, t)=>e.concat(t)
        });
    }
});
function _e7(n, e) {
    return n ? e ? n + " " + e : n : e;
}
function et4(n) {
    let e = n.addToOptions.slice();
    return n.icons && e.push({
        render (t) {
            let i1 = document.createElement("div");
            return i1.classList.add("cm-completionIcon"), t.type && i1.classList.add(...t.type.split(/\s+/g).map((s)=>"cm-completionIcon-" + s)), i1.setAttribute("aria-hidden", "true"), i1;
        },
        position: 20
    }), e.push({
        render (t, i1, s) {
            let o = document.createElement("span");
            o.className = "cm-completionLabel";
            let { label: l  } = t, r = 0;
            for(let c = 1; c < s.length;){
                let a = s[c++], f = s[c++];
                a > r && o.appendChild(document.createTextNode(l.slice(r, a)));
                let u = o.appendChild(document.createElement("span"));
                u.appendChild(document.createTextNode(l.slice(a, f))), u.className = "cm-completionMatchedText", r = f;
            }
            return r < l.length && o.appendChild(document.createTextNode(l.slice(r))), o;
        },
        position: 50
    }, {
        render (t) {
            if (!t.detail) return null;
            let i1 = document.createElement("span");
            return i1.className = "cm-completionDetail", i1.textContent = t.detail, i1;
        },
        position: 80
    }), e.sort((t, i1)=>t.position - i1.position).map((t)=>t.render);
}
function pe6(n, e, t) {
    if (n <= t) return {
        from: 0,
        to: n
    };
    if (e <= n >> 1) {
        let s = Math.floor(e / t);
        return {
            from: s * t,
            to: (s + 1) * t
        };
    }
    let i1 = Math.floor((n - e) / t);
    return {
        from: n - (i1 + 1) * t,
        to: n - i1 * t
    };
}
var _8 = class {
    constructor(e, t){
        this.view = e, this.stateField = t, this.info = null, this.placeInfo = {
            read: ()=>this.measureInfo(),
            write: (r)=>this.positionInfo(r),
            key: this
        };
        let i1 = e.state.field(t), { options: s , selected: o  } = i1.open, l = e.state.facet(C9);
        this.optionContent = et4(l), this.optionClass = l.optionClass, this.range = pe6(s.length, o, l.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.dom.addEventListener("mousedown", (r)=>{
            for(let c = r.target, a; c && c != this.dom; c = c.parentNode)if (c.nodeName == "LI" && (a = /-(\d+)$/.exec(c.id)) && +a[1] < s.length) {
                Ae8(e, s[+a[1]]), r.preventDefault();
                return;
            }
        }), this.list = this.dom.appendChild(this.createListBox(s, i1.id, this.range)), this.list.addEventListener("scroll", ()=>{
            this.info && this.view.requestMeasure(this.placeInfo);
        });
    }
    mount() {
        this.updateSel();
    }
    update(e) {
        e.state.field(this.stateField) != e.startState.field(this.stateField) && this.updateSel();
    }
    positioned() {
        this.info && this.view.requestMeasure(this.placeInfo);
    }
    updateSel() {
        let e = this.view.state.field(this.stateField), t = e.open;
        if ((t.selected < this.range.from || t.selected >= this.range.to) && (this.range = pe6(t.options.length, t.selected, this.view.state.facet(C9).maxRenderedOptions), this.list.remove(), this.list = this.dom.appendChild(this.createListBox(t.options, e.id, this.range)), this.list.addEventListener("scroll", ()=>{
            this.info && this.view.requestMeasure(this.placeInfo);
        })), this.updateSelectedOption(t.selected)) {
            this.info && (this.info.remove(), this.info = null);
            let { completion: i1  } = t.options[t.selected], { info: s  } = i1;
            if (!s) return;
            let o = typeof s == "string" ? document.createTextNode(s) : s(i1);
            if (!o) return;
            "then" in o ? o.then((l)=>{
                l && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(l);
            }).catch((l)=>nt4(this.view.state, l, "completion info")) : this.addInfoPane(o);
        }
    }
    addInfoPane(e) {
        let t = this.info = document.createElement("div");
        t.className = "cm-tooltip cm-completionInfo", t.appendChild(e), this.dom.appendChild(t), this.view.requestMeasure(this.placeInfo);
    }
    updateSelectedOption(e) {
        let t = null;
        for(let i1 = this.list.firstChild, s = this.range.from; i1; i1 = i1.nextSibling, s++)s == e ? i1.hasAttribute("aria-selected") || (i1.setAttribute("aria-selected", "true"), t = i1) : i1.hasAttribute("aria-selected") && i1.removeAttribute("aria-selected");
        return t && nt6(this.list, t), t;
    }
    measureInfo() {
        let e = this.dom.querySelector("[aria-selected]");
        if (!e || !this.info) return null;
        let t = this.dom.getBoundingClientRect(), i1 = this.info.getBoundingClientRect(), s = e.getBoundingClientRect();
        if (s.top > Math.min(innerHeight, t.bottom) - 10 || s.bottom < Math.max(0, t.top) + 10) return null;
        let o = Math.max(0, Math.min(s.top, innerHeight - i1.height)) - t.top, l = this.view.textDirection == R5.RTL, r = t.left, c = innerWidth - t.right;
        return l && r < Math.min(i1.width, c) ? l = !1 : !l && c < Math.min(i1.width, r) && (l = !0), {
            top: o,
            left: l
        };
    }
    positionInfo(e) {
        this.info && (this.info.style.top = (e ? e.top : -1e6) + "px", e && (this.info.classList.toggle("cm-completionInfo-left", e.left), this.info.classList.toggle("cm-completionInfo-right", !e.left)));
    }
    createListBox(e, t, i1) {
        let s = document.createElement("ul");
        s.id = t, s.setAttribute("role", "listbox"), s.setAttribute("aria-expanded", "true"), s.setAttribute("aria-label", this.view.state.phrase("Completions"));
        for(let o = i1.from; o < i1.to; o++){
            let { completion: l , match: r  } = e[o], c = s.appendChild(document.createElement("li"));
            c.id = t + "-" + o, c.setAttribute("role", "option");
            let a = this.optionClass(l);
            a && (c.className = a);
            for (let f of this.optionContent){
                let u = f(l, this.view.state, r);
                u && c.appendChild(u);
            }
        }
        return i1.from && s.classList.add("cm-completionListIncompleteTop"), i1.to < e.length && s.classList.add("cm-completionListIncompleteBottom"), s;
    }
};
function tt5(n) {
    return (e)=>new _8(e, n);
}
function nt6(n, e) {
    let t = n.getBoundingClientRect(), i1 = e.getBoundingClientRect();
    i1.top < t.top ? n.scrollTop -= t.top - i1.top : i1.bottom > t.bottom && (n.scrollTop += i1.bottom - t.bottom);
}
function de7(n) {
    return (n.boost || 0) * 100 + (n.apply ? 10 : 0) + (n.info ? 5 : 0) + (n.type ? 1 : 0);
}
function it7(n, e) {
    let t = [], i1 = 0;
    for (let l of n)if (l.hasResult()) if (l.result.filter === !1) {
        let r = l.result.getMatch;
        for (let c of l.result.options){
            let a = [
                1e9 - i1++
            ];
            if (r) for (let f of r(c))a.push(f);
            t.push(new $8(c, l, a));
        }
    } else {
        let r1 = new Z8(e.sliceDoc(l.from, l.to)), c1;
        for (let a1 of l.result.options)(c1 = r1.match(a1.label)) && (a1.boost != null && (c1[0] += a1.boost), t.push(new $8(a1, l, c1)));
    }
    let s = [], o = null;
    for (let l1 of t.sort(rt6))!o || o.label != l1.completion.label || o.detail != l1.completion.detail || o.type != null && l1.completion.type != null && o.type != l1.completion.type || o.apply != l1.completion.apply ? s.push(l1) : de7(l1.completion) > de7(o) && (s[s.length - 1] = l1), o = l1.completion;
    return s;
}
var E9 = class {
    constructor(e, t, i1, s, o){
        this.options = e, this.attrs = t, this.tooltip = i1, this.timestamp = s, this.selected = o;
    }
    setSelected(e, t) {
        return e == this.selected || e >= this.options.length ? this : new E9(this.options, me6(t, e), this.tooltip, this.timestamp, e);
    }
    static build(e, t, i1, s, o) {
        let l = it7(e, t);
        if (!l.length) return null;
        let r = 0;
        if (s && s.selected) {
            let c = s.options[s.selected].completion;
            for(let a = 0; a < l.length; a++)if (l[a].completion == c) {
                r = a;
                break;
            }
        }
        return new E9(l, me6(i1, r), {
            pos: e.reduce((c, a)=>a.hasResult() ? Math.min(c, a.from) : c, 1e8),
            create: tt5(d5),
            above: o.aboveCursor
        }, s ? s.timestamp : Date.now(), r);
    }
    map(e) {
        return new E9(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
            pos: e.mapPos(this.tooltip.pos)
        }), this.timestamp, this.selected);
    }
}, A10 = class {
    constructor(e, t, i1){
        this.active = e, this.id = t, this.open = i1;
    }
    static start() {
        return new A10(lt6, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
    update(e) {
        let { state: t  } = e, i1 = t.facet(C9), o = (i1.override || t.languageDataAt("autocomplete", x9(t)).map(Ze6)).map((r)=>(this.active.find((a)=>a.source == r) || new p8(r, this.active.some((a)=>a.state != 0) ? 1 : 0)).update(e, i1));
        o.length == this.active.length && o.every((r, c)=>r == this.active[c]) && (o = this.active);
        let l = e.selection || o.some((r)=>r.hasResult() && e.changes.touchesRange(r.from, r.to)) || !st7(o, this.active) ? E9.build(o, t, this.id, this.open, i1) : this.open && e.docChanged ? this.open.map(e.changes) : this.open;
        !l && o.every((r)=>r.state != 1) && o.some((r)=>r.hasResult()) && (o = o.map((r)=>r.hasResult() ? new p8(r.source, 0) : r));
        for (let r of e.effects)r.is(oe9) && (l = l && l.setSelected(r.value, this.id));
        return o == this.active && l == this.open ? this : new A10(o, this.id, l);
    }
    get tooltip() {
        return this.open ? this.open.tooltip : null;
    }
    get attrs() {
        return this.open ? this.open.attrs : ot5;
    }
};
function st7(n, e) {
    if (n == e) return !0;
    for(let t = 0, i1 = 0;;){
        for(; t < n.length && !n[t].hasResult;)t++;
        for(; i1 < e.length && !e[i1].hasResult;)i1++;
        let s = t == n.length, o = i1 == e.length;
        if (s || o) return s == o;
        if (n[t++].result != e[i1++].result) return !1;
    }
}
var ot5 = {
    "aria-autocomplete": "list"
};
function me6(n, e) {
    return {
        "aria-autocomplete": "list",
        "aria-haspopup": "listbox",
        "aria-activedescendant": n + "-" + e,
        "aria-controls": n
    };
}
var lt6 = [];
function rt6(n, e) {
    let t = e.match[0] - n.match[0];
    return t || n.completion.label.localeCompare(e.completion.label);
}
function ee8(n) {
    return n.isUserEvent("input.type") ? "input" : n.isUserEvent("delete.backward") ? "delete" : null;
}
var p8 = class {
    constructor(e, t, i1 = -1){
        this.source = e, this.state = t, this.explicitPos = i1;
    }
    hasResult() {
        return !1;
    }
    update(e, t) {
        let i1 = ee8(e), s = this;
        i1 ? s = s.handleUserEvent(e, i1, t) : e.docChanged ? s = s.handleChange(e) : e.selection && s.state != 0 && (s = new p8(s.source, 0));
        for (let o of e.effects)if (o.is(se8)) s = new p8(s.source, 1, o.value ? x9(e.state) : -1);
        else if (o.is(W8)) s = new p8(s.source, 0);
        else if (o.is(Oe7)) for (let l of o.value)l.source == s.source && (s = l);
        return s;
    }
    handleUserEvent(e, t, i1) {
        return t == "delete" || !i1.activateOnTyping ? this.map(e.changes) : new p8(this.source, 1);
    }
    handleChange(e) {
        return e.changes.touchesRange(x9(e.startState)) ? new p8(this.source, 0) : this.map(e.changes);
    }
    map(e) {
        return e.empty || this.explicitPos < 0 ? this : new p8(this.source, this.state, e.mapPos(this.explicitPos));
    }
}, P10 = class extends p8 {
    constructor(e, t, i1, s, o){
        super(e, 2, t), this.result = i1, this.from = s, this.to = o;
    }
    hasResult() {
        return !0;
    }
    handleUserEvent(e, t, i1) {
        var s;
        let o = e.changes.mapPos(this.from), l = e.changes.mapPos(this.to, 1), r = x9(e.state);
        if ((this.explicitPos < 0 ? r <= o : r < this.from) || r > l || t == "delete" && x9(e.startState) == this.from) return new p8(this.source, t == "input" && i1.activateOnTyping ? 1 : 0);
        let c = this.explicitPos < 0 ? -1 : e.changes.mapPos(this.explicitPos), a;
        return ct6(this.result.validFor, e.state, o, l) ? new P10(this.source, c, this.result, o, l) : this.result.update && (a = this.result.update(this.result, o, l, new U7(e.state, r, c >= 0))) ? new P10(this.source, c, a, a.from, (s = a.to) !== null && s !== void 0 ? s : x9(e.state)) : new p8(this.source, 1, c);
    }
    handleChange(e) {
        return e.changes.touchesRange(this.from, this.to) ? new p8(this.source, 0) : this.map(e.changes);
    }
    map(e) {
        return e.empty ? this : new P10(this.source, this.explicitPos < 0 ? -1 : e.mapPos(this.explicitPos), this.result, e.mapPos(this.from), e.mapPos(this.to, 1));
    }
};
function ct6(n, e, t, i1) {
    if (!n) return !1;
    let s = e.sliceDoc(t, i1);
    return typeof n == "function" ? n(s, t, i1, e) : Te7(n, !0).test(s);
}
var se8 = y4.define(), W8 = y4.define(), Oe7 = y4.define({
    map (n, e) {
        return n.map((t)=>t.map(e));
    }
}), oe9 = y4.define(), d5 = F3.define({
    create () {
        return A10.start();
    },
    update (n, e) {
        return n.update(e);
    },
    provide: (n)=>[
            rn1.from(n, (e)=>e.tooltip),
            C6.contentAttributes.from(n, (e)=>e.attrs)
        ]
}), Le7 = 75;
function j9(n, e = "option") {
    return (t)=>{
        let i1 = t.state.field(d5, !1);
        if (!i1 || !i1.open || Date.now() - i1.open.timestamp < Le7) return !1;
        let s = 1, o;
        e == "page" && (o = ho1(t, i1.open.tooltip)) && (s = Math.max(2, Math.floor(o.dom.offsetHeight / o.dom.querySelector("li").offsetHeight) - 1));
        let l = i1.open.selected + s * (n ? 1 : -1), { length: r  } = i1.open.options;
        return l < 0 ? l = e == "page" ? 0 : r - 1 : l >= r && (l = e == "page" ? r - 1 : 0), t.dispatch({
            effects: oe9.of(l)
        }), !0;
    };
}
var at6 = (n)=>{
    let e = n.state.field(d5, !1);
    return n.state.readOnly || !e || !e.open || Date.now() - e.open.timestamp < Le7 ? !1 : (Ae8(n, e.open.options[e.open.selected]), !0);
}, ft4 = (n)=>n.state.field(d5, !1) ? (n.dispatch({
        effects: se8.of(!0)
    }), !0) : !1, ut6 = (n)=>{
    let e = n.state.field(d5, !1);
    return !e || !e.active.some((t)=>t.state != 0) ? !1 : (n.dispatch({
        effects: W8.of(null)
    }), !0);
}, te10 = class {
    constructor(e, t){
        this.active = e, this.context = t, this.time = Date.now(), this.updates = [], this.done = void 0;
    }
}, ge7 = 50, ht6 = 50, pt6 = 1e3, dt6 = V4.fromClass(class {
    constructor(n){
        this.view = n, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.composing = 0;
        for (let e of n.state.field(d5).active)e.state == 1 && this.startQuery(e);
    }
    update(n) {
        let e = n.state.field(d5);
        if (!n.selectionSet && !n.docChanged && n.startState.field(d5) == e) return;
        let t = n.transactions.some((i1)=>(i1.selection || i1.docChanged) && !ee8(i1));
        for(let i1 = 0; i1 < this.running.length; i1++){
            let s = this.running[i1];
            if (t || s.updates.length + n.transactions.length > ht6 && Date.now() - s.time > pt6) {
                for (let o of s.context.abortListeners)try {
                    o();
                } catch (l) {
                    nt4(this.view.state, l);
                }
                s.context.abortListeners = null, this.running.splice(i1--, 1);
            } else s.updates.push(...n.transactions);
        }
        if (this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), this.debounceUpdate = e.active.some((i1)=>i1.state == 1 && !this.running.some((s)=>s.active.source == i1.source)) ? setTimeout(()=>this.startUpdate(), ge7) : -1, this.composing != 0) for (let i11 of n.transactions)ee8(i11) == "input" ? this.composing = 2 : this.composing == 2 && i11.selection && (this.composing = 3);
    }
    startUpdate() {
        this.debounceUpdate = -1;
        let { state: n  } = this.view, e = n.field(d5);
        for (let t of e.active)t.state == 1 && !this.running.some((i1)=>i1.active.source == t.source) && this.startQuery(t);
    }
    startQuery(n) {
        let { state: e  } = this.view, t = x9(e), i1 = new U7(e, t, n.explicitPos == t), s = new te10(n, i1);
        this.running.push(s), Promise.resolve(n.source(i1)).then((o)=>{
            s.context.aborted || (s.done = o || null, this.scheduleAccept());
        }, (o)=>{
            this.view.dispatch({
                effects: W8.of(null)
            }), nt4(this.view.state, o);
        });
    }
    scheduleAccept() {
        this.running.every((n)=>n.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(()=>this.accept(), ge7));
    }
    accept() {
        var n;
        this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
        let e = [], t = this.view.state.facet(C9);
        for(let i1 = 0; i1 < this.running.length; i1++){
            let s = this.running[i1];
            if (s.done === void 0) continue;
            if (this.running.splice(i1--, 1), s.done) {
                let l = new P10(s.active.source, s.active.explicitPos, s.done, s.done.from, (n = s.done.to) !== null && n !== void 0 ? n : x9(s.updates.length ? s.updates[0].startState : this.view.state));
                for (let r of s.updates)l = l.update(r, t);
                if (l.hasResult()) {
                    e.push(l);
                    continue;
                }
            }
            let o = this.view.state.field(d5).active.find((l)=>l.source == s.active.source);
            if (o && o.state == 1) if (s.done == null) {
                let l1 = new p8(s.active.source, 0);
                for (let r1 of s.updates)l1 = l1.update(r1, t);
                l1.state != 1 && e.push(l1);
            } else this.startQuery(o);
        }
        e.length && this.view.dispatch({
            effects: Oe7.of(e)
        });
    }
}, {
    eventHandlers: {
        blur () {
            let n = this.view.state.field(d5, !1);
            n && n.tooltip && this.view.state.facet(C9).closeOnBlur && this.view.dispatch({
                effects: W8.of(null)
            });
        },
        compositionstart () {
            this.composing = 1;
        },
        compositionend () {
            this.composing == 3 && setTimeout(()=>this.view.dispatch({
                    effects: se8.of(!1)
                }), 20), this.composing = 0;
        }
    }
}), Re8 = C6.baseTheme({
    ".cm-tooltip.cm-tooltip-autocomplete": {
        "& > ul": {
            fontFamily: "monospace",
            whiteSpace: "nowrap",
            overflow: "hidden auto",
            maxWidth_fallback: "700px",
            maxWidth: "min(700px, 95vw)",
            minWidth: "250px",
            maxHeight: "10em",
            listStyle: "none",
            margin: 0,
            padding: 0,
            "& > li": {
                overflowX: "hidden",
                textOverflow: "ellipsis",
                cursor: "pointer",
                padding: "1px 3px",
                lineHeight: 1.2
            }
        }
    },
    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
        background: "#17c",
        color: "white"
    },
    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
        background: "#347",
        color: "white"
    },
    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
        content: '"\xB7\xB7\xB7"',
        opacity: .5,
        display: "block",
        textAlign: "center"
    },
    ".cm-tooltip.cm-completionInfo": {
        position: "absolute",
        padding: "3px 9px",
        width: "max-content",
        maxWidth: "300px"
    },
    ".cm-completionInfo.cm-completionInfo-left": {
        right: "100%"
    },
    ".cm-completionInfo.cm-completionInfo-right": {
        left: "100%"
    },
    "&light .cm-snippetField": {
        backgroundColor: "#00000022"
    },
    "&dark .cm-snippetField": {
        backgroundColor: "#ffffff22"
    },
    ".cm-snippetFieldPosition": {
        verticalAlign: "text-top",
        width: 0,
        height: "1.15em",
        margin: "0 -0.7px -.7em",
        borderLeft: "1.4px dotted #888"
    },
    ".cm-completionMatchedText": {
        textDecoration: "underline"
    },
    ".cm-completionDetail": {
        marginLeft: "0.5em",
        fontStyle: "italic"
    },
    ".cm-completionIcon": {
        fontSize: "90%",
        width: ".8em",
        display: "inline-block",
        textAlign: "center",
        paddingRight: ".6em",
        opacity: "0.6"
    },
    ".cm-completionIcon-function, .cm-completionIcon-method": {
        "&:after": {
            content: "'\u0192'"
        }
    },
    ".cm-completionIcon-class": {
        "&:after": {
            content: "'\u25CB'"
        }
    },
    ".cm-completionIcon-interface": {
        "&:after": {
            content: "'\u25CC'"
        }
    },
    ".cm-completionIcon-variable": {
        "&:after": {
            content: "'\u{1D465}'"
        }
    },
    ".cm-completionIcon-constant": {
        "&:after": {
            content: "'\u{1D436}'"
        }
    },
    ".cm-completionIcon-type": {
        "&:after": {
            content: "'\u{1D461}'"
        }
    },
    ".cm-completionIcon-enum": {
        "&:after": {
            content: "'\u222A'"
        }
    },
    ".cm-completionIcon-property": {
        "&:after": {
            content: "'\u25A1'"
        }
    },
    ".cm-completionIcon-keyword": {
        "&:after": {
            content: "'\u{1F511}\uFE0E'"
        }
    },
    ".cm-completionIcon-namespace": {
        "&:after": {
            content: "'\u25A2'"
        }
    },
    ".cm-completionIcon-text": {
        "&:after": {
            content: "'abc'",
            fontSize: "50%",
            verticalAlign: "middle"
        }
    }
}), ne7 = class {
    constructor(e, t, i1, s){
        this.field = e, this.line = t, this.from = i1, this.to = s;
    }
}, O7 = class {
    constructor(e, t, i1){
        this.field = e, this.from = t, this.to = i1;
    }
    map(e) {
        let t = e.mapPos(this.from, -1, M5.TrackDel), i1 = e.mapPos(this.to, 1, M5.TrackDel);
        return t == null || i1 == null ? null : new O7(this.field, t, i1);
    }
}, L6 = class {
    constructor(e, t){
        this.lines = e, this.fieldPositions = t;
    }
    instantiate(e, t) {
        let i1 = [], s = [
            t
        ], o = e.doc.lineAt(t), l = /^\s*/.exec(o.text)[0];
        for (let c of this.lines){
            if (i1.length) {
                let a = l, f = /^\t*/.exec(c)[0].length;
                for(let u = 0; u < f; u++)a += e.facet(Pt4);
                s.push(t + a.length - f), c = a + c.slice(f);
            }
            i1.push(c), t += c.length + 1;
        }
        let r = this.fieldPositions.map((c)=>new O7(c.field, s[c.line] + c.from, s[c.line] + c.to));
        return {
            text: i1,
            ranges: r
        };
    }
    static parse(e) {
        let t = [], i1 = [], s = [], o;
        for (let l of e.split(/\r\n?|\n/)){
            for(; o = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(l);){
                let r = o[1] ? +o[1] : null, c = o[2] || o[3] || "", a = -1;
                for(let f = 0; f < t.length; f++)(r != null ? t[f].seq == r : c ? t[f].name == c : !1) && (a = f);
                if (a < 0) {
                    let f1 = 0;
                    for(; f1 < t.length && (r == null || t[f1].seq != null && t[f1].seq < r);)f1++;
                    t.splice(f1, 0, {
                        seq: r,
                        name: c
                    }), a = f1;
                    for (let u of s)u.field >= a && u.field++;
                }
                s.push(new ne7(a, i1.length, o.index, o.index + c.length)), l = l.slice(0, o.index) + c + l.slice(o.index + o[0].length);
            }
            i1.push(l);
        }
        return new L6(i1, s);
    }
}, mt7 = M6.widget({
    widget: new class extends X4 {
        toDOM() {
            let n = document.createElement("span");
            return n.className = "cm-snippetFieldPosition", n;
        }
        ignoreEvent() {
            return !1;
        }
    }
}), gt4 = M6.mark({
    class: "cm-snippetField"
}), I8 = class {
    constructor(e, t){
        this.ranges = e, this.active = t, this.deco = M6.set(e.map((i1)=>(i1.from == i1.to ? mt7 : gt4).range(i1.from, i1.to)));
    }
    map(e) {
        let t = [];
        for (let i1 of this.ranges){
            let s = i1.map(e);
            if (!s) return null;
            t.push(s);
        }
        return new I8(t, this.active);
    }
    selectionInsideField(e) {
        return e.ranges.every((t)=>this.ranges.some((i1)=>i1.field == this.active && i1.from <= t.from && i1.to >= t.to));
    }
}, k5 = y4.define({
    map (n, e) {
        return n && n.map(e);
    }
}), bt4 = y4.define(), R10 = F3.define({
    create () {
        return null;
    },
    update (n, e) {
        for (let t of e.effects){
            if (t.is(k5)) return t.value;
            if (t.is(bt4) && n) return new I8(n.ranges, t.value);
        }
        return n && e.docChanged && (n = n.map(e.changes)), n && e.selection && !n.selectionInsideField(e.selection) && (n = null), n;
    },
    provide: (n)=>C6.decorations.from(n, (e)=>e ? e.deco : M6.none)
});
function le10(n, e) {
    return g5.create(n.filter((t)=>t.field == e).map((t)=>g5.range(t.from, t.to)));
}
function Me8(n) {
    return ({ state: e , dispatch: t  })=>{
        let i1 = e.field(R10, !1);
        if (!i1 || n < 0 && i1.active == 0) return !1;
        let s = i1.active + n, o = n > 0 && !i1.ranges.some((l)=>l.field == s + n);
        return t(e.update({
            selection: le10(i1.ranges, s),
            effects: k5.of(o ? null : new I8(i1.ranges, s))
        })), !0;
    };
}
var vt6 = ({ state: n , dispatch: e  })=>n.field(R10, !1) ? (e(n.update({
        effects: k5.of(null)
    })), !0) : !1, wt5 = Me8(1), xt6 = Me8(-1), Ct5 = [
    {
        key: "Tab",
        run: wt5,
        shift: xt6
    },
    {
        key: "Escape",
        run: vt6
    }
], be7 = A3.define({
    combine (n) {
        return n.length ? n[0] : Ct5;
    }
}), It6 = lt3.highest(dr2.compute([
    be7
], (n)=>n.facet(be7)));
C6.domEventHandlers({
    mousedown (n, e) {
        let t = e.state.field(R10, !1), i1;
        if (!t || (i1 = e.posAtCoords({
            x: n.clientX,
            y: n.clientY
        })) == null) return !1;
        let s = t.ranges.find((o)=>o.from <= i1 && o.to >= i1);
        return !s || s.field == t.active ? !1 : (e.dispatch({
            selection: le10(t.ranges, s.field),
            effects: k5.of(t.ranges.some((o)=>o.field > s.field) ? new I8(t.ranges, s.field) : null)
        }), !0);
    }
});
Object.create(null);
var F8 = {
    brackets: [
        "(",
        "[",
        "{",
        "'",
        '"'
    ],
    before: ")]}:;>"
}, S8 = y4.define({
    map (n, e) {
        let t = e.mapPos(n, -1, M5.TrackAfter);
        return t ?? void 0;
    }
}), re6 = y4.define({
    map (n, e) {
        return e.mapPos(n);
    }
}), ce9 = new class extends j3 {
};
ce9.startSide = 1;
ce9.endSide = -1;
var ke8 = F3.define({
    create () {
        return P3.empty;
    },
    update (n, e) {
        if (e.selection) {
            let t = e.state.doc.lineAt(e.selection.main.head).from, i1 = e.startState.doc.lineAt(e.startState.selection.main.head).from;
            t != e.changes.mapPos(i1, -1) && (n = P3.empty);
        }
        n = n.map(e.changes);
        for (let t1 of e.effects)t1.is(S8) ? n = n.update({
            add: [
                ce9.range(t1.value, t1.value + 1)
            ]
        }) : t1.is(re6) && (n = n.update({
            filter: (i1)=>i1 != t1.value
        }));
        return n;
    }
});
function zt5() {
    return [
        At6,
        ke8
    ];
}
var Y7 = "()[]{}<>";
function De8(n) {
    for(let e = 0; e < Y7.length; e += 2)if (Y7.charCodeAt(e) == n) return Y7.charAt(e + 1);
    return rt3(n < 128 ? n : n + 1);
}
function je4(n, e) {
    return n.languageDataAt("closeBrackets", e)[0] || F8;
}
var Tt6 = typeof navigator == "object" && /Android\b/.test(navigator.userAgent), At6 = C6.inputHandler.of((n, e, t, i1)=>{
    if ((Tt6 ? n.composing : n.compositionStarted) || n.state.readOnly) return !1;
    let s = n.state.selection.main;
    if (i1.length > 2 || i1.length == 2 && be3(oe4(i1, 0)) == 1 || e != s.from || t != s.to) return !1;
    let o = Lt6(n.state, i1);
    return o ? (n.dispatch(o), !0) : !1;
}), Ot6 = ({ state: n , dispatch: e  })=>{
    if (n.readOnly) return !1;
    let i1 = je4(n, n.selection.main.head).brackets || F8.brackets, s = null, o = n.changeByRange((l)=>{
        if (l.empty) {
            let r = Rt5(n.doc, l.head);
            for (let c of i1)if (c == r && q9(n.doc, l.head) == De8(oe4(c, 0))) return {
                changes: {
                    from: l.head - c.length,
                    to: l.head + c.length
                },
                range: g5.cursor(l.head - c.length),
                userEvent: "delete.backward"
            };
        }
        return {
            range: s = l
        };
    });
    return s || e(n.update(o, {
        scrollIntoView: !0
    })), !s;
}, Qt5 = [
    {
        key: "Backspace",
        run: Ot6
    }
];
function Lt6(n, e) {
    let t = je4(n, n.selection.main.head), i1 = t.brackets || F8.brackets;
    for (let s of i1){
        let o = De8(oe4(s, 0));
        if (e == s) return o == s ? kt4(n, s, i1.indexOf(s + s + s) > -1) : Mt5(n, s, o, t.before || F8.before);
        if (e == o && Ue7(n, n.selection.main.from)) return Bt6(n, s, o);
    }
    return null;
}
function Ue7(n, e) {
    let t = !1;
    return n.field(ke8).between(0, n.doc.length, (i1)=>{
        i1 == e && (t = !0);
    }), t;
}
function q9(n, e) {
    let t = n.sliceString(e, e + 2);
    return t.slice(0, be3(oe4(t, 0)));
}
function Rt5(n, e) {
    let t = n.sliceString(e - 2, e);
    return be3(oe4(t, 0)) == t.length ? t : t.slice(1);
}
function Mt5(n, e, t, i1) {
    let s = null, o = n.changeByRange((l)=>{
        if (!l.empty) return {
            changes: [
                {
                    insert: e,
                    from: l.from
                },
                {
                    insert: t,
                    from: l.to
                }
            ],
            effects: S8.of(l.to + e.length),
            range: g5.range(l.anchor + e.length, l.head + e.length)
        };
        let r = q9(n.doc, l.head);
        return !r || /\s/.test(r) || i1.indexOf(r) > -1 ? {
            changes: {
                insert: e + t,
                from: l.head
            },
            effects: S8.of(l.head + e.length),
            range: g5.cursor(l.head + e.length)
        } : {
            range: s = l
        };
    });
    return s ? null : n.update(o, {
        scrollIntoView: !0,
        userEvent: "input.type"
    });
}
function Bt6(n, e, t) {
    let i1 = null, s = n.selection.ranges.map((o)=>o.empty && q9(n.doc, o.head) == t ? g5.cursor(o.head + t.length) : i1 = o);
    return i1 ? null : n.update({
        selection: g5.create(s, n.selection.mainIndex),
        scrollIntoView: !0,
        effects: n.selection.ranges.map(({ from: o  })=>re6.of(o))
    });
}
function kt4(n, e, t) {
    let i1 = null, s = n.changeByRange((o)=>{
        if (!o.empty) return {
            changes: [
                {
                    insert: e,
                    from: o.from
                },
                {
                    insert: e,
                    from: o.to
                }
            ],
            effects: S8.of(o.to + e.length),
            range: g5.range(o.anchor + e.length, o.head + e.length)
        };
        let l = o.head, r = q9(n.doc, l);
        if (r == e) {
            if (xe6(n, l)) return {
                changes: {
                    insert: e + e,
                    from: l
                },
                effects: S8.of(l + e.length),
                range: g5.cursor(l + e.length)
            };
            if (Ue7(n, l)) {
                let c = t && n.sliceDoc(l, l + e.length * 3) == e + e + e;
                return {
                    range: g5.cursor(l + e.length * (c ? 3 : 1)),
                    effects: re6.of(l)
                };
            }
        } else {
            if (t && n.sliceDoc(l - 2 * e.length, l) == e + e && xe6(n, l - 2 * e.length)) return {
                changes: {
                    insert: e + e + e + e,
                    from: l
                },
                effects: S8.of(l + e.length),
                range: g5.cursor(l + e.length)
            };
            if (n.charCategorizer(l)(r) != R4.Word) {
                let c1 = n.sliceDoc(l - 1, l);
                if (c1 != e && n.charCategorizer(l)(c1) != R4.Word && !Dt6(n, l, e)) return {
                    changes: {
                        insert: e + e,
                        from: l
                    },
                    effects: S8.of(l + e.length),
                    range: g5.cursor(l + e.length)
                };
            }
        }
        return {
            range: i1 = o
        };
    });
    return i1 ? null : n.update(s, {
        scrollIntoView: !0,
        userEvent: "input.type"
    });
}
function xe6(n, e) {
    let t = m6(n).resolveInner(e + 1);
    return t.parent && t.from == e;
}
function Dt6(n, e, t) {
    let i1 = m6(n).resolveInner(e, -1);
    for(let s = 0; s < 5; s++){
        if (n.sliceDoc(i1.from, i1.from + t.length) == t) return !0;
        let o = i1.to == e && i1.parent;
        if (!o) break;
        i1 = o;
    }
    return !1;
}
function Xt5(n = {}) {
    return [
        d5,
        C9.of(n),
        dt6,
        Ut6,
        Re8
    ];
}
var jt6 = [
    {
        key: "Ctrl-Space",
        run: ft4
    },
    {
        key: "Escape",
        run: ut6
    },
    {
        key: "ArrowDown",
        run: j9(!0)
    },
    {
        key: "ArrowUp",
        run: j9(!1)
    },
    {
        key: "PageDown",
        run: j9(!0, "page")
    },
    {
        key: "PageUp",
        run: j9(!1, "page")
    },
    {
        key: "Enter",
        run: at6
    }
], Ut6 = lt3.highest(dr2.computeN([
    C9
], (n)=>n.facet(C9).defaultKeymap ? [
        jt6
    ] : []));
new WeakMap;
var R11 = class {
    constructor(e, o, i1){
        this.from = e, this.to = o, this.diagnostic = i1;
    }
}, m8 = class {
    constructor(e, o, i1){
        this.diagnostics = e, this.panel = o, this.selected = i1;
    }
    static init(e, o, i1) {
        let n = e, s = i1.facet(h3).markerFilter;
        s && (n = s(n));
        let r = M6.set(n.map((l)=>l.from == l.to || l.from == l.to - 1 && i1.doc.lineAt(l.from).to == l.from ? M6.widget({
                widget: new A11(l),
                diagnostic: l
            }).range(l.from) : M6.mark({
                attributes: {
                    class: "cm-lintRange cm-lintRange-" + l.severity
                },
                diagnostic: l
            }).range(l.from, l.to)), !0);
        return new m8(r, o, b5(r));
    }
};
function b5(t, e = null, o = 0) {
    let i1 = null;
    return t.between(o, 1e9, (n, s, { spec: r  })=>{
        if (!(e && r.diagnostic != e)) return i1 = new R11(n, s, r.diagnostic), !1;
    }), i1;
}
function j10(t, e) {
    return !!(t.effects.some((o)=>o.is(C10)) || t.changes.touchesRange(e.pos));
}
function G8(t, e) {
    return t.field(d6, !1) ? e : e.concat(y4.appendConfig.of([
        d6,
        C6.decorations.compute([
            d6
        ], (o)=>{
            let { selected: i1 , panel: n  } = o.field(d6);
            return !i1 || !n || i1.from == i1.to ? M6.none : M6.set([
                ie8.range(i1.from, i1.to)
            ]);
        }),
        lo1(oe10, {
            hideOn: j10
        }),
        le11
    ]));
}
function te11(t, e) {
    return {
        effects: G8(t, [
            C10.of(e)
        ])
    };
}
var C10 = y4.define(), F9 = y4.define(), $9 = y4.define(), d6 = F3.define({
    create () {
        return new m8(M6.none, null, null);
    },
    update (t, e) {
        if (e.docChanged) {
            let o = t.diagnostics.map(e.changes), i1 = null;
            if (t.selected) {
                let n = e.changes.mapPos(t.selected.from, 1);
                i1 = b5(o, t.selected.diagnostic, n) || b5(o, null, n);
            }
            t = new m8(o, t.panel, i1);
        }
        for (let o1 of e.effects)o1.is(C10) ? t = m8.init(o1.value, t.panel, e.state) : o1.is(F9) ? t = new m8(t.diagnostics, o1.value ? w9.open : null, t.selected) : o1.is($9) && (t = new m8(t.diagnostics, t.panel, o1.value));
        return t;
    },
    provide: (t)=>[
            ns2.from(t, (e)=>e.panel),
            C6.decorations.from(t, (e)=>e.diagnostics)
        ]
});
var ie8 = M6.mark({
    class: "cm-lintRange cm-lintRange-active"
});
function oe10(t, e, o) {
    let { diagnostics: i1  } = t.state.field(d6), n = [], s = 2e8, r = 0;
    i1.between(e - (o < 0 ? 1 : 0), e + (o > 0 ? 1 : 0), (a, c, { spec: f  })=>{
        e >= a && e <= c && (a == c || (e > a || o > 0) && (e < c || o < 0)) && (n.push(f.diagnostic), s = Math.min(a, s), r = Math.max(c, r));
    });
    let l = t.state.facet(h3).tooltipFilter;
    return l && (n = l(n)), n.length ? {
        pos: s,
        end: r,
        above: t.state.doc.lineAt(s).to < r,
        create () {
            return {
                dom: H7(t, n)
            };
        }
    } : null;
}
function H7(t, e) {
    return s6("ul", {
        class: "cm-tooltip-lint"
    }, e.map((o)=>_9(t, o, !1)));
}
var ne8 = (t)=>{
    let e = t.state.field(d6, !1);
    (!e || !e.panel) && t.dispatch({
        effects: G8(t.state, [
            F9.of(!0)
        ])
    });
    let o = po2(t, w9.open);
    return o && o.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, I9 = (t)=>{
    let e = t.state.field(d6, !1);
    return !e || !e.panel ? !1 : (t.dispatch({
        effects: F9.of(!1)
    }), !0);
}, se9 = (t)=>{
    let e = t.state.field(d6, !1);
    if (!e) return !1;
    let o = t.state.selection.main, i1 = e.diagnostics.iter(o.to + 1);
    return !i1.value && (i1 = e.diagnostics.iter(0), !i1.value || i1.from == o.from && i1.to == o.to) ? !1 : (t.dispatch({
        selection: {
            anchor: i1.from,
            head: i1.to
        },
        scrollIntoView: !0
    }), !0);
}, pe7 = [
    {
        key: "Mod-Shift-m",
        run: ne8
    },
    {
        key: "F8",
        run: se9
    }
], N9 = V4.fromClass(class {
    constructor(t){
        this.view = t, this.timeout = -1, this.set = !0;
        let { delay: e  } = t.state.facet(h3);
        this.lintTime = Date.now() + e, this.run = this.run.bind(this), this.timeout = setTimeout(this.run, e);
    }
    run() {
        let t = Date.now();
        if (t < this.lintTime - 10) setTimeout(this.run, this.lintTime - t);
        else {
            this.set = !1;
            let { state: e  } = this.view, { sources: o  } = e.facet(h3);
            Promise.all(o.map((i1)=>Promise.resolve(i1(this.view)))).then((i1)=>{
                let n = i1.reduce((s, r)=>s.concat(r));
                this.view.state.doc == e.doc && this.view.dispatch(te11(this.view.state, n));
            }, (i1)=>{
                nt4(this.view.state, i1);
            });
        }
    }
    update(t) {
        let e = t.state.facet(h3);
        (t.docChanged || e != t.startState.facet(h3)) && (this.lintTime = Date.now() + e.delay, this.set || (this.set = !0, this.timeout = setTimeout(this.run, e.delay)));
    }
    force() {
        this.set && (this.lintTime = Date.now(), this.run());
    }
    destroy() {
        clearTimeout(this.timeout);
    }
}), h3 = A3.define({
    combine (t) {
        return Object.assign({
            sources: t.map((e)=>e.source)
        }, ht3(t.map((e)=>e.config), {
            delay: 750,
            markerFilter: null,
            tooltipFilter: null
        }));
    },
    enables: N9
});
function V9(t) {
    let e = [];
    if (t) e: for (let { name: o  } of t){
        for(let i1 = 0; i1 < o.length; i1++){
            let n = o[i1];
            if (/[a-zA-Z]/.test(n) && !e.some((s)=>s.toLowerCase() == n.toLowerCase())) {
                e.push(n);
                continue e;
            }
        }
        e.push("");
    }
    return e;
}
function _9(t, e, o) {
    var i1;
    let n = o ? V9(e.actions) : [];
    return s6("li", {
        class: "cm-diagnostic cm-diagnostic-" + e.severity
    }, s6("span", {
        class: "cm-diagnosticText"
    }, e.renderMessage ? e.renderMessage() : e.message), (i1 = e.actions) === null || i1 === void 0 ? void 0 : i1.map((s, r)=>{
        let l = (p1)=>{
            p1.preventDefault();
            let S1 = b5(t.state.field(d6).diagnostics, e);
            S1 && s.apply(t, S1.from, S1.to);
        }, { name: a  } = s, c = n[r] ? a.indexOf(n[r]) : -1, f = c < 0 ? a : [
            a.slice(0, c),
            s6("u", a.slice(c, c + 1)),
            a.slice(c + 1)
        ];
        return s6("button", {
            type: "button",
            class: "cm-diagnosticAction",
            onclick: l,
            onmousedown: l,
            "aria-label": ` Action: ${a}${c < 0 ? "" : ` (access key "${n[r]})"`}.`
        }, f);
    }), e.source && s6("div", {
        class: "cm-diagnosticSource"
    }, e.source));
}
var A11 = class extends X4 {
    constructor(e){
        super(), this.diagnostic = e;
    }
    eq(e) {
        return e.diagnostic == this.diagnostic;
    }
    toDOM() {
        return s6("span", {
            class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
        });
    }
}, y9 = class {
    constructor(e, o){
        this.diagnostic = o, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = _9(e, o, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
    }
}, w9 = class {
    constructor(e){
        this.view = e, this.items = [];
        let o = (n)=>{
            if (n.keyCode == 27) I9(this.view), this.view.focus();
            else if (n.keyCode == 38 || n.keyCode == 33) this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
            else if (n.keyCode == 40 || n.keyCode == 34) this.moveSelection((this.selectedIndex + 1) % this.items.length);
            else if (n.keyCode == 36) this.moveSelection(0);
            else if (n.keyCode == 35) this.moveSelection(this.items.length - 1);
            else if (n.keyCode == 13) this.view.focus();
            else if (n.keyCode >= 65 && n.keyCode <= 90 && this.selectedIndex >= 0) {
                let { diagnostic: s  } = this.items[this.selectedIndex], r = V9(s.actions);
                for(let l = 0; l < r.length; l++)if (r[l].toUpperCase().charCodeAt(0) == n.keyCode) {
                    let a = b5(this.view.state.field(d6).diagnostics, s);
                    a && s.actions[l].apply(e, a.from, a.to);
                }
            } else return;
            n.preventDefault();
        }, i1 = (n)=>{
            for(let s = 0; s < this.items.length; s++)this.items[s].dom.contains(n.target) && this.moveSelection(s);
        };
        this.list = s6("ul", {
            tabIndex: 0,
            role: "listbox",
            "aria-label": this.view.state.phrase("Diagnostics"),
            onkeydown: o,
            onclick: i1
        }), this.dom = s6("div", {
            class: "cm-panel-lint"
        }, this.list, s6("button", {
            type: "button",
            name: "close",
            "aria-label": this.view.state.phrase("close"),
            onclick: ()=>I9(this.view)
        }, "\xD7")), this.update();
    }
    get selectedIndex() {
        let e = this.view.state.field(d6).selected;
        if (!e) return -1;
        for(let o = 0; o < this.items.length; o++)if (this.items[o].diagnostic == e.diagnostic) return o;
        return -1;
    }
    update() {
        let { diagnostics: e , selected: o  } = this.view.state.field(d6), i1 = 0, n = !1, s = null;
        for(e.between(0, this.view.state.doc.length, (r, l, { spec: a  })=>{
            let c = -1, f;
            for(let p1 = i1; p1 < this.items.length; p1++)if (this.items[p1].diagnostic == a.diagnostic) {
                c = p1;
                break;
            }
            c < 0 ? (f = new y9(this.view, a.diagnostic), this.items.splice(i1, 0, f), n = !0) : (f = this.items[c], c > i1 && (this.items.splice(i1, c - i1), n = !0)), o && f.diagnostic == o.diagnostic ? f.dom.hasAttribute("aria-selected") || (f.dom.setAttribute("aria-selected", "true"), s = f) : f.dom.hasAttribute("aria-selected") && f.dom.removeAttribute("aria-selected"), i1++;
        }); i1 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0);)n = !0, this.items.pop();
        this.items.length == 0 && (this.items.push(new y9(this.view, {
            from: -1,
            to: -1,
            severity: "info",
            message: this.view.state.phrase("No diagnostics")
        })), n = !0), s ? (this.list.setAttribute("aria-activedescendant", s.id), this.view.requestMeasure({
            key: this,
            read: ()=>({
                    sel: s.dom.getBoundingClientRect(),
                    panel: this.list.getBoundingClientRect()
                }),
            write: ({ sel: r , panel: l  })=>{
                r.top < l.top ? this.list.scrollTop -= l.top - r.top : r.bottom > l.bottom && (this.list.scrollTop += r.bottom - l.bottom);
            }
        })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), n && this.sync();
    }
    sync() {
        let e = this.list.firstChild;
        function o() {
            let i1 = e;
            e = i1.nextSibling, i1.remove();
        }
        for (let i1 of this.items)if (i1.dom.parentNode == this.list) {
            for(; e != i1.dom;)o();
            e = i1.dom.nextSibling;
        } else this.list.insertBefore(i1.dom, e);
        for(; e;)o();
    }
    moveSelection(e) {
        if (this.selectedIndex < 0) return;
        let o = this.view.state.field(d6), i1 = b5(o.diagnostics, this.items[e].diagnostic);
        !i1 || this.view.dispatch({
            selection: {
                anchor: i1.from,
                head: i1.to
            },
            scrollIntoView: !0,
            effects: $9.of(i1)
        });
    }
    static open(e) {
        return new w9(e);
    }
};
function x10(t, e = 'viewBox="0 0 40 40"') {
    return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(t)}</svg>')`;
}
function P11(t) {
    return x10(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${t}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
var le11 = C6.baseTheme({
    ".cm-diagnostic": {
        padding: "3px 6px 3px 8px",
        marginLeft: "-1px",
        display: "block",
        whiteSpace: "pre-wrap"
    },
    ".cm-diagnostic-error": {
        borderLeft: "5px solid #d11"
    },
    ".cm-diagnostic-warning": {
        borderLeft: "5px solid orange"
    },
    ".cm-diagnostic-info": {
        borderLeft: "5px solid #999"
    },
    ".cm-diagnosticAction": {
        font: "inherit",
        border: "none",
        padding: "2px 4px",
        backgroundColor: "#444",
        color: "white",
        borderRadius: "3px",
        marginLeft: "8px"
    },
    ".cm-diagnosticSource": {
        fontSize: "70%",
        opacity: .7
    },
    ".cm-lintRange": {
        backgroundPosition: "left bottom",
        backgroundRepeat: "repeat-x",
        paddingBottom: "0.7px"
    },
    ".cm-lintRange-error": {
        backgroundImage: P11("#d11")
    },
    ".cm-lintRange-warning": {
        backgroundImage: P11("orange")
    },
    ".cm-lintRange-info": {
        backgroundImage: P11("#999")
    },
    ".cm-lintRange-active": {
        backgroundColor: "#ffdd9980"
    },
    ".cm-tooltip-lint": {
        padding: 0,
        margin: 0
    },
    ".cm-lintPoint": {
        position: "relative",
        "&:after": {
            content: '""',
            position: "absolute",
            bottom: 0,
            left: "-2px",
            borderLeft: "3px solid transparent",
            borderRight: "3px solid transparent",
            borderBottom: "4px solid #d11"
        }
    },
    ".cm-lintPoint-warning": {
        "&:after": {
            borderBottomColor: "orange"
        }
    },
    ".cm-lintPoint-info": {
        "&:after": {
            borderBottomColor: "#999"
        }
    },
    ".cm-panel.cm-panel-lint": {
        position: "relative",
        "& ul": {
            maxHeight: "100px",
            overflowY: "auto",
            "& [aria-selected]": {
                backgroundColor: "#ddd",
                "& u": {
                    textDecoration: "underline"
                }
            },
            "&:focus [aria-selected]": {
                background_fallback: "#bdf",
                backgroundColor: "Highlight",
                color_fallback: "white",
                color: "HighlightText"
            },
            "& u": {
                textDecoration: "none"
            },
            padding: 0,
            margin: 0
        },
        "& [name=close]": {
            position: "absolute",
            top: "0",
            right: "2px",
            background: "inherit",
            border: "none",
            font: "inherit",
            padding: 0,
            margin: 0
        }
    }
}), D8 = class extends _4 {
    constructor(e){
        super(), this.diagnostics = e, this.severity = e.reduce((o, i1)=>{
            let n = i1.severity;
            return n == "error" || n == "warning" && o == "info" ? n : o;
        }, "info");
    }
    toDOM(e) {
        let o = document.createElement("div");
        o.className = "cm-lint-marker cm-lint-marker-" + this.severity;
        let i1 = this.diagnostics, n = e.state.facet(T12).tooltipFilter;
        return n && (i1 = n(i1)), i1.length && (o.onmouseover = ()=>ae9(e, o, i1)), o;
    }
};
function re7(t, e) {
    let o = (i1)=>{
        let n = e.getBoundingClientRect();
        if (!(i1.clientX > n.left - 10 && i1.clientX < n.right + 10 && i1.clientY > n.top - 10 && i1.clientY < n.bottom + 10)) {
            for(let s = i1.target; s; s = s.parentNode)if (s.nodeType == 1 && s.classList.contains("cm-tooltip-lint")) return;
            window.removeEventListener("mousemove", o), t.state.field(z8) && t.dispatch({
                effects: M12.of(null)
            });
        }
    };
    window.addEventListener("mousemove", o);
}
function ae9(t, e, o) {
    function i1() {
        let r = t.elementAtHeight(e.getBoundingClientRect().top + 5 - t.documentTop);
        t.coordsAtPos(r.from) && t.dispatch({
            effects: M12.of({
                pos: r.from,
                above: !1,
                create () {
                    return {
                        dom: H7(t, o),
                        getCoords: ()=>e.getBoundingClientRect()
                    };
                }
            })
        }), e.onmouseout = e.onmousemove = null, re7(t, e);
    }
    let { hoverTime: n  } = t.state.facet(T12), s = setTimeout(i1, n);
    e.onmouseout = ()=>{
        clearTimeout(s), e.onmouseout = e.onmousemove = null;
    }, e.onmousemove = ()=>{
        clearTimeout(s), s = setTimeout(i1, n);
    };
}
function ce10(t, e) {
    let o = Object.create(null);
    for (let n of e){
        let s = t.lineAt(n.from);
        (o[s.from] || (o[s.from] = [])).push(n);
    }
    let i1 = [];
    for(let n1 in o)i1.push(new D8(o[n1]).range(+n1));
    return P3.of(i1, !0);
}
var de8 = mo2({
    class: "cm-gutter-lint",
    markers: (t)=>t.state.field(q10)
}), q10 = F3.define({
    create () {
        return P3.empty;
    },
    update (t, e) {
        t = t.map(e.changes);
        let o = e.state.facet(T12).markerFilter;
        for (let i1 of e.effects)if (i1.is(C10)) {
            let n = i1.value;
            o && (n = o(n || [])), t = ce10(e.state.doc, n.slice(0));
        }
        return t;
    }
}), M12 = y4.define(), z8 = F3.define({
    create () {
        return null;
    },
    update (t, e) {
        return t && e.docChanged && (t = j10(e, t) ? null : Object.assign(Object.assign({}, t), {
            pos: e.changes.mapPos(t.pos)
        })), e.effects.reduce((o, i1)=>i1.is(M12) ? i1.value : o, t);
    },
    provide: (t)=>rn1.from(t)
}), fe7 = C6.baseTheme({
    ".cm-gutter-lint": {
        width: "1.4em",
        "& .cm-gutterElement": {
            padding: ".2em"
        }
    },
    ".cm-lint-marker": {
        width: "1em",
        height: "1em"
    },
    ".cm-lint-marker-info": {
        content: x10('<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>')
    },
    ".cm-lint-marker-warning": {
        content: x10('<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>')
    },
    ".cm-lint-marker-error:before": {
        content: x10('<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>')
    }
}), T12 = A3.define({
    combine (t) {
        return ht3(t, {
            hoverTime: 300,
            markerFilter: null,
            tooltipFilter: null
        });
    }
});
var I10 = [
    go1(),
    bo1(),
    to2(),
    un1(),
    tn2(),
    Zr1(),
    Qr1(),
    w3.allowMultipleSelections.of(!0),
    Xe4(),
    en1(rn2, {
        fallback: !0
    }),
    sn2(),
    zt5(),
    Xt5(),
    no1(),
    ro1(),
    io1(),
    Te6(),
    dr2.of([
        ...Qt5,
        ...Tn2,
        ...Be6,
        ...dn1,
        ..._e6,
        ...jt6,
        ...pe7
    ])
];
const noop = ()=>null;
const CREATE_EVENT = 'create';
const observableEvents = [
    CREATE_EVENT
];
const reactiveFunctions = {};
function react(selector) {
    (reactiveFunctions[selector] || noop)();
}
const store = createStore({}, react);
function update(target, compositor) {
    const html = compositor(target);
    if (html) target.innerHTML = html;
}
function draw(selector, compositor) {
    listen(CREATE_EVENT, selector, (event)=>{
        const draw = update.bind(null, event.target, compositor);
        reactiveFunctions[selector] = draw;
        draw();
    });
}
function flair(selector, stylesheet) {
    const styles = `
    <style type="text/css" data-module=${selector}>
      ${stylesheet.replaceAll('&', selector)}
    </style>
  `;
    document.body.insertAdjacentHTML("beforeend", styles);
}
function learn(selector) {
    return store.get(selector) || {};
}
function teach(selector, payload, handler = (s, p1)=>({
        ...s,
        ...p1
    })) {
    store.set(selector, payload, handler);
}
function when(selector1, eventName, selector2, callback) {
    listen(eventName, `${selector1} ${selector2}`, callback);
}
function module(selector, initialState = {}) {
    teach(selector, initialState);
    return {
        selector,
        learn: learn.bind(null, selector),
        draw: draw.bind(null, selector),
        flair: flair.bind(null, selector),
        when: when.bind(null, selector),
        teach: teach.bind(null, selector)
    };
}
function listen(type, selector, handler = ()=>null) {
    const callback = (event)=>{
        if (event.target && event.target.matches && event.target.matches(selector)) {
            handler.call(null, event);
        }
    };
    document.addEventListener(type, callback, true);
    if (observableEvents.includes(type)) {
        observe(selector);
    }
    return function unlisten() {
        if (type === CREATE_EVENT) {
            disregard(selector);
        }
        document.removeEventListener(type, callback, true);
    };
}
let selectors = [];
function observe(selector) {
    selectors = [
        ...new Set([
            ...selectors,
            selector
        ])
    ];
    maybeCreateReactive([
        ...document.querySelectorAll(selector)
    ]);
}
function disregard(selector) {
    const index = selectors.indexOf(selector);
    if (index >= 0) {
        selectors = [
            ...selectors.slice(0, index),
            ...selectors.slice(index + 1)
        ];
    }
}
function maybeCreateReactive(targets) {
    targets.filter((x1)=>!x1.reactive).forEach(dispatchCreate);
}
function getSubscribers({ target  }) {
    if (selectors.length > 0) return [
        ...target.querySelectorAll(selectors.join(', '))
    ];
    else return [];
}
function dispatchCreate(target) {
    if (!target.id) target.id = sufficientlyUniqueId();
    target.dispatchEvent(new Event(CREATE_EVENT));
    target.reactive = true;
}
new MutationObserver((mutationsList)=>{
    const targets = [
        ...mutationsList
    ].map(getSubscribers).flatMap((x1)=>x1);
    maybeCreateReactive(targets);
}).observe(document.body, {
    childList: true,
    subtree: true
});
function sufficientlyUniqueId() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
function createStore(initialState = {}, notify = ()=>null) {
    let state = {
        ...initialState
    };
    const context = {
        set: function(selector, payload, mergeHandler) {
            const newResource = mergeHandler(state[selector] || {}, payload);
            state = {
                ...state,
                [selector]: newResource
            };
            notify(selector);
        },
        get: function(selector) {
            return state[selector];
        }
    };
    return context;
}
const $10 = module('code-module');
$10.when('click', '.publish', (event)=>{
    const link = event.target.closest($10.selector).getAttribute('src');
    const { file  } = $10.learn();
    fetch(link, {
        method: 'PUT',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            file
        })
    }).then(()=>{
        window.location.href = window.location.href;
    });
});
$10.draw((target)=>{
    const link = target.getAttribute('src');
    console.log(link);
    const { file , fetching  } = $10.learn();
    if (!file && !fetching) {
        $10.teach({
            fetching: true
        });
        fetch(link).then((res)=>res.status === 404 ? (()=>{
                throw new Error();
            })() : res).then((res)=>res.text()).then((file)=>{
            $10.teach({
                file,
                fetching: false
            });
        }).catch((e)=>{
            fetch('/scripts/hello.js').then((res)=>res.text()).then((file)=>{
                $10.teach({
                    file,
                    fetching: false
                });
            });
        });
        return;
    }
    if (file && !target.view) {
        target.innerHTML = `
      <button class="publish">Publish</button>
    `;
        const config = {
            extensions: [
                I10,
                C6.updateListener.of(persist(target, $10, {}))
            ]
        };
        const state = w3.create({
            ...config,
            doc: file
        });
        target.view = new C6({
            parent: target,
            state
        });
    }
});
function persist(_target, $, _flags) {
    return (update)=>{
        if (update.changes.inserted.length < 0) return;
        const file = update.view.state.doc.toString();
        $.teach({
            file
        });
    };
}
$10.flair(`
  & {
		display: block;
  }
`);
function noop1() {}
const tauri = window.__TAURI__ || {
    window: {
        appWindow: {
            show: noop1
        }
    },
    tauri: {
        invoke: noop1
    },
    event: {
        listen: noop1
    }
};
const initialState = {
    gamepads: {}
};
const $11 = module('debug-devices', initialState);
function gamepads() {
    const { gamepads  } = $11.learn();
    return Object.keys(gamepads).map((id)=>({
            id,
            ...gamepads[id]
        }));
}
const { invoke  } = tauri.tauri;
const { listen: listen1  } = tauri.event;
const defaultGamepad = {
    axes: {},
    buttons: {}
};
const EVENTS = {
    'AxisChanged': onAxisChange,
    'ButtonChanged': onButtonChange
};
await listen1('rs2js', function receive(event) {
    console.log("js: rs2js: " + event.payload);
    const payload = JSON.parse(event.payload) || {};
    if (EVENTS[payload.event]) {
        EVENTS[payload.event](payload);
        requestAnimationFrame(tick);
    }
});
function tick() {
    const panes = [
        document.querySelector('stickies iframe')
    ];
    console.log({
        panes
    });
    panes.map((node)=>{
        node.contentWindow.postMessage({
            event: 'tick',
            gamepads: gamepads()
        }, '*');
    });
}
function onAxisChange({ id , key , value: value1  }) {
    $11.teach({
        key,
        value: value1
    }, mergeAxisChange(id));
}
function onButtonChange({ id , key , value: value1  }) {
    $11.teach({
        key,
        value: value1
    }, mergeButtonChange(id));
}
function mergeAxisChange(id) {
    return (state, payload)=>{
        const gamepad = state.gamepads[id] || defaultGamepad;
        return {
            ...state,
            gamepads: {
                ...state.gamepads,
                [id]: {
                    ...gamepad,
                    axes: {
                        ...gamepad.axes,
                        [payload.key]: payload.value
                    }
                }
            }
        };
    };
}
function mergeButtonChange(id) {
    return (state, payload)=>{
        const gamepad = state.gamepads[id] || defaultGamepad;
        return {
            ...state,
            gamepads: {
                ...state.gamepads,
                [id]: {
                    ...gamepad,
                    buttons: {
                        ...gamepad.buttons,
                        [payload.key]: payload.value
                    }
                }
            }
        };
    };
}
$11.draw((target)=>renderGamepads(target, $11));
$11.flair(`
  & .gamepads {
    list-style-type: none;
  }
  & .gamepad {
  }
  & .buttons,
  & .axes {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(2rem, 1fr));
    list-style-type: none;
    padding: .5rem 0 0;
  }
  & .input {
    background: linear-gradient(lime 0%, orange 50%, rebeccapurple 100%);
    background-size: 1px 6rem;
    background-repeat: repeat-x;
    background-position-y: var(--value);
    border-radius: 2rem;
    width: 2rem;
    height: 2rem;
    display: grid;
    place-content: center;
  }
`);
function renderGamepads(_target, $) {
    const { gamepads  } = $.learn();
    const list = Object.keys(gamepads).map((key)=>gamepads[key]).map((gamepad, index)=>`
      <div class="gamepad" id="${gamepad.id}">
        Buttons: ${Object.keys(gamepad.buttons).map((key)=>key + ': ' + gamepad.buttons[key])}
        <br/>
        Axes: ${Object.keys(gamepad.axes).map((key)=>key + ': ' + gamepad.axes[key])}
      </div>
    `).join('');
    return `<div class="gamepads">${list}</div>`;
}
const $12 = module('stickies', {
    rootActive: false,
    memory: firstMemories(),
    activeEmbed: `
    <iframe src="/stickies/synthia.html"></iframe>
  `
});
$12.draw((target)=>{
    const { memory , activeEmbed , rootActive  } = $12.learn();
    const memories = Object.keys(memory).map((key)=>memory[key]).filter(thinking);
    const stickies = memories.map((about)=>`
      <button data-key="${about.key}">
        ${about.title}
      </button>
    `).join('');
    const rootClass = rootActive ? 'active' : '';
    return `
    <div class="${rootClass}">
      <div class="root">
        ${stickies}
      </div>
      <div class="leaf">
        ${activeEmbed}
      </div>
    </div>
  `;
});
function thinking(about) {
    return about ? true : false;
}
function firstMemories() {
    return {
        '0': {
            key: '0',
            title: 'Authentication',
            embed: `
        <iframe src="/stickies/authentication.html"></iframe>
      `
        },
        '1': {
            key: '1',
            title: 'Devices',
            embed: `
        <iframe src="/stickies/devices.html"></iframe>
      `
        },
        '2': {
            key: '2',
            title: 'Synthia',
            embed: `
        <iframe src="/stickies/synthia.html"></iframe>
      `
        },
        '3': {
            key: '3',
            title: 'Slides',
            embed: `
        <iframe src="https://sillyz.computer/pages/slides/2022-js"></iframe>
      `
        }
    };
}
$12.when('click', 'button[data-key]', (event)=>{
    const { key  } = event.target.dataset;
    const { embed  } = $12.learn().memory[key];
    $12.teach({
        activeEmbed: embed
    });
});
$12.flair(`
  .root {
    position: fixed;
    inset: 0;
  }
  .leaf {
    background: dodgerblue;
    position: fixed;
    inset: 0;
  }

  .leaf iframe {
    background: dodgerblue;
    border: 0;
    width: 100%;
    height: 100%;
  }
`);
tauri.window.appWindow.show();
